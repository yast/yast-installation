/**
 * Module: 		inst_upgrade.ycp
 *
 * Authors:		Stefan Schubert <schubi@suse.de>
 *
 * Purpose:
 * Displays software selection screen of previous installed software-groups.
 * Show checkboxes for software categories. Let the user select his software.
 * if he want to UPGRADE his system.
 *
 * $Id$
 */

{
    textdomain "update";

    import "Arch";
    import "Mode";
    import "Installation";
    import "Wizard";
    import "Update";
    import "Packages";

    // ------------------------------------------------------------------------

    y2milestone("Setting targetroot of package DB: %1", Installation::destdir);    
    Pkg::TargetInit (Installation::destdir, false);
    SCR::Execute(.target.mkdir, Installation::destdir+"/var/log/YaST2");	// just in case
    Pkg::TargetLogfile (Installation::destdir+"/var/log/YaST2/y2logRPM");

    UI::OpenDialog(`opt(`decorated ),
		   // intermediate popup while initializing internal packagemanagement
		   `Label(_("Reading package information; One moment please...")));

    Mode::update = true;
    Packages::Init( true );
    Update::updateEvaluated = false; // evaluate updatelist new    
    UI::CloseDialog();

    // ------------------------------------------------------------------------
    // retrieve selection information

    boolean retval = false;
    list current_sel = Pkg::GetSelections (`installed, "base");
    if (current_sel == nil || current_sel == [])
	current_sel = Pkg::GetSelections (`selected, "base");
    if (current_sel == nil)
	current_sel = [];

    y2milestone("Current software sel: %1", current_sel);    

    // screen title for software selection

    string title = _("Choose update mode");

    list available_base_selections = Pkg::GetSelections (`available, "base");

    // Construct Box with Checkbox for each software category

    // Title of frame around "Upgrade"
    term baseconfsbox = `VBox();

    foreach(`sel, available_base_selections,
    ``{
	map seldata = Pkg::SelectionData (sel);

	string seldesc = seldata["summary"]:"";

	if (size ( current_sel ) == 0
	    && !Update::onlyUpdateSelected
	    && sel == "default" )
	{
	    // resetting to default selection
	    current_sel = [sel];		
	}

	baseconfsbox = add(baseconfsbox, `Left(`RadioButton(`id(sel),`opt(`notify, `autoShortcut),
						seldata["summary"]:"",
						contains (current_sel, sel))));
    });

    string wrn_msg = "";
    boolean added = false;

    // Checking: already selected addons or single selection?

    if (Pkg::IsManualSelection())
    {
	// Display warning message
	wrn_msg = _("\
You have already chosen software from \"Detailed selection\".\n\
You will lose that selection if you change the basic selection.");
	added = true;
    }

    // Build and show dialog

    term contents = `HVSquash(
	`VBox(
		// frame title for update selection
		`Frame( _("Please choose the type of upgrade you desire"),
			`VBox(
			`VSpacing(0.8),
			`RadioButtonGroup( `id(`bgoup), `opt(`notify),
				 `VBox(
					 `Left(`RadioButton(`id(`upgrade),`opt(`notify),
							// radio button label for update including new packages
							// translator: add a & shortcut
							  _("&Update your system to one of the predefined software selections\n(this may include new software packages):"), false) ),
					 `VSpacing(0.5),
					 `HBox(
					     `HSpacing(4),
					     `RadioButtonGroup(`id(`baseconf),`opt(`notify), baseconfsbox)
					     ),
					 `VSpacing(1.5),
					 `Left(`RadioButton(`id(`notupgrade),`opt(`notify),
							// radio button label for update of already installed packages only
							// translator: add a & shortcut
							  _("U&pdate installed packages only. No additional software will be installed."), true) ),
					 `VSpacing(1.5),
					 `Left(`CheckBox(`id(`delete),`opt(`notify),
							// check box label
							// translator: add a & shortcut
							 _("&Clean up the system - delete unmaintained packages."), Update::deleteOldPackages) ),
					 `VSpacing(1.5)
					 )
					 )
			)
			),
		`Label( `id(`wrn_label), wrn_msg )
		)
	);


    // explain chooseable system configurations
    // but beware: some of the text in <b>'s, e.g. Default comes from the index file,
    // translations must be consistent with po/index/index.??.po
    // help part 1 of 3

    string helptext = _("<p>
It is recommended to update 
your system to one of the 
predefined software selections 
to make use of the new 
features and benefits of 
the new <b>SuSE Linux</b> version.
</p>
");
    // help part 2 of 3
    helptext = helptext + _("<p>
You may, however, decide to update 
only the packages already installed 
on your system. In this case, 
some important packages might 
be missing, such as new YaST2 modules.
</p>\n");

    Wizard::SetContents(title, contents, helptext, Args(0),Args(1));

    if ( Update::onlyUpdateSelected )
    {
	foreach(`sel, available_base_selections,
	``{
	    UI::ChangeWidget(`id(sel), `Enabled, false);
	});

	UI::ChangeWidget(`id(`notupgrade), `Value, true);
    }
    else
    {
	foreach(`sel, available_base_selections,
	``{
	    UI::ChangeWidget(`id(sel), `Enabled, true);
	});

	UI::ChangeWidget(`id(`upgrade), `Value, true);
    }

    any ret = nil;

    while (true)
    {
	list save_sel = [];
	boolean save_notupgrade = UI::QueryWidget(`id(`notupgrade), `Value);

	if ( !Update::onlyUpdateSelected )
	{
	    save_sel = add( save_sel, UI::QueryWidget(`id(`baseconf), `CurrentButton));
	}
	if (!Mode::autoinst) 
	{
	    ret = Wizard::UserInput();
	} 
	else 
	{
	    ret = `next;
	}

	if ( ret == `abort && CallFunction(`inst_confirm_abort(`painless) ) )
	    return `abort;

	// Add the selection of the basic group
	current_sel = [];
	if (  !UI::QueryWidget(`id(`notupgrade), `Value) )
	{
	    current_sel = add(current_sel, UI::QueryWidget(`id(`baseconf),`CurrentButton));
	}

	if (save_sel != current_sel
	    || save_notupgrade != UI::QueryWidget(`id(`notupgrade), `Value)
	    || Update::deleteOldPackages !=  UI::QueryWidget( `id(`delete), `Value ))
	{
	    Update::deleteOldPackages = UI::QueryWidget( `id(`delete), `Value );

	    if (!added
			// yes/no question
		|| UI::YesNoPopup(_("Do you really want\nto reset your detailed selection?") ) )
	    {
		if ( save_sel != current_sel
		     && !UI::QueryWidget(`id(`notupgrade), `Value))
		{
		    // software-group-selection has been changed
		    Pkg::SetSelection (current_sel[0]:"");
		    Update::onlyUpdateSelected = false;
 		}
		else
		{
		    if ( UI::QueryWidget(`id(`notupgrade), `Value) )
		    {
			Update::onlyUpdateSelected = true;	
			
			foreach(`sel, available_base_selections,
			``{
			    UI::ChangeWidget(`id(sel), `Enabled, false);
			});
		    }
		    else
		    {
			Update::onlyUpdateSelected = false;
			Pkg::SetSelection ("default");
		    }
		}

		// resetting package-selection
		Pkg::ActivateSelections ();

		// Evaluate update packages new
		Update::updateEvaluated = false;
		
	    }
	    // rebuild
	    ret = `again;
	}

	// set the flag 'deleteOldPackages' to inform inst_sw_update.ycp 
	if ( ret == `next )
	{
	    Update::deleteOldPackages = UI::QueryWidget( `id(`delete), `Value );
	}
	
	if (ret == `cancel || ret == `back || ret == `next || ret == `again )
	    break;

    }

    y2milestone( "inst_upgrade return: %1", ret );
    return ret;
}
