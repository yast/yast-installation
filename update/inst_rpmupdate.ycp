/**
 * Module: 		inst_rpmupdate.ycp
 *
 * Authors:		Stefan Schubert (schubi@suse.de)
 *
 * Purpose:
 * Install, Update and remove all the RPM packages the user has selected.
 * Show installation dialogue. Show progress bars.
 * Request CD change from user.
 *
 * $Id$
 */

{
    textdomain "update";
    
    import "Arch";
    import "Report";
    import "Mode";
    import "Installation";
    import "Language";
    
    import "Update";

    import "PackageInstallation";
    import "SpaceCalculation";
    import "Packages";

    import "SlideShow";  

    include "showlog_defines.ycp";
    include "ui/common_popups.ycp";

    
    string rebuild_message = _("Checking package database. This process can take some time.");
    string rebuild_message_error = _("Checking package database has returned an error.
Check the log file /var/log/y2log
");

    integer maxnumbercds = 8;

    //
    // Popup to start rpm --rebuild
    //

    define rpmrebuild( ) ``{

	boolean success = true;

	UI::OpenDialog(`opt(`decorated),
			`VBox( `Heading( _("RPM DB rebuild")) ,
			     `VBox( `Label(rebuild_message),
				    `HSpacing(60),
				    `HBox(
					  `HSpacing(2),
					  `ProgressBar(`id(`progress),
							 _("Status"), 100),
					  `HSpacing(2)
					  ),
				    `VSpacing(1)
				    )
			     )
			);


	UI::ChangeWidget(`id(`progress), `Value, 0 );
	
	// rebuilding DB
	if ( !SCR::Execute (.targetpkg.rebuildDb, "") )
	{
	    y2error("SCR::Execute (.targetpkg.rebuildDb) not OK ");
	    success = false;
	}
	else
	{
	    y2milestone("SCR::Execute (.targetpkg.rebuildDb) OK ");	    

	    integer progress = 0;
	    integer nullCounter = 0;
	    integer changed = 0;
	    integer saveProgress = 0;

	    while ( progress < 100
		   && progress != -1
		   && nullCounter < 20
		   && changed < 20 )
	    {
		sleep ( 2000 );
		if ( progress > 0 )
		{
		    saveProgress = progress;
		}
		progress = SCR::Read (.targetpkg.rebuildDbProgress );
		if ( progress == 0 )
		{
		    nullCounter = nullCounter +1;
		}
		else
		{
		    nullCounter = 0;
		}

		if ( saveProgress > 0 )
		{
		    if( progress == saveProgress )
		    {
			changed = changed +1;
		    }
		    else
		    {
			changed = 0;
		    }
		}

		if ( progress >= 0 && progress <= 100 )
		{
		    UI::ChangeWidget(`id(`progress),`Value, progress );
		}
	    }
	    if (nullCounter >= 20
		|| progress == -1
		|| changed >= 20 )
	    {
		success = false;
	    }
	}

	// save
	sleep ( 3000 );

	UI::CloseDialog();

	return (success);
    };



    ////////////////////////////////////////////////////////////////////////////
    //  MAIN
    ////////////////////////////////////////////////////////////////////////////

    list base_packages = [];

    string tmpdir	= SCR::Read(.target.tmpdir);
    string language	= Language::language;

    SlideShow::SetLanguage( language );
    SlideShow::OpenSlideShowDialog();

    
    if ( Mode::cont )
    {
	y2milestone("Starting second part of package update");
	
	// Initalize package agent
	Update::Restore();
    }

    if ( Mode::initial )
    {
	// /etc/inittab will be overridden by package aaa_base. So we will
	// have to save the run-level

	string idfile = SCR::Read(.target.tmpdir) + "/idline";

	if ( SCR::Execute (.target.bash, "/bin/grep ^id: " + Installation::destdir + "/etc/inittab >" + idfile) == 0 )
	{
	    // idline = "id:X:initdefault:"

	    string idline = SCR::Read(.target.string, idfile);

	    // idsplit = "id", "X", "initdefault", ""
	    list idsplit = splitstring (idline, ":");

	    integer initdefault = -1;
	    if (size (idsplit) > 2)
	    {
		initdefault = tointeger (idsplit[1]:"3");
	    }

	    y2milestone("run-level %1 found", initdefault);

	    Update::last_runlevel = initdefault;
	}
    }

    SlideShow::InitPkgData();
     
    y2milestone("install_list: %1", install_list);

    if ( !Mode::cont )
    {
	// rebuilding RPM-Database only while first run of installation
	boolean ret = rpmrebuild();
    }

    any ret = `ok;

    bool kernel_affected = false;

    if (Mode::normal)
    {
	list kernels = filter (string k, Pkg::GetPackages(`installed, true), ``(substring(k, 0, 2) == "k_" ));
	kernel_affected = (size (kernels) > 0);
    }

    if ( Mode::initial )
    {
	Pkg::PkgCommit(1);
    }
    else
    {
	Pkg::PkgCommit(0);
    }

    if (kernel_affected)			// kernel affected
    {
	import "Boot";
	Boot::Write();				// re-write initrd and bootloader
    }

    // Now that we know how many packages to install, we can show the dialog

    y2milestone("%1 packages have been installed", Update::packagesInstalled);

    if (Mode::cont)
    {
	SCR::Execute(.target.remove, "/var/lib/YaST2/runme_at_boot");
    }

    // close "Slide" dialog (inst_rpmupdate doesn't use the "Wizard" dialog)
    UI::CloseDialog();
    
    return `next;
}
