/**
 * Module: 		inst_sw_backup.ycp
 *
 * Authors:		Stefan Schubert <schubi@suse.de>
 *
 * Purpose:
 * Ask the user for backup the the update process.
 *
 * $Id$
 */

{
    textdomain "update";

    import "Arch";
    import "Mode";
    import "Installation";
    import "Update";
    import "SpaceCalculation";
    import "Wizard";

    string backupPath     = "";
    
  //
  // Check, if the backup fits to disk
  //

  define checkBackupPath( list part_info ) ``{

      boolean found = false;
      integer free_space   = 0;

      if ( size ( backupPath ) <= 1 ||
	   substring(backupPath,0,1) != "/" )
      {
	  // error popup, user did not enter a valid directory specification
	  UI::MessagePopup( _("Input is not a path.") );
	  return ( false );
      }

      foreach( `part, part_info,
	    ``{
	         string part_name = part["name"]:"";


		 if ( part_name == "/" && !found )
		 {
		     free_space   = part["free"]:0;
		     y2milestone("Partition :%1", part_name);
		     y2milestone("free:%1", free_space );
		 }

		 if ( size ( backupPath ) >=2 && part_name != "/")
		 {
		     string compare_string = substring ( backupPath, 0 , size ( part_name ) );
		     if ( compare_string == part_name && !found )
		     {
			 free_space   = part["free"]:0;
			 y2milestone("Partition :%1", part_name );
			 y2milestone("free:%1", free_space );
			 found = true;
		     }
		     else
		     {
			 y2milestone("Partition :%1<->%2", part_name, compare_string);
		     }
		 }
      } );

      if ( free_space >= 50000 ||
	    Mode::test )
      {
	  return( true );
      }
      else
      {
	  // there is not enough space for the backup during update
	  // inform the user about this (MB==megabytes)
	  string message = sformat ( _("Minimum disk space of %1 MB required."), 50);
	  UI::MessagePopup( message );
	  return ( false );
      }
  };

    // ------------------------------------------------------------------------

    backupPath = Pkg::GetBackupPath();
    y2milestone("Current backuppath is %1.", backupPath );

    // Get information about available partitions

    list partition = SpaceCalculation::GetPartitionInfo();
    y2milestone("evaluate partitions: %1", partition);


    // screen title for software selection
    string title = _("Backup System Before Update");

    // Build and show dialog

    term contents = `HVSquash(
			      `VBox(
				    // checkbox label if user wants to backup config files before update
				    `Left(`CheckBox(`id(`backup),`opt(`notify), _("Create b&ackup"))),
				    `VSpacing(),
				    // label for text entry or backup path
				    `TextEntry(`id(`backupPath), _("Backup &path:"))
				    )
			     );


    string helptext = _("<p>
It is possible to make a <b>backup</b> of your existing system.
Please be aware that it will not be a complete backup. Only your
configuration files will be saved.
</p>
");

    Wizard::SetContents(title, contents, helptext, Args(0),Args(1));

    if ( size ( backupPath ) > 0 )
    {
	UI::ChangeWidget(`id(`backup), `Value, true);
	UI::ChangeWidget(`id(`backupPath), `Enabled, true);	
    }
    else
    {
	UI::ChangeWidget(`id(`backup), `Value, false);
	UI::ChangeWidget(`id(`backupPath), `Enabled, false);	
    }
    UI::ChangeWidget(`id(`backupPath), `Value, backupPath);


    any ret = nil;
    boolean error_found = false;
    while (true)
    {

	ret = Wizard::UserInput();

	if ( ret == `abort && CallFunction(`inst_confirm_abort(`painless) ) )
	    return `abort;

	if ( !UI::QueryWidget(`id(`backup), `Value) )
	{
	    UI::ChangeWidget(`id(`backupPath), `Enabled, false);
	}
	else
	{
	    UI::ChangeWidget(`id(`backupPath), `Enabled, true);
	    backupPath = UI::QueryWidget(`id(`backupPath), `Value);
	    if ( size ( backupPath ) <= 0 )
	    {
		backupPath = "/var/adm/backup";
		UI::ChangeWidget(`id(`backupPath), `Value, backupPath);
	    }
	}
	// Add the selection of the basic group

	if (ret == `cancel || ret == `back  ) break;

	if (  ret == `next )
	{
	    if ( UI::QueryWidget(`id(`backup), `Value) )
	    {
		if ( checkBackupPath ( partition ) )
		{
		    break;
		}
		else
		{
		    UI::SetFocus(`id(`backupPath));
		}
	    }
	    else
	    {
		break;
	    }
	}
    }

    if ( ret == `next )
    {
	if ( !UI::QueryWidget(`id(`backup), `Value) )
	{
	    backupPath = "";
	    y2debug( "no backup for update" );
	}
	else
	{
	    y2debug( "set backupPath to: %1", backupPath );
	}

	Pkg::SetBackupPath (backupPath);
    }
    y2debug( "inst_sw_backup return: %1", ret );

    return ret;
}
