<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Section originally written by Jiri Srain /jsrain@suse.cz/  -->
<section id="update">
    <title>Add-on Product Installation Workflow Specification</title>
    <section id="update-intro">
	<title>Introduction</title>

	<section id="update-intro-proddep">
	    <title>Product dependency</title>
	    <para>Everywhere, product B depends on product A, there is no dependency
	    related to product C. A, B and C are add-on products.</para>
	</section>
	    
	<section id="update-intro-order">
	    <title>Order of updates of the workflow/wizard</title>
	    <para>If there are two add-on products which want to insert their steps
	    into the same location of the installation workflow (or proposal), they
	    are inserted in the same order as the products are added. A must be added
	    before B (otherwise adding B fails), steps of A are always prior to steps
	    of B.</para>
	</section>

	<section id="update-intro-items">
	    <title>Steps/Proposal Items Naming</title>
	    <para>In order to avoid collisions of internal names of proposal items or
	    sequence steps, all items should have its internal name prefixed by the
	    add-on product name.</para>
	</section>

	<section id="update-updposs">
	    <title>Update possibilities</title>

		<section id="update-updposs-insert">
		    <title>Insert an item into proposal</title>
		    <para>Item is always added at the end of the proposal. Multiple
		    items are possible.</para>
		</section>

		<section id="update-updposs-remove">
		    <title>Remove an item from proposal</title>
		    <para>Specified item(s) are removed from proposal. Useful when
		    add-on product extends functionality of the base product. If
		    product B wants to remove an item of product A, must specify the
		    name of the product as well. Product C cannot remove items of
		    products A or B (and vice versa), product A cannot remove items
		    of product B.</para>
		</section>

		<section id="update-updposs-replace">
		    <title>Replace an item in proposal</title>
		    <para>Usable in the same cases as the case above. If an item has
		    been replaced by another item(s) of product A before applying
		    changes of product B, the item(s) of product A will be replaced
		    by item(s) of product B. Items of product C cannot be replaced by
		    items of product A or B (and vice versa), such combination of
		    products cannot be installed at the same time.</para>
		</section>

		<section id="update-updposs-insert">
		    <title>Insert steps to installation sequence</title>
		    <para>Before each step of base product installation, additional
		    step can be inserted (eg. another proposal). For the order of
		    additionally added steps, the same rules as for items of proposal
		    will be applied.</para>
		</section>

		<section id="update-updposs-append">
		    <title>Append steps to installation sequence</title>
		    <para>The steps can be appended at the end of installation
		    sequence.</para>
		</section>

		<section id="update-updposs-remoandrepl">
		    <title>Remove and replace steps in installation sequence</title>
		    <para>The same rules for removing and replacing steps of the
		    installation workflow as for proposal items will be applied.</para>
		</section>

		<section id="update-updposs-instfinish">
		    <title>Add, remove, replace items in inst_finish.ycp</title>
		    <para>The same rules as for steps of the installation workflow are
		    valid here. There will be some points in the inst_finish where
		    performing additional actions makes sense (at least one before
		    moving SCR to chroot and one after).</para>
		</section>

		<section id="update-updposs-replaceworkflow">
		    <title>Replace whole second-stage workflow</title>
		    <para>Add-on product may replace whole second stage of installation.
		    It should be used only in rare cases, as there is no possibility to
		    merge two workflows completely written from scratch. If a product
		    replaces the workflow, all changes of all products which replaced it
		    before (in case of installation of multiple products) are gone.
		    Add-on products selected after this product update the new workflow
		    (which may not work, as the steps usually have different naming).
		    This is perfectly OK if there are dependencies between add-on
		    products.</para>
		    <para>The workflow can be replaced only for specified installation
		    mode. If it is replaced, it must be replaced for all
		    architectures.</para>
		</section>

		<section id="update-updposs-addproposal">
		    <title>Adding a new proposal</title>
		    <para>New proposal can be added, as the proposal handling routines
		    are generic. The information which is for current product in control.xml
		    file has to be provided, and the proposal must be added as a step into
		    the installation workflow. Basically, adding proposal has two
		    steps:</para>

		    <itemizedlist>
			<listitem>
			    <para>defining the proposal (name, items,...)</para>
			</listitem>

			<listitem>
			    <para>adding a new step to the workflow referring to the new
			    added proposal</para>
			</listitem>
		    </itemizedlist>
		</section>

		<section id="update-updposs-replaceproposal">
		    <title>Replace or remove whole proposal</title>
		    <para>Is possible as replacing or removing a step of the installation
		    workflow.</para>
		</section>
	</section>

	<section id="update-filelayout">
	    <title>File layout</title>
		<section id="update-filelayout-addon">
		    <title>Add-on Product CD</title>
		    <para>There will be following files in the root directory of the
		    add-on product's CD:</para>

		    <itemizedlist>
			<listitem>
			    <para>servicepack.tar.gz – tarball with files which are
			    needed for the installation, both together with base
			    product and separatelly. Special files inside this
			    tarball:</para>

			    <itemizedlist>
				<listitem>
				    <para>installation.xml – the control file of the
				    add-on product</para>
				</listitem>
				<listitem>
				    <para>the whole tarball or installation.xml can be
				    missing if add-on product doesn't provide any custom
				    installer, in this case, only its packages are added
				    to the package manager dialog, and packages/patterns/...
				    required by the product are selected by the
				    solver</para>
				</listitem>
			    </itemizedlist>
			</listitem>

			<listitem>
			    <para>(optional) setup.sh – script which starts the
			    installation automatically once the CD is in the
			    drive</para>
			</listitem>

			<listitem>
			    <para>(optional) files needed to make the CD bootable
			    (kernel, initrd, isolinux,...)</para>
			</listitem>
		    </itemizedlist>
		</section>

		<section id="update-filelayout-wkfadapt">
		    <title>Workflow Adaptation</title>
		    <para>There is only a single control file to describe both an
		    add-on and standalone product installation. It is called
		    installation.xml. In principle, it contains a diff description
		    containing the changes to be applied to the installation workflow
		    plus a workflow, which is used for standalone product installation.
		    The reason why both installation methods are stored in a single
		    file is that the product features has to be shared as well as some
		    proposals and clients can be reused.</para>

		    <para>The proposals which are defined for standalone installation
		    are also available for the installation together with the base
		    product. They don't have to be defined twice.</para>

		    <para>The files are located in the top directory of the add-on
		    product installation source.</para>
		</section>
	</section>

	<section id="update-difffileformat">
	    <title>Diff File Format</title>
	    <para>Because there are no really usable open source XML diff tools (the
	    existing ones are typically written in Java), we define a special purpose
	    file format aimed to cover the cases as described in the previous
	    chapter.</para>

	    <para>In principle, the format is a list of directives to be applied to
	    the existing control.xml. In principle, the file is a control file
	    defining its own proposals, workflows etc. The control file has a special
	    section, which defines changes to the existing workflow and
	    proposals.</para>

	    <programlisting>
		<xi:include href="examples/update-difffileformat.xml" parse="text"
		    xmlns:xi="http://www.w3.org/2001/XInclude"/>
	    </programlisting>

	</section>

	<section id="update-textdomain">
	    <title>Setting a text domain</title>
	    <para>Text domain is important for YaST to handle translations
	    properly. The appropriate set of .mo-files must be present to have
	    the texts related to the control file translated.</para>

	    <programlisting>
		&lt;textdomain&gt;OES&lt;/textdomain&gt;
	    </programlisting>
	</section>

	<section id="update-standaloneinst">
	    <title>Defining proposals and workflow for standalone installation</title>
	    <para>The proposals are defined the same way as for the base product.
	    The workflow for the standalone installation must have the mode and stage
	    set</para>

	    <programlisting>
		&lt;mode&gt;installation&lt;/mode&gt;
		&lt;stage&gt;normal&lt;/stage&gt;
	    </programlisting>
	</section>

	<section id="update-proposalmodif">
	    <title>Proposal modification</title>
	    <para>The label of the proposal can be modified. The mode, stage, and
	    proposal name has to be specified, other options (enable_skip,
	    architecture) are optional. The modes, stages, and architectures
	    do not</para>

	    <programlisting>
		&lt;proposal&gt;
		    &lt;label&gt;OES Installation Settings&lt;/label&gt;
		    &lt;mode&gt;installation,demo,autoinstallation&lt;/mode&gt;
		    &lt;stage&gt;initial&lt;/stage&gt;
		    &lt;name&gt;initial&lt;/name&gt;
		    &lt;enable_skip&gt;no&lt;/enable_skip&gt;
		    [.....]
		&lt;/proposal&gt;
	    </programlisting>
	</section>

	<section id="update-append">
	    <title>Appending an item at the end of proposal</title>
	    <para>Adding an item to a proposal is possible at the end only.
	    If the proposal has tabs, the items are added to a new created
	    tab.</para>

	    <programlisting>
		&lt;append_modules config:type="list"&gt;
		    &lt;append_module&gt;module_1&lt;/append_module&gt;
		    &lt;append_module&gt;module_2&lt;/append_module&gt;
		&lt;/append_modules&gt;
	    </programlisting>
	</section>

	<section id="update-removeproposal">
	    <title>Removing an item from a proposal</title>
	    <programlisting>
		&lt;remove_modules config:type="list"&gt;
		    &lt;remove_module&gt;module_3&lt;/remove_module&gt;
		    &lt;remove_module&gt;module_4&lt;/remove_module&gt;
		&lt;/remove_modules&gt;
	    </programlisting>
	</section>

	<section id="update-replaceproposal">
	    <title>Replacing an item of a proposal</title>
	    <para>The replacement is available in 1:N mode – one client is to be
	    replaced by one or more new clients. If you need M:N use remove and
	    replace together.</para>

	    <programlisting>
		&lt;replace_modules config:type="list"&gt;
		    &lt;replace_module&gt;
			&lt;replace&gt;old_module&lt;/replace&gt;
			&lt;new_modules config:type="list"&gt;
			    &lt;new_module&gt;module_5&lt;/new_module&gt;
			    &lt;new_module&gt;module_6&lt;/new_module&gt;
			&lt;/new_modules&gt;
		    &lt;/replace_module&gt;
		&lt;/replace_modules&gt;
	    </programlisting>
	</section>

	<section id="update-workflowupdates">
	    <title>Workflow updates</title>
	    <para>The workflow to update is identified the same way as other
	    workflows. The archs, modes, and installation don't need tobe
	    alligned to the same groups as in the base product
	    workflows.</para>

	    <programlisting>
		&lt;workflow&gt;
		    &lt;defaults&gt;
			&lt;archs&gt;all&lt;/archs&gt;
			&lt;enable_back&gt;no&lt;/enable_back&gt;
			&lt;enable_next&gt;no&lt;/enable_next&gt;
		    &lt;/defaults&gt;
		    &lt;mode&gt;installation&lt;/mode&gt;
		    &lt;stage&gt;initial&lt;/stage&gt;
		    [...]
		&lt;/workflow&gt;
	    </programlisting>
	</section>

	<section id="update-append">
	    <title>Append steps to the end of installation sequence</title>

	    <programlisting>
		&lt;append_modules config:type="list"&gt;
		    &lt;module&gt;
			&lt;heading&gt;yes&lt;/heading&gt;
			&lt;label&gt;OES configuration&lt;/label&gt;
		    &lt;/module&gt;
		    &lt;module&gt;
			&lt;label&gt;Perform Installation&lt;/label&gt;
			&lt;name&gt;a1_netsetup&lt;/name&gt;
		    &lt;/module&gt;
		    &lt;module&gt;
			&lt;label&gt;Perform Installation&lt;/label&gt;
			&lt;name&gt;a2_netprobe&lt;/name&gt;
		    &lt;/module&gt;
		    [...]
		&lt;/append_modules&gt;
	    </programlisting>
	</section>

	<section id="update-insert">
	    <title>Insert steps to installation sequence</title>

	    <programlisting>
		&lt;insert_modules config:type="list"&gt;
		    &lt;insert_module&gt;
			&lt;before&gt;perform&lt;/before&gt;
			&lt;modules config:type="list"&gt;
			    &lt;module&gt;
				&lt;label&gt;Perform Installation&lt;/label&gt;
				&lt;name&gt;i1_netprobe&lt;/name&gt;
			    &lt;/module&gt;
			    [...]
			&lt;/modules&gt;
		    &lt;/insert_module&gt;
		&lt;/insert_modules&gt;
	    </programlisting>
	</section>

	<section id="update-removesteps">
	    <title>Remove steps from installation sequence</title>

	    <programlisting>
		&lt;remove_modules config:type="list"&gt;
		    &lt;remove_module&gt;finish&lt;/remove_module&gt;
		    [...]
		&lt;/remove_modules&gt;
	    </programlisting>
	</section>

	<section id="update-replacesteps">
	    <title>Replace steps in installation sequence</title>

	    <programlisting>
		&lt;replace_modules config:type="list"&gt;
		    &lt;replace_module&gt;
			&lt;replace&gt;language&lt;/replace&gt;
			&lt;modules config:type="list"&gt;
			    &lt;module&gt;
				&lt;label&gt;Perform Installation&lt;/label&gt;
				&lt;name&gt;r1_language&lt;/name&gt;
			    &lt;/module&gt;
			    [...]
			&lt;/modules&gt;
		    &lt;/replace_module&gt;
		&lt;/replace_modules&gt;
	    </programlisting>
	</section>

	<section id="update-instfinish">
	    <title>Add items in inst_finish.ycp</title>
	    <para>In CODE 10, the last step of an installation commonly known
	    as inst_finish has been modularized, so it's possible to control
	    the clients started at the end of the 1st stage. In principle, this
	    phase runs in a chroot environment – all system access is done via
	    chrooted process.</para>

	    <para>There are 3 cases that an add-on product can modify the workflow...</para>

	    <section id="update-instfinish-beforechroot">
		<title>Before chroot</title>

		<programlisting>
		    &lt;inst_finish_stages config:type="list"&gt;
			&lt;before_chroot&gt;
			    &lt;label&gt;Copy Theme&lt;/label&gt;
			    &lt;steps config:type="list"&gt;
				&lt;step&gt;copy_theme&lt;/step&gt;
				[...]
			    &lt;/steps&gt;
			&lt;/before_chroot&gt;
		    &lt;/inst_finish_stages&gt;
		</programlisting>
	    </section>

	    <section id="update-instfinish-chroot">
		<title>Running in chroot</title>

		<programlisting>
		    &lt;inst_finish_stages config:type="list"&gt;
			&lt;chroot&gt;
			    &lt;label&gt;Update Configuration&lt;/label&gt;
			    &lt;steps config:type="list"&gt;
				&lt;step&gt;pkg&lt;/step&gt;
				[...]
			    &lt;/steps&gt;
			&lt;/chroot&gt;
		    &lt;/inst_finish_stages&gt;
		</programlisting>
	    </section>

	    <section id="update-instfinish-beforeumount">
		<title>Before unmounting the system</title>

		<programlisting>
		    &lt;inst_finish_stages config:type="list"&gt;
			&lt;before_umount&gt;
			    &lt;label&gt;Disconnect Network Disks&lt;/label&gt;
			    &lt;steps config:type="list"&gt;
				&lt;step&gt;iscsi_disconnect&lt;/step&gt;
				[...]
			    &lt;/steps&gt;
			&lt;/before_umount&gt;
		    &lt;/inst_finish_stages&gt;
		</programlisting>
	    </section>

	    <para>All new steps are added at the end of the current list in the
	    particular inst_finish workflow. It is not possible to remove any
	    other inst_finish clients or replace them.</para>
	</section>

	<section id="update-replaceworkflow">
	    <title>Replace whole second-stage workflow</title>
	    <para>To replace a workflow, just create workflows as in base
	    product control file. The important is that the stage of the
	    workflow is set to</para>

	    <programlisting>
		&lt;stage&gt;continue&lt;/stage&gt;
	    </programlisting>

	    <para>and the mode is set for the specified mode.</para>
	</section>

	<section id="update-algorithm">
	    <title>Algorith for Adapting Workflow</title>
	    <para>The algorithm is rather straightforward. Every time, remove
	    is applied first, then replace and the last step is add. This is
	    done per product, so first the changes by product A are applied,
	    then by product B etc.</para>
	</section>

	<section id="update-algorithm-features">
	    <title>Product Features</title>
	    <para>One of the most important data stored in the control.xml
	    file are the values to influence the behavior of YaST code,
	    like proposals etc. The idea is the same as for workflow/proposal
	    adaptation: by redefining a value, the resulting values are
	    changed. Within YaST, the options are accessible via
	    ProductFeatures module. No new option groups can be defined.
	    Options which are defined by the base product, but not by the
	    add-on product, are kept unchanged (base product's value is
	    used).</para>

	    <programlisting>
		&lt;globals&gt;
		    &lt;additional_kernel_parameters&gt;&lt;/additional_kernel_parameters&gt;
		&lt;/globals&gt;
		[...]
		&lt;software&gt;
		    &lt;selection_type config:type="symbol"&gt;auto&lt;/selection_type&gt;
		&lt;/software&gt;
	    </programlisting>
	</section>

	<section>
	    <title>AutoYaST profile generation</title>
	    <para>At the end of the installation, a profile for AutoYaST can be
	    generated. The profile will be generated using modules from the base
	    product and modules specified in the add-on product control
	    file.</para>

	    <programlisting>
		&lt;clone_modules config:type="list"&gt;
		    &lt;clone_module&gt;printer&lt;/clone_module&gt;
		    [...]
		&lt;/clone_modules&gt;
	    </programlisting>
	</section>

	<section>
	    <title>Example of OES 1.0</title>
	    <para>The network code is instructed to force a static IP
	    address.</para>

	    <para>The control file contains steps for both standalone installation
	    and installation together with the base product. In the standalone
	    installation workflow, selecting and installing packages is missing,
	    these steps need to be prepended to the workflow.</para>

	    <programlisting>
	    <xi:include href="examples/update-oes-example.xml" parse="text"
		xmlns:xi="http://www.w3.org/2001/XInclude"/>
	    </programlisting>
	</section>
    </section>
</section>
