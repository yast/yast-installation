default namespace = "http://www.suse.com/1.0/yast2ns"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace config = "http://www.suse.com/1.0/configns"

# types

BOOLEAN =
  (
    attribute config:type { "boolean" },
    ( "true" | "false" )
  )

INTEGER =
  (
    attribute config:type { "integer" },
    xsd:integer
  )

SYMBOL =
  (
    attribute config:type { "symbol" },
    text
  )

LIST =
  attribute config:type { "list" }

# types

textdomain = element textdomain { text }

# globals

globals_elements =
    incomplete_translation_treshold
    | additional_kernel_parameters
    | ui_mode
    | base_product_license_directory
    | enable_autologin
    | enable_firewall
    | firewall_enable_ssh
    | firewall_enable_ssh
    | write_hostname_to_hosts
    | inform_about_suboptimal_distribution
    | skip_language_dialog
    | enable_clone
    | enable_register_hwdata
    | enable_register_optional
    | display_register_forcereg
    | disable_register_w3m
    | register_monthly
    | manual_online_update
    | root_password_as_first_user
    | root_password_ca_check
    | show_online_repositories
    | online_repositories_default
    | show_addons
    | addons_default
    | enable_autoconfiguration
    | autoconfiguration_default
    | kexec_reboot
    | rle_offer_rulevel_4
    | default_ntp_setup
    | save_instsys_content
    | copy_to_system
    | autoconfiguration_enabled_modules
    | automatic_configuration
    | displaymanager_shutdown
    | enable_kdump
    | polkit_default_privs

additional_kernel_parameters = element additional_kernel_parameters { text }
incomplete_translation_treshold = element incomplete_translation_treshold { text }
base_product_license_directory = element base_product_license_directory { text }
ui_mode = element ui_mode { text }
displaymanager_shutdown = element displaymanager_shutdown { text }
polkit_default_privs = element polkit_default_privs { text }

enable_autologin = element enable_autologin { BOOLEAN }
enable_firewall = element enable_firewall { BOOLEAN }
firewall_enable_ssh = element firewall_enable_ssh { BOOLEAN }
write_hostname_to_hosts = element write_hostname_to_hosts { BOOLEAN }
inform_about_suboptimal_distribution = element inform_about_suboptimal_distribution { BOOLEAN }
skip_language_dialog = element skip_language_dialog { BOOLEAN }
enable_clone = element enable_clone { BOOLEAN }
enable_register_hwdata = element enable_register_hwdata { BOOLEAN }
enable_register_optional = element enable_register_optional { BOOLEAN }
display_register_forcereg = element display_register_forcereg { BOOLEAN }
disable_register_w3m = element disable_register_w3m { BOOLEAN }
register_monthly = element register_monthly { BOOLEAN }
manual_online_update = element manual_online_update { BOOLEAN }
root_password_as_first_user = element root_password_as_first_user { BOOLEAN }
root_password_ca_check = element root_password_ca_check { BOOLEAN }
show_online_repositories = element show_online_repositories { BOOLEAN }
online_repositories_default = element online_repositories_default { BOOLEAN }
show_addons = element show_addons { BOOLEAN }
addons_default = element addons_default { BOOLEAN }
enable_autoconfiguration = element enable_autoconfiguration { BOOLEAN }
autoconfiguration_default = element autoconfiguration_default { BOOLEAN }
kexec_reboot = element kexec_reboot { BOOLEAN }
rle_offer_rulevel_4 = element rle_offer_rulevel_4 { BOOLEAN }
default_ntp_setup = element default_ntp_setup { BOOLEAN }
enable_kdump = element enable_kdump { BOOLEAN }

save_instsys_content = element save_instsys_content {
    LIST,
    element save_instsys_item {
	element system_directory { text } &
	element instsys_directory { text }
    }*
}

copy_to_system = element copy_to_system {
    LIST,
    element copy_to_system_item {
	element copy_to_dir { text } &
	element mandatory_files {
	    LIST,
	    element file_item { text }+
	}+ &
	element optional_files {
	    LIST,
	    element file_item { text }+
	}*
    }*
}

autoconfiguration_enabled_modules = element autoconfiguration_enabled_modules {
    LIST,
    element module { text }+
}

automatic_configuration = element automatic_configuration {
    LIST,
    element ac_step {
	element text_id { text }? &
	element icon { text }? &
	element type { "scripts" | "proposals" }? &
	element ac_items {
	    LIST,
	    element ac_item { text }+
	}?
    }+
}

globals = element globals {
    globals_elements*
}

# globals

# software

software_elements =
    delete_old_packages
    | delete_old_packages_reverse_list
    | silently_downgrade_packages
    | silently_downgrade_packages_reverse_list
    | only_update_selected
    | only_update_selected_reverse_list
    | products_supported_for_upgrade
    | selection_type
    | system_scenarios
    | default_system_scenario
    | supported_desktops
    | default_desktop
    | display_support_status
    | online_repos_preselected
    | external_sources_link
    | dropped_packages
    | extra_urls
    | base_selection

delete_old_packages = element delete_old_packages { BOOLEAN }
selection_type = element selection_type { SYMBOL }
default_system_scenario = element default_system_scenario { text }
default_desktop = element default_desktop { text }
display_support_status = element display_support_status { BOOLEAN }
silently_downgrade_packages = element silently_downgrade_packages { BOOLEAN }
only_update_selected = element only_update_selected { BOOLEAN }
online_repos_preselected = element online_repos_preselected { BOOLEAN }
external_sources_link = element external_sources_link { text }
dropped_packages = element dropped_packages { text }
base_selection = element base_selection { text }

delete_old_packages_reverse_list = element delete_old_packages_reverse_list {
    LIST,
    element regexp_item { text }+
}

system_scenarios = element system_scenarios {
    LIST,
    element system_scenario {
	element id { text } &
	element patterns { text } &
	element icon { text }
    }+
}

supported_desktops = element supported_desktops {
    LIST,
    element one_supported_desktop {
	element name { text } &
	element desktop { text } &
	element label_id { text }? &
	element logon { text } &
	element cursor { text } &
	element packages { text } &
	element order { INTEGER }? &
	element patterns { text } &
	element icon { text }? &
	element description_id { text }?
    }+
}

only_update_selected_reverse_list = element only_update_selected_reverse_list {
    LIST,
    element regexp_item { text }+
}

products_supported_for_upgrade = element products_supported_for_upgrade {
    LIST,
    element regexp_item { text }+
}

silently_downgrade_packages_reverse_list = element silently_downgrade_packages_reverse_list {
    LIST,
    element regexp_item { text }+
}

extra_urls = element extra_urls {
    LIST,
    element extra_url {
	element baseurl { text } &
	element name { text }? &
	element alias { text }? &
	element prod_dir { text }? &
	element enabled { BOOLEAN }? &
	element autorefresh { BOOLEAN }? &
	element priority { INTEGER }?
    }+
}

software = element software {
    software_elements*
}

# software

# partitioning

partitioning_elements =
    evms_config
    | try_separate_home
    | limit_try_home
    | root_space_percent
    | root_base_size
    | root_max_size
    | proposal_lvm
    | proposal_evms
    | vm_desired_size
    | vm_home_max_size
    | boot_evms

evms_config = element evms_config { BOOLEAN }
try_separate_home = element try_separate_home { BOOLEAN }
limit_try_home = element limit_try_home { text }
root_space_percent = element root_space_percent { text }
root_base_size = element root_base_size { text }
root_max_size = element root_max_size { text }
proposal_lvm = element proposal_lvm { BOOLEAN }
proposal_evms = element proposal_evms { BOOLEAN }
vm_desired_size = element vm_desired_size { text }
vm_home_max_size = element vm_home_max_size { text }
boot_evms = element boot_evms { BOOLEAN }

partitioning = element partitioning {
    partitioning_elements*
}

# partitioning

# network

network_elements =
    force_static_ip
    | network_manager
    | startmode

force_static_ip = element force_static_ip { BOOLEAN }
network_manager = element network_manager { text }
startmode = element startmode { text }

network = element network {
    network_elements*
}

# network

# clone_modules

clone_modules = element clone_modules {
    LIST,
    element clone_module { text }+
}

# clone_modules

# texts

texts = element texts {
    empty
}

# texts

# proposals

proposal = element proposal {
    element label { text } &
    element archs { text }? &
    element mode { text } &
    element stage { text } &
    element name { text } &
    element enable_skip { text }? &
    element proposal_modules {
	LIST,
	element proposal_module {
	    element name { text } &
	    element presentation_order { text }?
	}+
    } &
    element proposal_tabs {
	LIST,
	element proposal_tab {
	    element label { text } &
	    element proposal_modules {
		LIST,
		element proposal_module { text }+
	    }
	}+
    }?
}

proposals = element proposals {
    LIST,
    proposal+
}

# proposals

workflows = element workflows { text }

productDefines_elements =
    textdomain
    | globals
    | software
    | partitioning
    | network
    | proposals
    | workflows
    | clone_modules
    | texts

start = element productDefines {
    productDefines_elements*
}
