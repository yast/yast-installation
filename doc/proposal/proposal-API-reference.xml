<?xml version="1.0" encoding="ISO-8859-1"?>
<section id="proposal_api_reference">
 <title>Proposal API Reference</title>

 <para><!-- FIXME: explanatory para --></para>

 <section id="proposal_MakeProposal">
  <title>MakeProposal</title>
  <subtitle>Make proposal for installation.</subtitle>

  <para>
   <emphasis>map</emphasis> <literal>MakeProposal</literal>(
   <emphasis>boolean</emphasis> <literal>force_reset</literal>,
   <emphasis>boolean</emphasis> <literal>language_changed</literal> )
  </para>

  <section>
   <title>Parameters</title>

   <itemizedlist>
    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>force_reset</literal>
     </para>
     <para>
      If 'true', discard anything that may be cached and start over from
      scratch. If 'false', use cached values from the last invocation if
      there are any.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>language_changed</literal>
     </para>
     <para>The installation language has changed since the last call of
      <literal>MakeProposal</literal>. This is important only if there
      is a language change mechanism in one of the other submodules.
      If this parameter is "true", any texts the user can see in
      the proposal need to be retranslated. The internal translator mechanism
      will take care of this itself if the corresponding strings are once more
      put through it (the <literal>_("...")</literal> function). Only very few
      submodules that translate any strings internally based on internal maps
      (e.g., keyboard etc.) need to take more action.
     </para>
    </listitem>

   </itemizedlist>
  </section>

  <section>
   <title>Return Values</title>
   <para>
    <literal>MakeProposal()</literal> returns a map containing:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <emphasis>list&lt;string&gt;</emphasis> <literal>links</literal>
     </para>
     <para>
      A list of additional hyperlink ids used in summaries returned by this
      section. All possible values must be included.
     </para>
     <para>Example:</para>
     <programlisting>["device_enable", "device_test"]</programlisting>
    </listitem>

    <listitem>
     <para>
      <emphasis>string</emphasis> <literal>preformatted_proposal</literal>
      (optional)
     </para>
     <para>
      Human readable proposal preformatted in HTML.
     </para>
     <note>
      <para>
       You can use the HTML:: module for such formatting.
      </para>
     </note>
    </listitem>

    <listitem>
     <para>
      <emphasis>list</emphasis> <literal>raw_proposal</literal>
     </para>
     <para>
      (only used if 'preformatted_proposal' is not present in the result map)
     </para>
     <para>
      Human readable proposal, not formatted yet. The caller will format each
      list item (string) as a HTML list item
      <literal>( "&lt;li&gt; ... &lt;/li&gt;" )</literal>.
     </para>
     <para>
      The proposal can contain hyperlinks with ids listed in the list
      <literal>links</literal>.
     </para>
     <para>
      The caller will make a HTML unsorted list of this, e.g.:
     </para>
     <programlisting>&lt;ul&gt;
&lt;li&gt;string from list element #1&lt;/li&gt;
&lt;li&gt;string from list element #2&lt;/li&gt;
&lt;li&gt;string from list element #3&lt;/li&gt;
...
&lt;/ul&gt;</programlisting>
    </listitem>

    <listitem>
     <para>
      <emphasis>string</emphasis> <literal>warning</literal> (optional)
     </para>
     <para>
      Warning in human readable format without HTML tags other
      than &lt;br&gt;.
     </para>
     <para>
      The warning will be embedded in appropriate HTML format specifications
      according to 'warning_level' below.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>symbol</emphasis> <literal>warning_level</literal> (optional)
     </para>
     <para>
      Determines the severity and the visual display of the warning.
      Valid values:
     </para>
     <itemizedlist>
      <listitem>`notice</listitem>
      <listitem>`warning (default)</listitem>
      <listitem>`error</listitem>
      <listitem>`blocker</listitem>
      <listitem>`fatal</listitem>
     </itemizedlist>
     <para>
      <emphasis>`blocker</emphasis> will prevent the user from continuing the
      installation. If any proposal contains a `blocker warning, the "accept"
      button in the proposal dialog will be disabled - the user needs to fix
      that blocker before continuing.
     </para>
     <para>
      <emphasis>`fatal</emphasis> is like `blocker but also stops building
      the proposal
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>language_changed</literal>
      (optional)
     </para>
     <para>
      This module just caused a change of the installation language. This is
      only relevant for the "language" module.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>mode_changed</literal> (optional)
     </para>
     <para>
      This module just caused a change of the installation mode. This is only
      relevant for the "inst mode" module.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>rootpart_changed</literal>
      (optional)
     </para>
     <para>
      This module just caused a change of the root partition. This is only
      relevant for the "root part" module.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>string</emphasis> <literal>help</literal>
      (optional)
     </para>
       Helptext for this module which appears in the standard dialog
       help (particular helps for modules sorted by presentation order).
     <para>
     </para>
    </listitem>    

   </itemizedlist>
  </section>
 </section>

 <section id="proposal_AskUser">
  <title>AskUser</title>
  <subtitle>Run an interactive workflow</subtitle>

  <para>
   <emphasis>map</emphasis> <literal>AskUser</literal>(
   <emphasis>boolean</emphasis> <literal>has_next</literal>,
   <emphasis>string</emphasis> <literal>chosen_id</literal> )
  </para>

  <section>
   <title>Parameters</title>

   <itemizedlist>
    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>has_next</literal>
     </para>

     <para>
      Use a "next" button even if the module by itself has only one step, thus
      would normally have an "OK" button - or would rename the "next" button
      to something like "finish" or "accept".
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>string</emphasis> <literal>chosen_id</literal>
     </para>

     <para>
      If a section proposal contains hyperlinks and user clicks on one of them,
      this defines the id of the hyperlink. All hyperlink IDs must be set in
      the map retuned by <literal>Description</literal>. If a user didn't click
      on a proposal hyperlink, this parameter is not defined.
     </para>
    </listitem>

   </itemizedlist>
  </section>

  <section>
   <title>Description</title>

   <para>
    Run an interactive workflow - let user decide upon values he might want
    to change. May contain one single dialog, a sequence of dialogs or one
    master dialog with one or more "expert" dialogs. The module is responsible
    for controlling the workflow sequence (i.e., "next", "back" buttons etc.).
   </para>

   <para>
    Submodules don't provide an "abort" button to abort the entire
    installation. If the user wishes to  do that, he can always go back to
    the main dialog (the installation proposal) and choose "abort" there.
   </para>
  </section>

  <section>
   <title>Return Values</title>

   <para>
    <literal>AskUser()</literal> returns a map containing:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>symbol</emphasis> workflow_sequence
     </para>

     <itemizedlist>
      <listitem>
       <para>
        <literal>`next</literal> (default)
       </para>
       <para>
        Everything OK - continue with the next step in workflow sequence.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>`back</literal>
       </para>
       <para>
        User requested to go back in the workflow sequence.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>`again</literal>
       </para>
       <para>
        Call this submodule again (i.e., re-initialize the submodule)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>`auto</literal>
       </para>
       <para>
        Continue with the workflow sequence in the current direction
	- forward if the last submodule returned `next, backward otherwise.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>`finish</literal>
       </para>
       <para>
        Finish the installation. This is specific to "inst_mode.ycp" when
	the user selected "boot system" there.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>

    <listitem>
     <para>
      <emphasis>boolean</emphasis> language_changed (optional)
     </para>
     <para>
      This module just caused a change of the installation language. This is
      only relevant for the "language" module.
     </para>
    </listitem>

   </itemizedlist>
  </section>
 </section>

 <section id="proposal_Description">
  <title>Description</title>
  <subtitle>Return human readable titles both for the RichText (HTML) widget
  and for menuentries.</subtitle>

  <para>
   <emphasis>map</emphasis> <literal>Description</literal>()
  </para>

  <section>
   <title>Return Values</title>
   <para>Returns a map containing:</para>
    <itemizedlist>

     <listitem>
      <para>
       <emphasis>string</emphasis> <literal>rich_text_title</literal>
      </para>
      <para>
       (Translated) human readable title for this section in
       the <literal>RichText</literal> widget without any HTML formatting.
       This will be embedded in
      </para>
      <screen>&lt;h3&gt;&lt;a href="???"&gt; ... &lt;/a&gt;&lt;/h3&gt;</screen>
      <para>
       so make sure not to add any additional HTML formatting.
      </para>
      <para>
       Keyboard shortcuts are not (yet?) supported, so don't include
       any '&amp;' characters.
      </para>
      <para>Example:</para>
      <programlisting>"Input devices"</programlisting>
    </listitem>

    <listitem>
     <para>
      <emphasis>string</emphasis> <literal>menu_title</literal>
     </para>
     <para>
      (Translated) human readable menuentry for this section. Must contain
      a keyboard shortcut ('&amp;'). Should NOT contain trailing periods
      ('...') - the caller will add them.</para>
     <para>Example:</para>
     <programlisting>"&amp;Input devices"</programlisting>
    </listitem>

    <listitem>
     <para>
      <emphasis>string</emphasis> <literal>id</literal>
     </para>
     <para>
      Programmer readable unique identifier for this section. This is not
      auto-generated to keep the log file readable.</para>
     <para>Example:</para>
     <programlisting>"input_dev"</programlisting>
    </listitem>
   </itemizedlist>

   <para>
    This map may be empty. In this case, this proposal section will silently
    be ignored. Proposals modules may use this if there is no useful proposal
    at all. Use with caution - this may be confusing for the user.
   </para>

   <note>
    <para>
     In this case, all other proposal functions must return a useful success
     value so they can be called without problems.
    </para>
   </note>
  </section>
 </section>

 <section id="proposal_Write">
  <title>Write</title>
  <subtitle>
   Write the proposed (and probably modified) settings to the system.
  </subtitle>

  <para>
   <emphasis>map</emphasis> <literal>Write</literal>()
  </para>

  <section>
   <title>Description</title>

   <para>
    Write the proposed (and probably modified) settings to the system.
    It is up to the proposal dispatcher how it remembers the settings.
    The errors must be reported using the Report:: module to have
    the possibility to control the behaviour from the main program.
   </para>

   <para>
    This Write() function is optional. The dispatcher module is required
    to allow this function to be called without returning an error value
    if it isn't there.
   </para>
  </section>

  <section>
   <title>Return Values</title>

   <para>Returns a map containing:</para>
   <itemizedlist>

    <listitem>
     <para>
      <emphasis>boolean</emphasis> <literal>success</literal>
     </para>
     <para>
      Returns true, if the settings were written successfully.
     </para>
    </listitem>

   </itemizedlist>
  </section>
 </section>
</section>
