/**
 * File:	modules/ProductProposals.ycp
 * Package:	installation
 * Summary:	Product Proposal data
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
module "ProductWorkflow";
import "ProductControl";

import "Arch";



/**
 * Get modules of current Workflow
 * @param string stage
 * @param string mode
 * @return list<map> modules
 */
global define list getProposals(string stage, string mode, string proptype)
``{
    // First we search for proposals for current stage if there are
    // any. (initial or continue)

    list proposals = (list)filter(map p, ProductControl::proposals, ``(
                    p["stage"]:"" == stage || p["stage"]:"" == "" ));

    // Then we check for mode: installation or update
    proposals = (list)filter(map p, proposals, ``(
                    p["mode"]:"" == mode || p["mode"]:"" == ""));

    // Now we check for architecture
    y2debug("Architecture: %1", Arch::architecture );
    list arch_proposals = filter(map p, proposals, ``(
                    issubstring(p["archs"]:"dummy", Arch::arch_short )));

    y2debug("arch proposals: %1", arch_proposals );
    proposals = filter(map p, proposals, ``(
                    p["archs"]:"" == "all" || !haskey(p, "archs") ));


    // If architecture specific proposals available, we continue with those
    // and check for proposal type, else we continue with pre arch proposal
    // list
    if (size(arch_proposals) > 0 )
    {
        proposals = filter(map p, arch_proposals, ``(
                     p["type"]:"" == proptype ));

    }
    else
    {
        proposals = filter(map p, proposals, ``(
                     p["type"]:"" == proptype ));
    }
    if (size(proposals)> 1 )
    {
        y2error("Something Wrong happened, more than proposal after filter:
                %1", proposals);
    }

    return proposals[0, "modules"]:[];
}


}
