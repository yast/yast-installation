/**
 * File: include/installation/inst_inc_first.ycp
 * Module: System installation
 * Summary: Functions for first stage
 * Authors: Lukas Ocilka <locilka@suse.cz>
 *
 * $Id:$
 *
 */
{

    textdomain "installation";

    import "Arch";
    import "Installation";
    import "Console";
    import "Language";
    import "ProductControl";
    import "Directory";
    import "Stage";
    import "FileUtils";
    import "String";

    void InitMouse () {
        if (!Arch::s390 () || Arch::board_iseries ()) {
            // in another client because of dependencies
            // used in inst-sys only
            WFM::CallFunction ("inst_init_mouse", []);
        }
    }

    /**
     * Sets inital language and other settings.
     */
    void SetInitialInstallation () {
	// properly set up initial language
	Installation::encoding = Console::SelectFont (Language::language);
	if (UI::GetDisplayInfo()["HasFullUtf8Support"]:true) {
	    Installation::encoding = "UTF-8";
	}
	
	ProductControl::DisabledModules = add (ProductControl::DisabledModules, "add-on");
	ProductControl::DisabledModules = add (ProductControl::DisabledModules, "productsources");

	// First-stage users module will enable them again only if needed
	ProductControl::DisabledModules = add (ProductControl::DisabledModules, "root");
	ProductControl::DisabledModules = add (ProductControl::DisabledModules, "user");
	ProductControl::DisabledModules = add (ProductControl::DisabledModules, "auth");

	UI::SetLanguage (Language::language, Installation::encoding);
	WFM::SetLanguage (Language::language, "UTF-8");
	UI::RecordMacro (Directory::logdir + "/macro_inst_initial.ycp");
    }

    void InitFirstStageInstallationSystem () {
	// in the initial stage, there might be some ZYPP data from the
	// previously failed installation
	// @see bugzilla #267763
	if (Stage::initial()) {
	    list <string> zypp_data = [ "/var/lib/zypp/cache", "/var/lib/zypp/db" ];

	    foreach (string zypp_data_item, zypp_data, {
		if (FileUtils::Exists (zypp_data_item)) {
		    y2warning ("Directory '%1' exists, removing...", String::Quote(zypp_data_item));
		    string bashcmd = sformat ("/bin/rm -rf '%1'", zypp_data_item);
		    y2milestone ("Result: %1", WFM::Execute (.local.bash_output, bashcmd));
		}
	    });
	}
    }

    /**
     * Handle starting distro upgrade from running system
     */
    void SetSystemUpdate () {
	if (FileUtils::Exists (Installation::run_update_file)) {
	    Mode::SetMode ("update");
	    foreach (string m, [
		"language", // language already selected
		"disks_activate", // disks activated before running upgrade
		"mode", // always doing update, is already preselected
		"update_partition", // no mounting
		"do_resize", // why is this included in upgrade at all? it is empty anyway
		"prepdisk", // disks already mounted, it is dummy in update anyway
	    ], {
		ProductControl::DisabledModules = add (ProductControl::DisabledModules, m);
	    });
	}
    }

} //end of include
