/**
 * File:
 *      include/installation/add-on-workflow.ycp
 *
 * Module:
 *      System installation
 *
 * Summary:
 *      Add-on product installation workflow
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 *
 */



{

textdomain "installation";

import "AddOnProduct";
import "Popup";
import "SLP";
import "Sequencer";
import "SourceManager";
include "inst_source_dialogs.ycp";


/**
 * Run dialog for selecting the media
 * @return symbol for wizard sequencer
 */
symbol MediaSelect () {
    y2milestone ("Running media select dialog");
    term contents = `HBox (`HStretch (), `VBox (
	`RadioButtonGroup (`id (`type), `VBox (
	    `VStretch (),
	    // radio button
	    `Left (`RadioButton(`id(`slp),       _("&Scan Using SLP..."))),
	    // radio button
	    `Left (`RadioButton(`id(`ftp),       _("&FTP..."))),
	    // radio button
	    `Left (`RadioButton(`id(`http),      _("&HTTP..."))),
	    // radio button
	    `Left (`RadioButton(`id(`https),      _("HTT&PS..."))),
	    // radio button
	    `Left (`RadioButton(`id(`samba),     _("&SMB/CIFS"))),
	    // radio button
	    `Left (`RadioButton(`id(`nfs),       _("&NFS..."))),
	    // radio button
	    `Left (`RadioButton(`id(`cd),        _("&CD..."))),
	    // radio button
	    `Left (`RadioButton(`id(`dvd),       _("&DVD..."))),
	    // radio button
	    `Left (`RadioButton(`id(`local_dir), _("&Local Directory..."))),
	    // radio button
	    `Left (`RadioButton (`id (`specify_url),_("Specify &URL..."))),
	    `VStretch ()
	))), `HStretch ()
    );

    // dialog caption
    string title = _("Add-on Product Media");
    string help = "";
    Wizard::SetContents (title, contents, help, false, true);

    symbol ret = nil;
    string url = "";
    while (ret == nil) {
	symbol createResult = `again;
	ret = (symbol)UI::UserInput ();
	if (ret == `abort || ret == `back || ret == `cancel)
	    break;
	else if (ret != `next)
	    continue;
	symbol input = (symbol)UI::QueryWidget (`id (`type), `CurrentButton);
	if ( input == `slp )
	{
	    // translators: popup busy message
	    UI::OpenDialog (`Label (_("Scanning network...")) );
	    list<map> services = SLP::FindSrvs ("install.suse", "");
	    UI::CloseDialog ();
	    if ( size(services) == 0 )
	    {
		Popup::Error ( _("No SLP catalogs found.") );
	    } else
	    {
		// show the dialog to pick the source
		list<term> items = maplist (map service, services, ``{
		    string url = service["srvurl"]:"";
		    url = substring (url, 21);
		    // split the URL
		    map parsed_url = URL::Parse (url);
		    return `item (`id (url), toupper ( parsed_url["scheme"]:"http" ), url);
		});
		UI::OpenDialog (
		    `VBox(
			// translators: popup heading
			`Heading (_("Choose SLP Catalog")),
			`MinSize( 25, 7,
			    // translators: table header
			    `Table (`id(`services), `header(_("Type"), _("URL")), items)
			),
			`HBox (
			    `PushButton (`id (`ok), `opt(`default), Label::SelectButton ()),
			    `VSpacing (1),
			    `PushButton (`id (`cancel), Label::CancelButton ())
			)
		    )
		);
		symbol ret = (symbol)UI::UserInput ();
		if (ret == `ok)
		{
		    string service = (string) UI::QueryWidget (`services, `CurrentItem);
		    y2milestone ("Trying to add source '%1'", service);
		    if (service != nil)
		    {
			// add the installation source
			createResult = SourceManager::createSource(service);
			y2milestone ("Adding source result: %1", createResult);
		    }
		}
		UI::CloseDialog ();
	    }
	}

	else if ( input == `ftp || input == `http || input == `https || input == `samba )
	{
	    if ( input == `ftp ) url = "ftp://";
	    else if ( input == `http ) url = "http://";
	    else if ( input == `https ) url = "https://";
	    else if ( input == `samba ) url = "smb://";
	    else url = "";
	    boolean refresh = true;
	    do {
		url = editUrl( url );
		if ( size( url ) == 0 ) break;
		createResult = SourceManager::createSource( url);
            } while ( createResult == `again );
        }
        else if ( input == `nfs )
        {
            url = "nfs://";
	    boolean refresh = true;
            do {
                url = editUrl( url );
                if ( size( url ) == 0 ) break;
		createResult = SourceManager::createSource( url);
            } while ( createResult == `again );
        }
        else if ( input == `cd )
        {
            createResult = SourceManager::createSource( "cd:///" );
        }
        else if ( input == `dvd )
        {
            createResult = SourceManager::createSource( "dvd:///" );
        }
	else if ( input == `local_dir )
	{
            url = "dir://";
            do {
                url = editUrl( url );
                if ( size( url ) == 0 ) break;
		createResult = SourceManager::createSource( url);
            } while ( createResult == `again );
	}
	else if (input == `specify_url)
	{
            url = "";
	    do {
                url = editRawUrl( url );
                if ( size( url ) == 0 ) break;
		createResult = SourceManager::createSource( url);
	    } while (createResult == `again);
	}
	if (createResult != `ok)
	    continue;
    }

    AddOnProduct::last_ret = ret;
    y2milestone ("Media Select Dialog ret: %1", ret);
    return ret;
}

/**
 * Run dialog for selecting the catalog on the media (if more than one present)
 * @return symbol for wizard sequencer
 */
symbol CatalogSelect () {
    list<integer> sources = SourceManager::newSources;
    if (size (sources) == 0)
    {
	Report::Error (_("No source found on medium"));
	return `back;
    }
    if (size (sources) == 1)
    {
	AddOnProduct::src_id  = SourceManager::newSources[0]:0;
	y2milestone ("Only one source available - skipping dialog");
	return AddOnProduct::last_ret;
    }
    y2milestone ("Running catalog select dialog");
    list catalogs = maplist (integer src, sources, {
	return `item (`id (src), sformat (_("Catalog ID %1"), src));
    });

    // dialog caption
    string title = _("Catalog Selection");
    string help = "";

    term contents = `HBox (`HStretch(), `VBox (
	`VStretch (),
	`SelectionBox (`id (`catalogs), catalogs, sources[0]:0),
	`VStretch()
    ), `HStretch ());
    Wizard::SetContents (title, contents, help, true, true);
    symbol ret = nil;
    integer selected = nil;
    while (ret == nil)
    {
	ret = (symbol)UI::UserInput ();
	if (ret == `abort || ret == `cancel)
	{
	    break;
	}
	else if (ret == `back)
	{
	    break;
	}
	else if (ret == `next)
	{
	    selected = (integer)UI::QueryWidget (`id (`catalogs), `CurrentItem);
	    if (selected == nil)
	    {
		ret = nil;
		Popup::Message (_("Select a catalog"));
	    }
	}
    }

    if (ret != `next)
    {
	foreach (integer src, SourceManager::newSources, {
	    Pkg::SourceDelete (src);
	});
    }
    else
    {
	foreach (integer src, SourceManager::newSources, {
	    if (src != selected)
		Pkg::SourceDelete (src);
	});
	SourceManager::newSources = [ selected ];
	AddOnProduct::src_id  = SourceManager::newSources[0]:0;
    }
    AddOnProduct::last_ret = ret;
    return ret;
}

symbol ProductSelect () {
// TODO check available products in catalog
    list products = [];
    if (size (products) == 0)
    {
	y2milestone ("No poduct found on the media, but anyway, using it :-)");
	AddOnProduct::add_on_products = add (AddOnProduct::add_on_products, $[
	    "media" : AddOnProduct::src_id,
	    "product" : nil,
	]);
// TODO select the product, set it above
	return `next;
    }
    if (size (products) <= 1)
    {
	y2milestone ("Only one product available - skipping dialog");
	AddOnProduct::add_on_products = add (AddOnProduct::add_on_products, $[
	    "media" : AddOnProduct::src_id,
	    "product" : nil,
	]);
// TODO select the product, set it above
	return `next;
    }
    y2milestone ("Running product selection dialog");
    symbol ret = nil;
    list items = maplist (any product, products, {
	return `item (`id (product), sformat ("%1", product));
    });
    term contents = `HBox (`HStretch(), `VBox (
	`VStretch (),
	`MultiSelectionBox (`id (`products), _("Available Products"), items),
	`VStretch ()
    ), `HStretch ());
    while (ret == nil)
    {
	ret = (symbol)UI::UserInput();
	if (ret == `cancel || ret == `abort)
	{
	    break; // TODO ask
	}
	if (ret == `next)
	{
	    list selected = (list)UI::QueryWidget (`id (`products), `SelectedItems);
	    foreach (any product, selected, {
		AddOnProduct::add_on_products = add (AddOnProduct::add_on_products, $[
		    "media" : AddOnProduct::src_id,
		    "product" : nil,
		]);
// TODO select the product, set it above
	    });
// TODO run solver, check the result, if it fails, deselect products, unregister sources, abort
	}
	else if (ret != `back)
	{
	    ret = nil;
	}
    }

    else if (ret == `abort)
	Pkg::SourceDelete (AddOnProduct::src_id);

    AddOnProduct::last_ret = ret;
    return ret;
}

symbol RunWizard() {
    map aliases = $[
	"media" : ``(MediaSelect ()),
	"catalog" : ``(CatalogSelect ()),
	"product" : ``(ProductSelect ()),
    ];

    map sequence = $[
	"ws_start" : "media",
	"media" : $[
	    `abort : `abort,
	    `next : "catalog",
	],
	"catalog" : $[
	    `abort : `abort,
	    `next : "product",
	],
	"product" : $[
	    `abort : `abort,
	    `next : `next,
	],
    ];
    return Sequencer::Run(aliases, sequence);
}


} //end of include
