/**
 * File:        installation/general/inst_suse_register
 * Module:      Installation
 * Summary:     Perform Customer Center Configuration
 *              this includes (by calling suse_register):
 *                              machine registration
 *                              if needed, launch browser for user/customer registration
 *                              ZMD configuration
 * Authors:     J. Daniel Schmidt <jdsn@suse.de>
 *
 * Perform Customer Center Configuration
 *
 * $Id: inst_suse_register.ycp 1 2006-02-17 13:20:02Z jdsn $
 */

{
    textdomain "installation";

    import "FileUtils";
    import "URL";
    import "Wizard";
    import "Popup";
    import "GetInstArgs";
    import "CustomDialogs";
    import "Directory";
    import "Language";
    import "Mode";
    import "String";
    import "Label";
    import "Internet";

    // no network - no suse_register
    if (!Mode::normal())
    {
        if (!Internet::suse_register)
        {
            Internet::do_you = false;
            return `auto;
        }
    }

    map ui = UI::GetDisplayInfo();
    boolean textmode = (boolean) ui["TextMode"]:nil;

    map argmap = GetInstArgs::argmap();

    string services_file = sformat ("%1/update_services",
	SCR::Read (.target.tmpdir));

    /* strings for main (wizard) layout  */
    string nccc = _("Novell Customer Center Configuration");
           nccc = _("Update Configuration");
    string nccc_top = _("Get technical support and product updates and
manage subscriptions with Novell Customer Center.");
           nccc_top = "";

    string nccc_configure   = _("Configure Now (Recommended)");
    string nccc_noconfigure = _("Configure Later");

    string nccc_sub_comment = _("Include for Convenience");
    string nccc_sub_hwinfo  = _("Hardware Profile");
    string nccc_sub_optional= _("Optional Information");
    string nccc_sub_showbtn = _("Details...");


    /*  strings for success popup   */
    string nccc_success_msg = _("Your configuration was successful.");


   /* strings for manual interaction popup */
    string mi_required = _("Manual Interaction Required");
    string mi_needinfo = _("Needed Information");
    string mi_browser_btn = _("Continue");
    string mi_start_browser = _("A Web browser will start in which to complete
the configuration on the opened Web site.");



    /* string for show information popup */
    string transmit_info = _("Information to Send");

    /*  strings for conflict popup */
    string conflict_need_info = _("The server requires additional system information. Activating 
submission of the hardware profile automatically.");


    /* error messages  */
    string data_invalid = _("Error: Recieved data is invalid.");
    string retrieve_error = _("Error: Could not retrieve data.");


    /* help text for dialog "Novell Customer Center Configuration" */
    string help = _(
"<p><b>Update Configuration</b></p>
<p>
Configure your system to enable online updates by registering it with Novell.
To do this now, select <b>Configure Now</b>. Delay the registration with
<b>Configure Later</b>.
</p>
<p>
To simplify the registration process, include information from your system
with <b>Optional Information</b> and <b>Hardware Profile</b>. 
<b>Details</b> shows the maximum amount of information that can be involved
 in your registration.
</p>
<p>
No information is passed to anyone outside Novell. The data is used for
statistical purposes and to enhance your convenience regarding driver support
and your Web account. Find a detailed privacy policy in <b>Details</b>. View
the transmitted information in the log file <tt>~/.suse_register.log</tt>.
</p>"
);


    /*  further strings   */
    string checking         = _("Checking...");
    string error            = _("Error");
    string server_error     = _("An error occurred while connecting to the server.");
    string details          = _("Details...");
    string error_msg        = _("Error Message");
    string starting_browser = _("Starting Browser...");

    /* other string variables */
    map<string, string> information_data = nil;
    string information_text = "";


    /* some variables used below  */

    // default is true, see statement in layout term
    boolean configure_status = true;



    //TODO: STANO:
    // read hwinfo and optional setting from config file(s)
    // (root from/to sysconfig, user read from sysconfig and write to homedir .somedotfile (eg. ~/.suse_register ))
    // this is not mandatory for the beta6, but should be in beta7 or at least one later
    /* initial setting: both true */
    boolean subhwinfo   = true;
    boolean suboptional = true;



    /* vv   MAIN (WIZARD) LAYOUT  vv  */
    term sr_layout=nil;
    sr_layout=`HVCenter( `VBox(
                     `Left (
                             `RadioButtonGroup( `id(`sr_perform), `VBox(
                             `Left ( `Label( nccc_top ) ),
                             `VSpacing(1),
                             `Left ( `RadioButton(`id(`noconfigure), `opt(`notify), nccc_noconfigure )),
                             `Left ( `RadioButton(`id(`configure),   `opt(`notify), nccc_configure, true )),
                             `Left ( `HBox( `HSpacing( 3.0 ),
                                      `VBox (
                                             `VSpacing(0.5),
                                             `Left( `Label( nccc_sub_comment ) ),
                                             `Left( `CheckBox(`id(`hwinfo),  `opt(`notify), nccc_sub_hwinfo,  subhwinfo  ) ),
                                             `Left( `CheckBox(`id(`optional), `opt(`notify), nccc_sub_optional, suboptional ) ),
                                             `VSpacing(0.5),
                                             `Right( `PushButton(`id(`showinfo), nccc_sub_showbtn ) )
                                   ) ) ) ,
                             `VSpacing(0.5)
                           )))
    ));

    term contents = `VBox ( `VSpacing (0.5), sr_layout, `VSpacing (0.5));
    /* ^^       END MAIN LAYOUT     ^^  */



    /* vv      SHOW INFO POPUP     vv  */
    term showinformation = `HBox( `HSpacing(0.5),
                                  `MinSize(  70, 22 ,`VBox(
                                     `Label( transmit_info ),
                                     `RichText(`id(`information_text), information_text ),
                                     `PushButton (`id (`info_close), Label::CloseButton () )  )
                                   ),
                                  `HSpacing(0.5)
    );
    /* ^^      END  SHOW INFO       ^^  */





    /* vv  MANUAL INTERACTION POPUP vv  */
    term manual_interaction = `HBox(
                                   `MinSize( 50, 20, `VBox(
                                           `Left( `Label( `opt(`boldFont), mi_required ) )  ,
                                           `VSpacing(0.5) ,
                                           `Left( `Label( mi_start_browser  ) ) ,
                                           `Left( `Label( mi_needinfo ) )  ,
                                                  `RichText(`id(`needinfo), ""  ),
                                           `HBox(
                                                  `PushButton(`id(`start_browser), mi_browser_btn )  ,
                                                  `HSpacing( 3),
                                                  `PushButton(`id(`cancel),  Label::CancelButton()  )
                                           )
                                   ))
    );
    /* ^^  END MANUAL INTERACTION  ^^  */



    /* vv      CCC CONFLICT POPUP      vv  */
    term ccc_conflict=
    `VBox(
          `Left( `Label( `opt(`boldFont), nccc ) ),
          `VSpacing( 0.5 ),
          `Left( `Label( conflict_need_info ) ),
          `PushButton(`id(`ok), Label::OKButton())
    );
    /* ^^       END CCC CONFLICT       ^^  */


    /* vv      CCC ERROR POPUP      vv  */
    term error_message=
    `VBox(
           `Left( `Label( `opt(`boldFont), error ) ),
           `VSpacing( 0.5 ),
           `Left( `Label( `id(`err_description), server_error ) ),
           `HBox(
                  `HWeight(1, `PushButton(`id(`ok), Label::OKButton()  ) ),
                  `HSpacing( 3 ),
                  `HWeight(1, `PushButton(`id(`err_detail), details ) ),
                  `HSpacing( 3 ),
                  `HWeight(1, `PushButton(`id(`cancel),  Label::CancelButton() ) )
                )
    );
    /* ^^      END CCC ERROR        ^^  */


    /* vv      CCC ERROR POPUP      vv  */
    term error_message_details=
    `MinSize( 50, 15,  `VBox(
           `Left( `Label( `opt(`boldFont), error_msg ) ),
           `VSpacing( 0.5 ),
           `RichText(`id(`errordetail), `opt(`plainText) , "" ),
           `PushButton(`id(`ok), Label::OKButton())
    ));
    /* ^^      END CCC ERROR        ^^  */



    /* vv      OK DONE UPDATE??    vv  */
    term nccc_success=
    `VBox(
           `Left( `Label( `opt(`boldFont), nccc ) ),
           `VSpacing( 0.5 ),
           `Left( `Label( nccc_success_msg ) ),
           `PushButton(`id(`ok), Label::OKButton() )
    );
    /* ^^    END OK DONE UPDATE??   ^^  */




/* ---------------------------------- LOCAL FUNCTIONS ------------------------------------------------------------  */

/* function to call suse_register
   the returned map is transformed to map<string, string>
*/
map<string, string> suseRegister(string parameter)
{
    // handle parameters
    string params = sformat (" -y -L ~/.suse_register.log --dumpfile=%1 ", services_file);
    if (parameter == "p") params = params + " -p ";
    else if( Mode::normal() ) params = params + " --force-registration ";

    if ( subhwinfo   == false )   params = params + " --no-hw-data ";
    if ( suboptional == false )   params = params + " --no-optional ";

    // run suse_register ... -y beautifies the output for usage in yast
    y2milestone ("Calling /usr/bin/suse_register %1", params);
    map<string, any> info = (map<string, any>) SCR::Execute(.target.bash_output, sformat("umask 0077;  /usr/bin/suse_register %1", params ));
    string exitcode = sformat("%1", info["exit"]:99);
    y2milestone ("/usr/bin/suse_register returned %1", exitcode);

    // transform to map<string, string>
    map<string, string> response = $[  "exit"  :exitcode ,
                                       "stdout":info["stdout"]:"",
                                       "stderr":info["stderr"]:""  ];

    y2milestone ("Server response: %1", response);
    return response;
}



boolean amIroot()
{
    // check if we are root
    map<string, any> userid = (map<string, any>) SCR::Execute(.target.bash_output, "id -u");
    y2milestone("running with user id %1", userid);
    return  String::FirstChunk(userid["stdout"]:"1", "\n") == "0" ? true:false; 
}


boolean report_error()
{
    // function to display an error message
    // and offer a detailled view of the error message

    UI::OpenDialog(error_message);
    UI::SetFocus (`id (`cancel ));
    symbol retry = nil;

    repeat
    {
        retry = (symbol) UI::UserInput();

        if ( retry == `cancel ) configure_status = false;
        else if (retry == `err_detail)
        {
            UI::OpenDialog(error_message_details);
            UI::ChangeWidget( `id(`errordetail), `Value, (string)information_data["stderr"]:"no error message available");
            UI::UserInput();
            UI::CloseDialog();
        }
    } until ( retry != `err_detail );

    UI::CloseDialog();
}


string su_exec(string user, string group, string command)
{
    // create a script to run a system call as different user
    string exec = sformat("
#!/bin/bash -x

user=%1
group=%2
cmd=\"%3\"
", user, group, command )
+
"
fakehome=/var/lib/YaST2/$user-fakehome
XA=/root/.xauth

umask 077
mkdir -p $XA
grep ^$user$ $XA/export >/dev/null 2>&1  || echo $user >> $XA/export

mkdir -p $fakehome
trap \"rm -rf $fakehome\" EXIT INT HUP TERM
chmod 700 $fakehome
chown $user:$group $fakehome

su -s /bin/bash -- $user -c \"cd; $cmd\"

exit 0";

    y2milestone("using su_exec to launch browser");

    return exec;
}


string browser_command(string url)
{
    // create the command string to launch a browser
    string bcmd="/bin/false";
    boolean iamroot = amIroot();

    if ( textmode )
        bcmd = " screen w3m ";
    else
    {
        if ( iamroot )
            bcmd = " MOZ_DISABLE_PANGO=1 /usr/bin/xulrunner /usr/share/YaST2/yastbrowser/application.ini -url ";
        else
            bcmd = " firefox -new-window ";
    }

    // add url to browser command
    bcmd =  bcmd + "'" + url + "'";

    // in case of root add su call to not run a browser as root during installation
    if ( iamroot ) bcmd = su_exec("suse-ncc", "nogroup", bcmd );

    return bcmd;
}


boolean launchBrowser(string url)
{
    // get command to run correct browser and execute it
    string command = browser_command(url);

    y2milestone("launching browser: %1", command);

    SCR::Execute(.target.bash, command );
    UI::RedrawScreen();

    return true;
}

// add the sources known from suse-register to yast
boolean add_update_sources () {

    if (!FileUtils::Exists (services_file))
	return false;

    foreach (string url,
	splitstring ((string)SCR::Read(.target.string, services_file),"\n"), {

	map parsed = URL::Parse (url);
	if (parsed != $[])
	{
	    Pkg::SourceCreate (parsed["scheme"]:"http" + "://" + parsed["host"]:"" + parsed["port"]:"", parsed["path"]:"");
	}

    });
}

/* ----------------------------------- END FUNCTIONS -------------------------------------------------------------  */




    // check if we are in installation workflow or running independently
    if (Mode::normal()) Wizard::CreateDialog();

    // we always need the next button
    Wizard::SetContents (nccc, contents, help, GetInstArgs::enable_back(), true);

    y2debug ("%1", UI::DumpWidgetTree());

    boolean loopend = false;
    any ret = nil;

    repeat {
        ret = Wizard::UserInput();

        if (ret == `abort)
        {
            if (Mode::normal()) break;
            if (Popup::ConfirmAbort (`incomplete))  break;
        }
        else if (ret == `help)
        {
            Wizard::ShowHelp (help);
        }
        else if (ret == `configure || ret == `noconfigure)
        {
            configure_status = (boolean) UI::QueryWidget(`id(`configure),  `Value);
        }
        else if (ret == `hwinfo || ret == `optional)
        {
            subhwinfo  = (boolean) UI::QueryWidget(`id(`hwinfo),  `Value);
            suboptional= (boolean) UI::QueryWidget(`id(`optional), `Value);
        }
        else if (ret == `showinfo)
        {
            information_data = suseRegister("p");

            if ( information_data["exit"]:"99" == "0" )
            {
                information_text = information_data["stdout"]:"";
                UI::OpenDialog( showinformation );
                UI::ChangeWidget(`id(`information_text), `Value, information_text );
                any info_ret = nil;

                repeat
                {
                    info_ret = UI::UserInput();
                    if ( is(info_ret, string) ) launchBrowser( (string) info_ret);

                } until ( info_ret == `info_close );

                UI::CloseDialog();
            }
            else  report_error();

        }
        else if (ret == `next)
        {
            if ( configure_status == true )
            {
                /* run suse_register to see if we need manual interaction */
                information_data = suseRegister("");

                // error code 1: needinfo
                // manual interaction is requiered
                // this case MUST be first
                //  ... because during manual interaction further suse_register calls change the error code
                if (information_data["exit"]:"99" == "1")
                {
                    UI::OpenDialog( manual_interaction );
                    UI::SetFocus (`id (`start_browser ));
                    UI::ChangeWidget( `id(`needinfo), `Value, information_data["stderr"]:data_invalid );
                    any mi_ret =nil;
                    boolean mi_loopend = false;
                    boolean recheck = true;

                    repeat
                    {
                        recheck = true;
                        mi_ret = UI::UserInput();
                        if ( mi_ret == `start_browser  )
                        {
                            // now we launch the browser
                            UI::ChangeWidget( `id(`needinfo), `Value, starting_browser );
                            launchBrowser(information_data["stdout"]:"http://www.opensuse.org");
                            suboptional = false;   // deactivate after each browser run
                        }
                        else if ( mi_ret == `cancel  )
                        {
                            recheck = false;
                            mi_loopend = true;
                        }
                        else if ( is(mi_ret, string) )
                        {
                            // launch browser
                            launchBrowser( (string) mi_ret);
                            recheck = false;
                        }


                        if ( recheck )
                        {
                            // show the user, that we are doing something
                            UI::ChangeWidget( `id(`needinfo), `Value, checking );

                            information_data = suseRegister("");

                            if (information_data["exit"]:"99" == "0" || information_data["exit"]:"99" == "3" )
                            {
                                // error 0: everything is done, quit
                                // error 3: madatory data conflict - handle outside of manual interaction
                                mi_loopend = true;
                            }
                            else if (information_data["exit"]:"99" == "1")
                            {
                                // still needinfo, change displayed information and stay in manual interaction
                                UI::ChangeWidget( `id(`needinfo), `Value, information_data["stderr"]:retrieve_error );
                            }
                            else
                            {
                                // unknown error, let the user find an exit :)
                                mi_loopend = true;
                            }
                        }

                    } until ( mi_loopend == true  );

                    // we are done with manual interaction
                    UI::CloseDialog();

                    if (mi_ret == `cancel) configure_status = false;
                }

                // NO ELSE CASE HERE!!!
                // ... because information_data may be changed during error code 1 case by a suse_register run
                // and therefor NO MORE suse_register calls below this line!!!

                /*  handle error codes from FIRST suse_register call AND from manual interaction  */
                if (information_data["exit"]:"99" == "3")
                {
                    // error code 3 means:
                    // conflict between transmitted data and data to be transmit according to customer contract
                    // hwconfig is needed
                    UI::OpenDialog(ccc_conflict);
                    UI::SetFocus (`id (`ok));
                    UI::UserInput();
                    UI::CloseDialog();
                    subhwinfo = true;
                }

                // error code 0 means: everything is OK
                // no more interaction requiered - ZMD is configuered by suse_register
                if (information_data["exit"]:"99" == "0")
                {
                    UI::OpenDialog( nccc_success );
                    symbol update = (symbol) UI::UserInput();
                    UI::CloseDialog();
                    if ( update == `update ) ret = `next;
                    else if ( update == `noupdate ) ret = `skip;
                    // we are done, end of loop
                    loopend = true;
		    add_update_sources ();
                }

                // handle any other error codes
                if (
                     information_data["exit"]:"99" != "0" &&
                     information_data["exit"]:"99" != "3" &&
                     information_data["exit"]:"99" != "1"
                   )
                {
                    // display error message
                    report_error();
                }

            }
            else
            {
                // skipping - no online update!!
                loopend = true;
                ret = `skip;
            }
        }

        // update main widget settings - they may have changed
        if (configure_status) UI::ChangeWidget(`id(`configure), `Value, true);
        else UI::ChangeWidget(`id(`noconfigure), `Value, true);
        UI::ChangeWidget( `id(`hwinfo ),   `Value, subhwinfo );
        UI::ChangeWidget( `id(`optional ), `Value, suboptional );

    } until ( loopend || ret == `back );

    if (Mode::normal()) Wizard::CloseDialog();
    else
    {
        if (ret == `skip)
        {
            // skipping suse register - no online update
            Internet::do_you = false;
            ret = `next;
        }
        else
        {
            // ok we can do online update
            Internet::do_you = true;
        }
    }

    return (symbol)ret;
}
