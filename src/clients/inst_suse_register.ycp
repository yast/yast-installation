/**
 * File:        installation/general/inst_suse_register
 * Module:      Installation
 * Summary:     Perform Customer Center Configuration
 *              this includes (by calling suse_register):
 *                              machine registration
 *                              if needed, launch browser for user/customer registration
 *                              ZMD configuration
 * Authors:     Jens Daniel Schmidt <jdsn@suse.de>
 *
 * Perform Customer Center Configuration
 *
 * $Id: inst_suse_register.ycp 1 2006-02-17 13:20:02Z jdsn $
 */

{
    textdomain "installation";

    import "Wizard";
    import "Popup";
    import "GetInstArgs";
    import "CustomDialogs";
    import "Directory";
    import "Language";
    import "Mode";
    import "String";
    import "Label";

    map argmap = GetInstArgs::argmap();


    // TODO: SIGI:
    //             texts are toooo loooong and too complex, rather use short and easy sentences
    //             button texts are to long, only name the action, and decribe it in a short sentence above

    /* strings for main (wizard) layout  */
    string nccc = _("Novell Customer Center Configuration");
    string nccc_top = _(
"It is recommended to configure your Customer Center.
By donig so, you will get access to the latest updates.
You may skip this step now and configure it any time later.");

    string nccc_configure = _("Configure Novell Customer Center");
    string nccc_noconfigure = _("Skip configuration and Online Update");

    string nccc_sub_hwinfo  = _("Submit hardware profile (recommended)");
    string nccc_sub_sysdata = _("Submit optional system data (recommended)");
    string nccc_sub_comment = _(
"Some systems will require these data 
to get updates or other benefits.");

    string nccc_sub_show    = _(
"You may see the information to be transmitted 
by pressing this button:");

    string nccc_sub_showbtn = _("Show information");


    /*  strings for "ask for online update"-popup   */
    string ask_update_main = _(
"Your online update configuration was successful.
You can now run online update before proceeding 
with the installation.");

    string ask_update_skipinfo = _("Skipping Online Update will proceed with the installation now.");
    string ask_update_run_btn = _("Run Online Update");
    string ask_update_skip_btn = _("Skip Online Update");


   /* strings for manual interaction popup */
    string mi_required = _("Manual interaction is required");
    string mi_needinfo = _("The server needs the following information:");

    string mi_use_start_browser = _(
"Use Start browser to complete your Customer Center Configuration 
on the presented website.");
    string mi_skip_configuration = _(
"You may skip the Customer Center Configuration now.
To get access to updates you can finish this configuration at any later time.");

    string mi_browser_btn = _("Start browser");
    string mi_skip_btn = _("Skip configuration");
    string mi_done_btn = _("Configuration done");


    /* string for show information popup */
    string transmit_info = _("Information to be transmitted");
    string show_info_retrieve_error = _("Error: Could not retrieve data!");

    /*  strings for conflict popup */
    string conflict_need_info = _(
"The server requires additional system information.
Check configuration settings will lead back to the main
dialog where you can check and adjust options.
");

    string conflict_skip_info = _(
"Skip configuration and update will end the configuration
and online update will not be run.
You can finish this configuration at any later time.
");

    string conflict_retry_btn = _("Check configuration settings");
    string conflict_skip_btn = _("Skip configuration and update");


    /* error messages  */
    string data_invalid = _("Error: recieved data is invalid");



    /* CCC error / unknown error */
    string error_retry_btn = _("Retry");
    string error_skip_btn  = _("Skip configuration");




    /* help text for dialog "Novell Customer Center Configuration" */
    string help = _("<p><b>Novell Customer Center Configuration</b></p>
<p>Please configure your Novell Customer Center in order to get access to updates for your system.</p>");


    /* other string variables */
    map<string, string> information_data = nil;
    string information_text = "";

    // dynamically filled by "suse_register -p" ... untranslated
    string needinfo = "";


    /* some variables used below  */

    // default is true, see statement in layout term
    boolean configure_status = true;



    //TODO: STANO:
    // read hwinfo and sysdata setting from config file(s)
    // (root from/to sysconfig, user read from sysconfig and write to homedir .somedotfile (eg. ~/.suse_register ))
    // this is not mandatory for the beta6, but should be in beta7 or at least one later
    /* initial setting: both true */
    boolean subhwinfo  = true;
    boolean subsysdata = true;





/* ---------------------------------- LOCAL FUNCTIONS ------------------------------------------------------------  */

/* function to call suse_register
   the returned map is transformed to map<string, string>
*/
map<string, string> suseRegister(string parameter)
{
    // handle parameters
    string params="";
    if (parameter == "p") params = params + " -p ";
    if ( ! subhwinfo  )   params = params + " --no-hw-data ";
    if ( ! subsysdata )   params = params + " --no-optional ";

    // run suse_register
    map<string, any> info = (map<string, any> ) SCR::Execute(.target.bash_output, sformat("/usr/bin/suse_register %1", params ));
    string exitcode = sformat("%1", info["exit"]:99);


    /* vvvvvvv  for demonstration purposes set DEMO to true   vvvvvvvvv */
    boolean DEMO = true;
    if ( DEMO )
    {
        list<string> errs = ["0", "1", "2", "3", "4", "5", "6", "17", "99"] ;

        UI::OpenDialog(
            `VBox(
                  `Label(`opt(`boldFont), "DEMONTRATION MODE"),
                  `Label("suse_register is running in background now"),
                  `Label("for testing purposes you can define its error code"),
                  `Label(
"
0: everythings ok
1: needinfo -> manual interaction
2: unknown error
3: conflict (according to contract more data is needed)
4.. : unknown errors
"),
                  `ComboBox(`id(`err), "error code", errs ),
                  `PushButton( `id(`go), "OK")
            )
        );
        UI::UserInput();
        exitcode = (string) UI::QueryWidget(`id(`err), `Value);
        UI::CloseDialog();
    }
    /* ^^^^^^^    end of DEMO   - (FIXME: to be removed after testing)  ^^^^^^^^ */


    // transform to map<string, string>
    return (map<string, string>) $[
              "exit"  :exitcode ,
              "stdout":info["stdout"]:"",
              "stderr":info["stderr"]:""
            ];
}



/* ----------------------------------- END FUNCTIONS -------------------------------------------------------------  */

    //TODO: for JDSN
    // implement usefull logging



    /* vv   MAIN (WIZARD) LAYOUT  vv  */
    term sr_layout=nil;
    sr_layout=`HVCenter( `VBox(
                     `Left ( `Label( nccc_top )),
                     `VSpacing(0.5),
                     `Left (
                             `RadioButtonGroup( `id(`sr_perform), `VBox(
                             `Left (
                                `RadioButton(`id(`configure), `opt(`notify), nccc_configure, true )),
                             `Left ( `HBox( `HSpacing( 3.0 ), `Frame( "",
                                      `VBox (
                                              `Left( `CheckBox(`id(`hwinfo),  `opt(`notify),  nccc_sub_hwinfo,  subhwinfo  ) ),
                                              `Left( `CheckBox(`id(`sysdata), `opt(`notify), nccc_sub_sysdata, subsysdata ) ),
                                              `VSpacing(0.5),
                                              `Left( `Label( nccc_sub_comment ) ),
                                              `VSpacing(0.5),
                                              `Left( `Label( nccc_sub_show  ) ),
                                              `PushButton(`id(`showinfo), nccc_sub_showbtn )
                                   ) ) )) ,
                             `VSpacing(0.5),
                             `Left ( `RadioButton(`id(`noconfigure), `opt(`notify), nccc_noconfigure ))
                           )))
    ));

    term contents = `VBox ( `VSpacing (0.5), sr_layout, `VSpacing (0.5));
    /* ^^       END MAIN LAYOUT     ^^  */




    /* vv      SHOW INFO POPUP     vv  */
    term showinformation = `HBox( `HWeight(1, `HSpacing(0.5)),
                                  `HWeight( 90, `VBox(
                                  `VWeight( 3 , `Label( transmit_info ) ),
                                  `VWeight( 75, `RichText(`id(`information_text), `opt(`plainText), information_text )),
                                  `VWeight( 5, `PushButton (`id (`close_showinfo), Label::CloseButton () ) ) )),
                                  `HWeight(1, `HSpacing(0.5))
    );
    /* ^^      END  SHOW INFO       ^^  */





    /* vv  MANUAL INTERACTION POPUP vv  */
    term manual_interaction = `HBox(
                       `HWeight(1, `HSpacing(0.5)),
                       `HWeight(90, `VBox(
                                          `VWeight(  3, `Left( `Label( `opt(`boldFont), mi_required ) ) ),
                                          `VWeight(  1, `VSpacing(0.5)),
                                          `VWeight(  3, `Left( `Label( mi_needinfo ) ) ),
                                          `VWeight( 10,
                                                        `HBox( `HWeight(  1, `HSpacing(0.5)),
                                                               `HWeight( 80, `RichText(`id(`needinfo), `opt(`plainText), needinfo   )),
                                                               `HWeight(  1, `HSpacing(0.5))
                                                         )
                                          ),
                                          `VWeight(  3, `Left( `Label( mi_use_start_browser  ) )),
                                          `VWeight(  3, `Left( `Label( mi_skip_configuration ) )),
                                          `VWeight(  3,
                                                        `HBox(
                                                              `HWeight(1, `PushButton(`id(`start_browser), mi_browser_btn ) ),
                                                              `HSpacing(`opt(`hstretch), 3),
                                                              `HWeight(1, `PushButton(`id(`skip_config),  mi_skip_btn ) ),
                                                              `HSpacing(`opt(`hstretch), 3),
                                                              `HWeight(1, `PushButton( `id(`config_done), `opt(`disabled), mi_done_btn  ) )
                                                        )
                                           )
                        )),
                       `HWeight(1, `HSpacing(0.5))
    );
    /* ^^  END MANUAL INTERACTION  ^^  */



    /* vv      CCC CONFLICT POPUP      vv  */
    term ccc_conflict=
    `HBox(
          `HWeight(1, `HSpacing(0.5)),
          `HWeight(90, `VBox(
                             `VWeight(  2, `Left( `Label( `opt(`boldFont), nccc ) ) ),
                             `VWeight(  1, `VSpacing(0.5)),
                             `VWeight(  5, `Left( `Label( conflict_need_info  )  ) ),
                             `VWeight(  1, `VSpacing(0.5)),
                             `VWeight(  5, `Left( `Label( conflict_skip_info  )  ) ),
                             `VWeight(  3,
                             `HBox(
                                   `HWeight(1, `PushButton(`id(`retry), conflict_retry_btn ) ),
                                   `HSpacing( 3 ),
                                   `HWeight(1, `PushButton(`id(`skip),  conflict_skip_btn ) )
                                  )
                            )
           )),
          `HWeight(1, `HSpacing(0.5))
    );
    /* ^^       END CCC CONFLICT       ^^  */


    /* vv      CCC ERROR POPUP      vv  */
    term ccc_error=
    `HBox(
          `HWeight(1, `HSpacing(0.5)),
          `HWeight(90, `VBox(
                             `VWeight(  2, `Left( `Label( `opt(`boldFont), "Error" ) ) ),
                             `VWeight(  1, `VSpacing(0.5)),
                             `VWeight(  5, `Left( `Label( "unknown error"  )  ) ),
                            // `VWeight(  1, `VSpacing(0.5)),
                            // `VWeight(  3, `Left( `Label( "really unknown error"  )  ) ),
                             `VWeight(  2,
                             `HBox(
                                   `HWeight(1, `PushButton(`id(`retry), error_retry_btn   ) ),
                                   `HSpacing( 3 ),
                                   `HWeight(1, `PushButton(`id(`skip),  error_skip_btn  ) )
                                  )
                            )
           )),
          `HWeight(1, `HSpacing(0.5))
    );
    /* ^^      END CCC ERROR        ^^  */



    /* vv      OK DONE UPDATE??    vv  */
    term done_ask_update=
    `HBox(
          `HWeight(1, `HSpacing(0.5)),
          `HWeight(90, `VBox(
                             `VWeight(  2, `Left( `Label( `opt(`boldFont), nccc ) ) ),
                             `VWeight(  1, `VSpacing(0.5)),
                             `VWeight(  3, `Left( `Label( ask_update_main  )  ) ),
                             `VWeight(  1, `VSpacing(0.5)),
                             `VWeight(  2, `Left( `Label( ask_update_skipinfo  )  ) ),
                             `VWeight(  2,
                             `HBox(
                                   `HWeight(1, `PushButton(`id(`update), ask_update_run_btn  ) ),
                                   `HSpacing( 3 ),
                                   `HWeight(1, `PushButton(`id(`noupdate), ask_update_skip_btn ) )
                                  )
                            )
           )),
          `HWeight(1, `HSpacing(0.5))
    );
    /* ^^    END OK DONE UPDATE??   ^^  */



    // check if we are in installation workflow or running independently
    if (Mode::normal()) Wizard::CreateDialog();


    // we always need the next button
    Wizard::SetContents (nccc, contents, help, GetInstArgs::enable_back(), true);

    boolean loopend = false;


    // FIXME: for debugging  - to be removed after testing
    UI::DumpWidgetTree();

    any ret = nil;


    repeat {
        ret = Wizard::UserInput();

        if (ret == `abort)
        {
            if (Mode::normal()) break;
            if (Popup::ConfirmAbort (`incomplete))  break;
        }
        else if (ret == `help)
        {
            Wizard::ShowHelp (help);
        }
        else if (ret == `configure || ret == `noconfigure)
        {
            configure_status = (boolean) UI::QueryWidget(`id(`configure),  `Value);
        }
        else if (ret == `hwinfo || ret == `sysdata)
        {
            subhwinfo  = (boolean) UI::QueryWidget(`id(`hwinfo),  `Value);
            subsysdata = (boolean) UI::QueryWidget(`id(`sysdata), `Value);
        }
        else if (ret == `showinfo)
        {
            information_data = suseRegister("p");

            if ( information_data["exit"]:"99" == "0" )
            {    information_text = information_data["stdout"]:""; }
            else
            {    information_text = show_info_retrieve_error; }

            //TODO: include more error codes from suse_register (eg. network unreachable, aso. ...)

            UI::OpenDialog(  showinformation );
            UI::ChangeWidget(`id(`information_text), `Value, information_text );

            UI::UserInput();
            UI::CloseDialog();
        }
        else if (ret == `next)
        {
            if ( configure_status == true )
            {
                /* run suse_register to see if we need manual interaction */
                information_data = suseRegister("");


                // error code 1: needinfo
                // manual interaction is requiered
                // this case MUST be first 
                //  ... because during manual interaction further suse_register calls change the error code
                if (information_data["exit"]:"99" == "1")
                {
                    UI::OpenDialog( manual_interaction );
                    UI::SetFocus (`id (`start_browser ));
                    UI::ChangeWidget( `id(`needinfo), `Value, information_data["stderr"]:"Error: recieved data is invalid"  );
                    any mi_ret =nil;
                    boolean mi_loopend = false;

                    repeat
                    {
                        mi_ret = UI::UserInput();

                        if ( mi_ret == `start_browser  )
                        {
                            UI::ChangeWidget( `id(`config_done), `Enabled, true  );

                            //TODO:
                            // find a consistent way to launch firefox or w3m

                            // ... this is work in progress (not yet in SVN) ...

                            /* cases:
                                      NCurses: always launch w3m as an unprivileged user (user not defined yet)

                                      QT:
                                         - during installation: start XUL browser (provided by stark@suse.de)
                                                                (hopefully on monday evening)
                                         - in installed system: start users firefox with new-window option
                                                                command: "firefox -new-window $URL"
                                                                works with FF 1.5 and higher (and therefor with CODE 10)

                                         - if no FF is installed, fallback to "xterm -e w3m $URL"

                                      ANY: if a w3m call is needed, but w3m is not installed, display error message
                            */


                            //SCR::Execute(.target.bash_output, sformat("firefox -a firefox -remote \"openURL(%1, new-window)\" || firefox %1", "http://www.google.de" ));
                            //SCR::Execute(.target.bash, sformat("firefox %1", "http://www.google.de" ));
                            //SCR::Execute(.target.bash, sformat("screen w3m %1", "http://www.google.de" ));
                            // UI::RedrawScreen();
                        }
                        if ( mi_ret == `skip_config  )
                        {
                            mi_loopend = true;
                            loopend = true;
                            ret = `skip;
                        }

                        /* if the browser start really blocks the YCP workflow the following block can run without the if-clause
                           if so the third button "config_done" in manual interaction dialog can disappear
                        */
                        if ( mi_ret == `config_done  )
                        {
                            // deacticate DONE button
                            UI::ChangeWidget( `id(`config_done), `Enabled, false );
                            // show the user, that we are doing something
                            UI::ChangeWidget( `id(`needinfo), `Value, _("Checking ...") );

                            information_data = suseRegister("");

                            if (information_data["exit"]:"99" == "0" || information_data["exit"]:"99" == "3" )
                            {
                                // error 0: everything is done, quit
                                // error 3: madatory data conflict - handle outside of manual interaction
                                mi_loopend = true;
                            }
                            else if (information_data["exit"]:"99" == "1")
                            {
                                // still needinfo, change displayed information and stay in manual interaction
                                UI::ChangeWidget( `id(`needinfo), `Value, information_data["stderr"]:"Error: recieved data is invalid"  );
                            }
                            else
                            {
                                // unknown error, let the user find an exit :)
                                mi_loopend = true;
                            }
                        }

                    } until ( mi_loopend == true  );

                    //TODO: according to mi_ret, ret has to be set

                    UI::CloseDialog();
                }
                // NO ELSE CASE HERE!!!
                // ... because information_data may be changed during error code 1 case by a suse_register run
                // and therefor NO MORE suse_register call below this line!!!

                /*  handle error codes from FIRST suse_register call AND from manual interaction  */
                if (information_data["exit"]:"99" == "3")
                {
                    // error code 3 means:
                    // conflict between transmitted data and data to be transmit according to customer contract
                    UI::OpenDialog(ccc_conflict);
                    UI::SetFocus (`id (`retry ));
                    symbol retry = (symbol) UI::UserInput();

                    if ( retry == `skip )
                    {
                        // user wants to skip, end of loop
                        ret = `skip;
                        loopend = true;
                    }
                    // no else here!!
                    // if ( retry == `check_config ) nothing will happen, user wants to check config
                    UI::CloseDialog();
                }

                // error code 0 means: everything is OK
                // no more interaction requiered - ZMD is configuered by suse_register
                if (information_data["exit"]:"99" == "0")
                {
                    UI::OpenDialog( done_ask_update );
                    UI::SetFocus (`id (`update ));
                    symbol update = (symbol) UI::UserInput();
                    UI::CloseDialog();
                    if ( update == `update ) ret = `next;
                    else if ( update == `noupdate ) ret = `skip;
                    // we are done, end of loop
                    loopend = true;
                }

                // handle any other error codes
                if (
                     information_data["exit"]:"99" != "0" &&
                     information_data["exit"]:"99" != "3" &&
                     information_data["exit"]:"99" != "1"
                   )
                {
                    // display generic error message
                    // TODO: specify error and show it via ChangeWidget, if desired
                    UI::OpenDialog(ccc_error);
                    UI::SetFocus (`id (`retry ));
                    symbol retry = (symbol) UI::UserInput();
                    UI::CloseDialog();
                    if ( retry == `skip )
                    {
                        loopend = true;
                        ret = `skip;
                    }
                }


            }
            else
            {
                // skipping - online update must NOT run!!
                // TODO: STANO: is it ok to return `skip to the wizard ... he has to handle this
                loopend = true;
                ret = `skip;
            }

        }

    } until ( loopend || ret == `back );

    if (Mode::normal()) Wizard::CloseDialog();

    return ret;
}
