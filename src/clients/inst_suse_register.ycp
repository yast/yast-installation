/**
 * File:        installation/general/inst_suse_register
 * Module:      Installation
 * Summary:     Perform Customer Center Configuration
 *              this includes (by calling suse_register):
 *                              machine registration
 *                              if needed, launch browser for user/customer registration
 *                              ZMD configuration
 * Authors:     J. Daniel Schmidt <jdsn@suse.de>
 *
 * Perform Customer Center Configuration
 *
 * $Id: inst_suse_register.ycp 1 2006-02-17 13:20:02Z jdsn $
 */

{
    textdomain "installation";

    import "Wizard";
    import "Popup";
    import "GetInstArgs";
    import "CustomDialogs";
    import "Directory";
    import "Language";
    import "Mode";
    import "String";
    import "Label";


    map ui = UI::GetDisplayInfo();
    boolean textmode = (boolean) ui["TextMode"]:nil;


    map argmap = GetInstArgs::argmap();


    /* strings for main (wizard) layout  */
    string nccc = _("Novell Customer Center Configuration");
    string nccc_top = _(
"Here will be some great Marketing blabla
like Novell Customer Center is a great thing!");

    string nccc_configure = _("Configure now (recommended)");
    string nccc_noconfigure = _("Configure later");

    string nccc_sub_hwinfo  = _("Hardware profile");
    string nccc_sub_sysdata = _("System configuration");
    string nccc_sub_comment = _("For better convenience please allow to transmit:");

    string nccc_sub_show    = _("Display the information to be transmitted:");
    string nccc_sub_showbtn = _("Show");


    /*  strings for success popup   */
    string nccc_success_msg = _("Your configuration was successful.");


   /* strings for manual interaction popup */
    string mi_required = _("Manual interaction is required");
    string mi_needinfo = _("The server needs the following information:");
    string mi_browser_btn = _("Continue");
    string mi_start_browser = _(
"A webbrowser will be launched now to complete
the configuration on the presented website.");



    /* string for show information popup */
    string transmit_info = _("Information to be transmitted");
    string show_info_retrieve_error = _("Error: Could not retrieve data!");

    /*  strings for conflict popup */
    string conflict_need_info = _(
"The server requires additional system information. The submission 
of the hardware profile will be activated automatically."
);

    string conflict_skip_info = _("");
//"Skip configuration and update will end the configuration
//and online update will not be run.
//You can finish this configuration at any later time.
//");

    string conflict_retry_btn = _("Continue");
    string conflict_skip_btn = _("Cancel");


    /* error messages  */
    string data_invalid = _("Error: recieved data is invalid");



    /* CCC error / unknown error */
    string error_retry_btn = _("Retry");
    string error_skip_btn  = _("Cancel");




    /* help text for dialog "Novell Customer Center Configuration" */
    string help = _("<p><b>Novell Customer Center Configuration</b></p>
<p>Please configure your Novell Customer Center in order to get access to updates for your system.</p>");


    /* other string variables */
    map<string, string> information_data = nil;
    string information_text = "";

    // dynamically filled by "suse_register -p" ... untranslated
    string needinfo = "";


    /* some variables used below  */

    // default is true, see statement in layout term
    boolean configure_status = true;



    //TODO: STANO:
    // read hwinfo and sysdata setting from config file(s)
    // (root from/to sysconfig, user read from sysconfig and write to homedir .somedotfile (eg. ~/.suse_register ))
    // this is not mandatory for the beta6, but should be in beta7 or at least one later
    /* initial setting: both true */
    boolean subhwinfo  = true;
    boolean subsysdata = true;





/* ---------------------------------- LOCAL FUNCTIONS ------------------------------------------------------------  */

/* function to call suse_register
   the returned map is transformed to map<string, string>
*/
map<string, string> suseRegister(string parameter)
{
    // handle parameters
    string params = " -y ";
    if (parameter == "p") params = params + " -p ";
    if ( ! subhwinfo  )   params = params + " --no-hw-data ";
    if ( ! subsysdata )   params = params + " --no-optional ";

    // run suse_register ... -y beautifies the output for usage in yast
    y2milestone ("Calling /usr/bin/suse_register %1", params);
    map<string, any> info = (map<string, any>) SCR::Execute(.target.bash_output, sformat("/usr/bin/suse_register %1", params ));
    string exitcode = sformat("%1", info["exit"]:99);
    y2milestone ("/usr/bin/suse_register returned %1", exitcode);

    /* vvvvvvv  for demonstration purposes set DEMO to true   vvvvvvvvv */
    boolean DEMO = true;
    if ( DEMO )
    {
        list<string> errs = ["0", "1", "2", "3", "4", "5", "6", "17", "99"] ;

        UI::OpenDialog(
            `VBox(
                  `Label(`opt(`boldFont), "DEMONTRATION MODE"),
                  `Label("suse_register is running in background now"),
                  `Label("for testing purposes you can define its error code"),
                  `Label(
"
0: everythings ok
1: needinfo -> manual interaction
2: unknown error
3: conflict (according to contract more data is needed)
4.. : unknown errors
"),
                  `ComboBox(`id(`err), "error code", errs ),
                  `PushButton( `id(`go), "OK")
            )
        );
        UI::UserInput();
        exitcode = (string) UI::QueryWidget(`id(`err), `Value);
        if (exitcode == "1") info["stdout"]="http://www.opensuse.org";
        UI::CloseDialog();
    }
    /* ^^^^^^^    end of DEMO   - (FIXME: to be removed after testing)  ^^^^^^^^ */


    // transform to map<string, string>
    map<string, string> response = $[
                                     "exit"  :exitcode ,
                                     "stdout":info["stdout"]:"",
                                     "stderr":info["stderr"]:""
                                    ];

    y2milestone ("Server response: %1", response);
    return response;
}



boolean amIroot()
{
    // check if we are root
    map<string, any> userid = (map<string, any>) SCR::Execute(.target.bash_output, "ui -u");
    if ( userid["stdout"]:"1" == "0" )
        return true;
    else
        return false;
}




/* ----------------------------------- END FUNCTIONS -------------------------------------------------------------  */

    //TODO: for JDSN
    // implement usefull logging



    /* vv   MAIN (WIZARD) LAYOUT  vv  */
    term sr_layout=nil;
    sr_layout=`HVCenter( `VBox(
                     `Left (
                             `RadioButtonGroup( `id(`sr_perform), `VBox(
                             `Left ( `Label( nccc_top ) ),
                             `VSpacing(1),
                             `Left ( `RadioButton(`id(`noconfigure), `opt(`notify), nccc_noconfigure )),
                             `Left ( `RadioButton(`id(`configure),   `opt(`notify), nccc_configure, true )),
                             `Left ( `HBox( `HSpacing( 3.0 ),
                                      `VBox (
                                              `Left( `Label( nccc_sub_comment ) ),
                                              `VSpacing(0.5),
                                              `Left( `CheckBox(`id(`hwinfo),  `opt(`notify),  nccc_sub_hwinfo,  subhwinfo  ) ),
                                              `Left( `CheckBox(`id(`sysdata), `opt(`notify), nccc_sub_sysdata, subsysdata ) ),
                                              `VSpacing(0.5),
                                              `Left( `Label( nccc_sub_show  ) ),
                                              `PushButton(`id(`showinfo), nccc_sub_showbtn )
                                   ) ) ) ,
                             `VSpacing(0.5)
                           )))
    ));

    term contents = `VBox ( `VSpacing (0.5), sr_layout, `VSpacing (0.5));
    /* ^^       END MAIN LAYOUT     ^^  */



    /* vv      SHOW INFO POPUP     vv  */
    term showinformation = `HBox( `HSpacing(0.5),
                                  `MinSize(  70, 22 ,`VBox(
                                     `Label( transmit_info ),
                                     `RichText(`id(`information_text), `opt(`plainText), information_text ),
                                     `PushButton (`id (`close_showinfo), Label::CloseButton () )  )
                                   ),
                                  `HSpacing(0.5)
    );
    /* ^^      END  SHOW INFO       ^^  */





    /* vv  MANUAL INTERACTION POPUP vv  */
    term manual_interaction = `HBox(
                                   `MinSize( 50, 20, `VBox(
                                           `Left( `Label( `opt(`boldFont), mi_required ) )  ,
                                           `VSpacing(0.5) ,
                                           `Left( `Label( mi_start_browser  ) ) ,
                                           `Left( `Label( mi_needinfo ) )  ,
                                                  `RichText(`id(`needinfo), `opt(`plainText), needinfo    ),
                                           `HBox(
                                                  `PushButton(`id(`start_browser), mi_browser_btn )  ,
                                                  `HSpacing( 3),
                                                  `PushButton(`id(`cancel),  Label::CancelButton()  )
                                           )
                                   ))
    );
    /* ^^  END MANUAL INTERACTION  ^^  */



    /* vv      CCC CONFLICT POPUP      vv  */
    term ccc_conflict=
    `VBox(
          `Left( `Label( `opt(`boldFont), nccc ) ),
          `VSpacing( 0.5 ),
          `Left( `Label( conflict_need_info  )  ),
          `Left( `Label( conflict_skip_info  )  ),
          `PushButton(`id(`ok), Label::OKButton())
    );
    /* ^^       END CCC CONFLICT       ^^  */


    /* vv      CCC ERROR POPUP      vv  */
    term ccc_error=
    `VBox(
           `Left( `Label( `opt(`boldFont), _("Error") ) ),
           `VSpacing( 0.5 ),
           `Left( `Label( `id(`err_description), _("unknown error")  ) ),
           `HBox(
                  `HWeight(1, `PushButton(`id(`ok), Label::OKButton()  ) ),
                  `HSpacing( 3 ),
                  `HWeight(1, `PushButton(`id(`cancel),  Label::CancelButton() ) )
                )
    );
    /* ^^      END CCC ERROR        ^^  */



    /* vv      OK DONE UPDATE??    vv  */
    term nccc_success=
    `VBox(
           `Left( `Label( `opt(`boldFont), nccc ) ),
           `VSpacing( 0.5 ),
           `Left( `Label( nccc_success_msg  ) ),
           `PushButton(`id(`ok), Label::OKButton() )
    );
    /* ^^    END OK DONE UPDATE??   ^^  */



    // check if we are in installation workflow or running independently
    if (Mode::normal()) Wizard::CreateDialog();

    // we always need the next button
    Wizard::SetContents (nccc, contents, help, GetInstArgs::enable_back(), true);

    y2debug (UI::DumpWidgetTree());

    boolean loopend = false;
    any ret = nil;

    repeat {
        ret = Wizard::UserInput();

        if (ret == `abort)
        {
            if (Mode::normal()) break;
            if (Popup::ConfirmAbort (`incomplete))  break;
        }
        else if (ret == `help)
        {
            Wizard::ShowHelp (help);
        }
        else if (ret == `configure || ret == `noconfigure)
        {
            configure_status = (boolean) UI::QueryWidget(`id(`configure),  `Value);
        }
        else if (ret == `hwinfo || ret == `sysdata)
        {
            subhwinfo  = (boolean) UI::QueryWidget(`id(`hwinfo),  `Value);
            subsysdata = (boolean) UI::QueryWidget(`id(`sysdata), `Value);
        }
        else if (ret == `showinfo)
        {
            information_data = suseRegister("p");

            if ( information_data["exit"]:"99" == "0" )
            {    information_text = information_data["stdout"]:""; }
            else
            {    information_text = show_info_retrieve_error; }

            //TODO: include more error codes from suse_register (eg. network unreachable, aso. ...)

            UI::OpenDialog(  showinformation );
            UI::ChangeWidget(`id(`information_text), `Value, information_text );

            UI::UserInput();
            UI::CloseDialog();
        }
        else if (ret == `next)
        {
            if ( configure_status == true )
            {
                /* run suse_register to see if we need manual interaction */
                information_data = suseRegister("");

                // error code 1: needinfo
                // manual interaction is requiered
                // this case MUST be first
                //  ... because during manual interaction further suse_register calls change the error code
                if (information_data["exit"]:"99" == "1")
                {
                    UI::OpenDialog( manual_interaction );
                    UI::SetFocus (`id (`start_browser ));
                    UI::ChangeWidget( `id(`needinfo), `Value, information_data["stderr"]:"Error: recieved data is invalid"  );
                    any mi_ret =nil;
                    boolean mi_loopend = false;

                    repeat
                    {
                        mi_ret = UI::UserInput();
                        if ( mi_ret == `start_browser  )
                        {
                            UI::ChangeWidget( `id(`needinfo), `Value, _("Browser starting ...") );
                            // UI::ChangeWidget( `id(`config_done), `Enabled, true  );

                            // now we launch the browser
                            string browser_cmd ="/bin/true";
                            boolean iamroot = amIroot();

                            if ( textmode )
                               browser_cmd = "screen w3m ";
                            else
                            {
                                if ( iamroot )
                                    browser_cmd = "/usr/bin/xulrunner /usr/share/YaST2/yastbrowser/application.ini -url ";
                                else
                                    browser_cmd = "firefox -new-window ";
                            }

                            if ( iamroot )
                            {
                                // if I am root add an "su suse-ncc " to the command
                                // browser_cmd = "su -l suse-ncc " + browser_cmd;

                                // FIXME!!!  sux is obsolete, su does xauth now
                                // FIXME!!!  but the call with "su" is still not working!!
                                // FIXME!!!  resulting in "cannot open display" errors even with "export DISPLAY"
                            }
                            SCR::Execute(.target.bash, sformat("%1 %2", browser_cmd, information_data["stdout"]:"http://www.opensuse.org" ));

                            UI::RedrawScreen();

                        }
                        else if ( mi_ret == `cancel  )
                        {
                            mi_loopend = true;
                        }

                        if ( ! mi_loopend  )
                        {
                            // show the user, that we are doing something
                            UI::ChangeWidget( `id(`needinfo), `Value, _("Checking ...") );

                            information_data = suseRegister("");

                            if (information_data["exit"]:"99" == "0" || information_data["exit"]:"99" == "3" )
                            {
                                // error 0: everything is done, quit
                                // error 3: madatory data conflict - handle outside of manual interaction
                                mi_loopend = true;
                            }
                            else if (information_data["exit"]:"99" == "1")
                            {
                                // still needinfo, change displayed information and stay in manual interaction
                                UI::ChangeWidget( `id(`needinfo), `Value, information_data["stderr"]:"Error: could not retrieve data"  );
                            }
                            else
                            {
                                // unknown error, let the user find an exit :)
                                mi_loopend = true;
                            }
                        }

                    } until ( mi_loopend == true  );

                    // we are done with manual interaction
                    UI::CloseDialog();

                    if (mi_ret == `cancel)
                    {
                        UI::ChangeWidget(`id(`noconfigure), `Value, true);
                        configure_status = false;
                    }
                }

                // NO ELSE CASE HERE!!!
                // ... because information_data may be changed during error code 1 case by a suse_register run
                // and therefor NO MORE suse_register calls below this line!!!

                /*  handle error codes from FIRST suse_register call AND from manual interaction  */
                if (information_data["exit"]:"99" == "3")
                {
                    // error code 3 means:
                    // conflict between transmitted data and data to be transmit according to customer contract
                    // hwconfig is needed
                    UI::OpenDialog(ccc_conflict);
                    UI::SetFocus (`id (`ok));
                    UI::UserInput();
                    UI::CloseDialog();
                    UI::ChangeWidget(`id(`hwinfo), `Value, true );
                    subhwinfo = true;
                }

                // error code 0 means: everything is OK
                // no more interaction requiered - ZMD is configuered by suse_register
                if (information_data["exit"]:"99" == "0")
                {
                    UI::OpenDialog( nccc_success );
                    UI::SetFocus (`id (`update ));
                    symbol update = (symbol) UI::UserInput();
                    UI::CloseDialog();
                    if ( update == `update ) ret = `next;
                    else if ( update == `noupdate ) ret = `skip;
                    // we are done, end of loop
                    loopend = true;
                }

                // handle any other error codes
                if (
                     information_data["exit"]:"99" != "0" &&
                     information_data["exit"]:"99" != "3" &&
                     information_data["exit"]:"99" != "1"
                   )
                {
                    // display generic error message
                    // TODO: specify error and show it via ChangeWidget, if desired
                    UI::OpenDialog(ccc_error);
                    UI::SetFocus (`id (`retry ));
                    symbol retry = (symbol) UI::UserInput();
                    UI::CloseDialog();
                    if ( retry == `cancel )
                    {
                        UI::ChangeWidget(`id(`noconfigure), `Value, true);
                        configure_status = false;
                    }
                }


            }
            else
            {
                // skipping - online update must NOT run!!
                // TODO: STANO: is it ok to return `skip to the wizard ... he has to handle this
                loopend = true;
                ret = `skip;
            }

        }

    } until ( loopend || ret == `back );

    if (Mode::normal()) Wizard::CloseDialog();

    return ret;
}
