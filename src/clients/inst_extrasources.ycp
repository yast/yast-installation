/**
 * File:	clients/inst_extrasources.ycp
 * Package:	yast2-installation
 * Summary:	Automatically register software repositories from content file
 * Authors:	Ladislav Slez√°k <lslezak@suse.cz>
 *		Lukas Ocilka <locilka@suse.cz>
 *
 * This client loads the target and initializes the package manager.
 * Adds all sources defined in control file (software->extra_urls)
 * and stores them at the end.
 *
 * $Id$
 */

{

textdomain "installation";

import "GetInstArgs";
import "Mode";
import "PackageLock";
import "ProductFeatures";
// We need the constructor
import "ProductControl";
import "Installation";
import "Icon";
import "NetworkService";
import "PackagesUI";
import "Label";

/**
 * Returns list of maps of repositories to register. See bnc #381360.
 *
 * @param registered URLs of already registered repositories (they will be ignored to not register the same repository one more)
 * @return list <map> of URLs to register
 */
define list <map> GetURLsToRegister (list <string> registered)
{
    list <map> urls_from_control_file = (list <map>) ProductFeatures::GetFeature ("software", "extra_urls");

    if (urls_from_control_file == nil) {
	y2milestone ("Empty or errorneous software/extra_urls: %1", urls_from_control_file);
	return [];
    }

    urls_from_control_file = filter (map one_url, urls_from_control_file, {
	if (contains (registered, one_url["baseurl"]:"")) {
	    y2milestone ("Already registered: %1", one_url["baseurl"]:"");
	    return false;
	}
	return true;
    });

    y2milestone ("Repositories to register: %1", urls_from_control_file);
    return urls_from_control_file;
}

/**
 * Register the installation sources in offline mode (no network connection required).
 * The repository metadata will be downloaded by sw_single (or another yast module) when the repostory is enabled
 *
 * @param list <map> list of the sources to register
 * @return list<integer> list of created source IDs
 */
define list <integer> RegisterRepos (list <map> url_list)
{
    list <integer> ret = [];

    foreach (map new_url, url_list, {
	    if (new_url["baseurl"]:"" == nil || new_url["baseurl"]:"" == "") {
		y2error ("Cannot use repository: %1, no 'baseurl' defined", new_url);
		return;
	    }

	    map <string,any> repo_prop = $[];

	    // extra repos are disabled by default
	    repo_prop["enabled"]	= new_url["enabled"]:false;
	    repo_prop["autorefresh"]	= new_url["autorefresh"]:true;

	    // repository name (try) name, alias, (fallback) baseurl
	    repo_prop["name"]		= new_url["name"]:new_url["alias"]:new_url["baseurl"]:"";

	    // repository alias (try) alias, (fallback) baseurl
	    repo_prop["alias"]		= new_url["alias"]:new_url["baseurl"]:"";

	    repo_prop["base_urls"]	= [new_url["baseurl"]:""];

	    if (haskey (new_url, "prod_dir")) {
		repo_prop["prod_dir"]	= new_url["prod_dir"]:"/";
	    }

	    if (haskey (new_url, "priority")) {
		repo_prop["priority"]	= tointeger (new_url["priority"]:99);
	    }

	    integer new_repo_id = Pkg::RepositoryAdd (repo_prop);

	    if (new_repo_id != nil && new_repo_id >= 0) {
		y2milestone ("Registered extra repository: %1: %2", new_repo_id, repo_prop);
		ret = add (ret, new_repo_id);
	    } else {
		y2error("Cannot register: %1", repo_prop);
	    }
	}
    );

    return ret;
}

/**
 * Returns list of already registered repositories.
 *
 * @return list <string> of registered repositories
 */
list<string> RegisteredUrls()
{
    // get all registered installation sources
    list <integer> srcs = Pkg::SourceGetCurrent (false);

    list<string> ret = [];
    foreach(integer src, srcs,
	{
	    map general = Pkg::SourceGeneralData(src);

	    string url = general["url"]:"";

	    if (url != nil && url != "")
	    {
		ret = add(ret, url);
	    }
	}
    );

    // remove duplicates
    ret = toset(ret);

    y2milestone("Registered sources: %1", ret);

    return ret;
}

// Initialize the package manager
// needed for registered sources and products
boolean InitializePackager () {
    if (!PackageLock::Check()) return false;

    // to find out which sources have been already registered
    Pkg::SourceStartManager (false);

    // to initialize target because of installed products
    return (Pkg::TargetInit (Installation::destdir, false) == true);
}

// refresh the requested repositories
// returns true on success
boolean RefreshRepositories(list<integer> repos)
{
    boolean ret = true;

    y2milestone("Refreshing repositories %1", repos);
    foreach(integer repo, repos, {
	ret = ret && Pkg::SourceRefreshNow(repo);
    });

    y2milestone("Refresh succeeded: %1", ret);

    return ret;
}

// is the repository an update repo?
boolean IsUpdateRepo(integer repo)
{
    y2milestone("Checking whether repository %1 is an update repo...", repo);
    boolean ret = false;

    // check if there is a patch available in the repository
    foreach (map patch, Pkg::ResolvableProperties ("", `patch, ""), {
	if (patch["source"]:-1 == repo)
	{
	    y2milestone("Found patch %1 in the repository", patch["name"]:"");
	    ret = true;
	    break;
	}
    });

    y2milestone("Repository %1 is update repo: %2", repo, ret);

    return ret;
}

// mark the repositories for upgrade, run the solver
void UpgradeFrom(list<integer> repos)
{
    foreach(integer repo, repos, {
	y2milestone("Adding upgrade repo %1", repo);
	Pkg::AddUpgradeRepo(repo);
    });

    Pkg::PkgSolve(true);
}

// revert the upgrading repos, reset package selection
void RevertUpgradeFrom(list<integer> repos)
{
    foreach(integer repo, repos, {
	y2milestone("Removing upgrade repo %1", repo);
	Pkg::RemoveUpgradeRepo(repo);
    });

    Pkg::PkgApplReset();
    Pkg::PkgReset();
}

// check if there is a selected package in the requested repositories
// returns list of repositories providing an update (repo IDs)
map<string, any> UpgradesAvailable(list<integer> repos)
{
    list<integer> ret = [];
    list<string> packages = [];

    foreach (map pkg, Pkg::ResolvableProperties ("", `package, ""), {
	integer source = pkg["source"]:-1;
	if (pkg["status"]:`none == `selected && contains(repos, source))
	{
	    string package = sformat("%1-%2.%3", pkg["name"]:"", pkg["version"]:"", pkg["arch"]:"");
	    y2milestone("Found upgrade to install: %1", package);
	    packages = add(packages, package);

	    if (!contains(ret, source))
	    {
		ret = add(ret, source);
	    }
	}
    });

    y2milestone("Upgrades found in repositories: %1", ret);

    return $["repositories" : ret, "packages" : packages ];
}

// ask user whether to install available package updates
// returns true after confirming
boolean InstallPackages(string msg, string details)
{
    term button_box = `ButtonBox
    (
	`PushButton (`id (`yes), `opt (`default, `okButton, `key_F10), Label::YesButton()),
	`PushButton (`id (`no), `opt (`cancelButton, `key_F9), Label::NoButton())
    );

    term dialog = `HBox(
	`HSpacing(0.5),
	`Top(
	    `MarginBox(1, 1,
		Icon::Image("question", $[])
	    )
	),
	`VBox(
	    `Left(`Label(msg)),
	    `VSpacing(0.5),
	    // check box
	    `Left(`CheckBox(`id(`show), `opt(`notify), _("Show &package updates"), false)),
	    `ReplacePoint(`id(`info), `Empty()),
	     button_box
	),
	`HSpacing(2)
    );

    UI::OpenDialog(`opt(`decorated), dialog);

    any r = nil;
    while (r != `yes && r != `no && r != `cancel)
    {
	r = UI::UserInput();

	if (r == `show)
	{
	    if (UI::QueryWidget(`id(`show), `Value ) == true)
	    {
		UI::ReplaceWidget(`id(`info), `RichText(`opt(`plainText), details));
	    }
	    else
	    {
		UI::ReplaceWidget(`id(`info), `Empty() );
	    }
	}
    }

    UI::CloseDialog();

    y2milestone("User input: %1", r);

    return r == `yes;
}

//////////////////////////////////////////

if ( GetInstArgs::going_back())     // going backwards?
{
    return `auto;                   // don't execute this once more
}

// autoyast mode, user cannot be asked
if (Mode::autoinst())
{
    y2milestone("Skipping extra source configuration in AutoYaST mode");
    return `auto;
}

// bugzilla #263289
if (! InitializePackager()) {
    y2error ("Cannot connect to the Packager");
    return `auto;
}

list <string> already_registered = RegisteredUrls();

list <map> register_url = GetURLsToRegister (already_registered);

// any confirmed source to register?
if (size (register_url) > 0) {
    // register (create) the sources
    list <integer> added_ids = RegisterRepos (register_url);

    // synchronize the sources if any source has been added
    if (size (added_ids) > 0) {
	// If any source has been added, store the sources
	// bnc #440184
	y2milestone ("Some (%1) sources have been added, storing them...", added_ids);
	Pkg::SourceSaveAll();
    }

    // check during upgrade whether the added repositories provide an upgrade for installed package
    // (openSUSE DVD does not contain all packages, packages from OSS repository might not have been upgraded,
    // see bnc#693230 for details)
    if (Mode::update() && size(added_ids) > 0 )
    {
	y2milestone("Checking whether there is and update provided by extra (non-update) repo...");

	// network up?
	if (NetworkService::isNetworkRunning())
	{
	    // refresh the added repositories and load them
	    if (RefreshRepositories(added_ids) && Pkg::SourceStartManager(true))
	    {
		// ignore update repositories - the updates will be installed later by online update
		list<integer> check_repos = filter(integer repo, added_ids, {return !IsUpdateRepo(repo);});

		if (size(check_repos) > 0)
		{
		    UpgradeFrom(check_repos);

		    map<string, any> upgrade_info = UpgradesAvailable(check_repos);
		    list<integer> upgrade_repos = upgrade_info["repositories"]:[];

		    if (size(upgrade_repos) > 0)
		    {
			// popup message, list of repositores is appended to the text
			string message = _("Package updates have been found in these additional repositories:") + "\n\n";
			foreach(integer repo, upgrade_repos, {
			    map repo_info = Pkg::SourceGeneralData(repo);
			    message = message + sformat("%1 (%2)\n", repo_info["name"]:"", repo_info["url"]:"");
			});

			// yes/no popup question
			message = message + "\n\n" + _("Start the software manager to check and install the updates?");

			string package_list = mergestring(upgrade_info["packages"]:[], "\n");

			if (InstallPackages(message, package_list))
			{
			    // start the software manager
			    symbol ui = PackagesUI::RunPackageSelector($["mode" : `summaryMode]);
			    y2milestone("Package manager returned: %1", ui);

			    if (ui == `accept)
			    {
				// install the packages
				y2milestone("Installing packages");
				WFM::call("inst_rpmcopy");
			    }
			}
			else
			{
			    y2milestone("Skipping installation of the available updates");
			}
		    }
		    else
		    {
			y2milestone("Everything OK, no available update found");
		    }

		    RevertUpgradeFrom(check_repos);
		}
	    }
	    else
	    {
		y2warning("Could not load new repositories");
	    }
	}
	else
	{
	    y2milestone("Network is not running, skipping available updates check");
	}
    }
}

return `auto;

/* EOF */
}
