/**
 * File:	clients/inst_extrasources.ycp
 * Package:	yast2-installation
 * Summary:	Automatically register software repositories from content file
 * Authors:	Ladislav Slez√°k <lslezak@suse.cz>
 *
 * Assumptions:
 * - the sources and target must be initialized in this script
 *   (bugzilla #263289)
 * - the sources will be saved afterwards
 *   (which means that running this client alone will not work)
 * - the added sources are disabled by default and they are added
 *   in offline mode (no metadata is dowloaded)
 *
 * $Id$
 */

{

textdomain "installation";

import "GetInstArgs";
import "SourceManager";
import "Mode";
import "PackageLock";

// the tag providing location of the additional sources in content file
string content_file_tag = "EXTRAURLS";
string optional_tag = "OPTIONALURLS";

/**
 * Dowload and parse content files from current installation sources
 * @param registered URLs of already registered repositories (they will be ignored to not register the same repository one more)
 * @return list<string> Extra URLs to register
 */
define list<string> GetExtraURLs(list<string> registered)
{
    list<string> extra_urls = [];

    list<map> products = Pkg::ResolvableProperties("", `product, "");
    y2milestone("Products: %1", products);

    foreach(map product, products,
	{
	    // get the extra sources
	    list<string> extra = (list<string>)product["extra_urls"]:[];
	    list<string> optional = (list<string>)product["optional_urls"]:[];

	    if (size(extra) > 0)
	    {
		foreach(string url, extra,
		    {
			// is the URL already registered?
			if (!contains(registered, url))
			{
			    extra_urls = add(extra_urls, url);
			}
			else
			{
			    y2milestone("Source %1 is already registered", url);
			}
		    }
		);
	    }

	    if (size(optional) > 0)
	    {
		foreach(string url, optional,
		    {
			// is the URL already registered?
			if (!contains(registered, url))
			{
			    extra_urls = add(extra_urls, url);
			}
			else
			{
			    y2milestone("Source %1 is already registered", url);
			}
		    }
		);

	    }
	}
    );

    y2milestone("Extra sources: %1", extra_urls);
    return extra_urls;
}

/**
 * Register the installation sources in offline mode (no network connection required).
 * The repository metadata will be downloaded by sw_single (or another yast module) when the repostory is enabled
 * @param url_list list of the sources to register
 * @return list<integer> list of created source IDs
 */
define list<integer> RegisterRepos(list<string> url_list)
{
    list<integer> ret = [];
    y2milestone("Repositories to register: %1", url_list);

    foreach(string new_url, url_list,
	{
	    // map with repository parameters: $[ "enabled" : boolean,
	    // "autorefresh" : boolean, "name" : string, "alias" : string,
	    // "base_urls" : list<string>, "prod_dir" : string, "type" : string ]
	    map<string,any> repo_prop = $[];

	    // extra repos are disabled by default
	    repo_prop["enabled"] = false;
	    repo_prop["autorefresh"] = true;
	    repo_prop["name"] = new_url;
	    repo_prop["alias"] = new_url;
	    repo_prop["base_urls"] = [ new_url ];

	    integer new_repo_id = Pkg::RepositoryAdd(repo_prop);

	    if (new_repo_id >= 0)
	    {
		y2milestone("Registered extra repository: %1: %2", new_repo_id, repo_prop);

		ret = add(ret, new_repo_id);
	    }
	    else
	    {
		y2error("Cannot register: %1", repo_prop);
	    }
	}
    );

    return ret;
}

list<string> RegisteredUrls()
{
    // get all registered installation sources
    list <integer> srcs = Pkg::SourceGetCurrent (false);

    list<string> ret = [];
    foreach(integer src, srcs,
	{
	    map general = Pkg::SourceGeneralData(src);

	    string url = general["url"]:"";

	    if (url != nil && url != "")
	    {
		ret = add(ret, url);
	    }
	}
    );

    // remove duplicates
    ret = toset(ret);

    y2milestone("Registered sources: %1", ret);

    return ret;
}

// Initialize the package manager
// needed for registered sources and products
boolean InitializePackager () {
    if (!PackageLock::Check()) return false;

    // to find out which sources have been already registered
    Pkg::SourceStartManager (false);

    // to initialize target because of installed products
    return (Pkg::TargetInit ("/", false) == true);
}


//////////////////////////////////////////

if ( GetInstArgs::going_back())     // going backwards?
{
    return `auto;                   // don't execute this once more
}

// autoyast mode, user cannot be asked
if (Mode::autoinst())
{
    y2milestone("Skipping extra source configuration in AutoYaST mode");
    return `auto;
}

// bugzilla #263289
if (! InitializePackager()) {
    y2error ("Cannot connect to the Packager");
    return `auto;
}

list <string> already_registered = RegisteredUrls();

// $[ string url : boolean default ]
list<string> register_url = GetExtraURLs(already_registered);

// any confirmed source to register?
if (size(register_url) > 0)
{
    // register (create) the sources
    list<integer> added_ids = RegisterRepos(register_url);

    // synchronize the sources if any source has been added
    if (size(added_ids) > 0)
    {
	y2milestone ("syncing to zmd");
	boolean synced = SourceManager::SyncAddedAndDeleted (added_ids, []);
	y2milestone ("sync status: %1", synced);
    }
}

return `auto;

/* EOF */
}
