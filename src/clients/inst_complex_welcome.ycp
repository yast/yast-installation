/**
 * File:
 *	inst_complex_welcome.ycp
 *
 * Module:
 *	Installation
 *
 * Authors:
 *	Klaus   KÃ¤mpf <kkaempf@suse.de>
 *	Michael Hager <mike@suse.de>
 *	Stefan  Hundhammer <sh@suse.de>
 *	Thomas Roelz <tom@suse.de>
 *	Jiri Suchomel <jsuchome@suse.cz>
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	This client shows main dialog for choosing the language,
 *	keyboard and accepting the license.
 *
 * Attention:
 *	This is still work in progress ...
 *
 * $Id:$
 *
 */
{
    textdomain "installation";

    import "Console";
    import "GetInstArgs";
    import "Keyboard";
    import "Label";
    import "Language";
    import "Mode";
    import "Popup";
    import "ProductFeatures";
    import "Report";
    import "Stage";
    import "Timezone";
    import "Wizard";
    import "Icon";
    import "InstData";
    import "ProductLicense";

    // ------------------------------------- main part of the client -----------

    map argmap = GetInstArgs::argmap();

    string language = Language::language;

    // language preselected in /etc/install.inf
    string preselected = Language::preselected;

    boolean text_mode	= Language::GetTextMode ();

   /* ----------------------------------------------------------------------
    * Build dialog
    * ----------------------------------------------------------------------*/
    // heading text
    string heading_text = _("Languages");

    term languagesel = `ComboBox (
	`id (`language),
	`opt (`notify),
	_("&Language"), Language::GetLanguageItems (`first_screen)
    );

    term keyboardsel = `ComboBox (
	`id (`keyboard),
	`opt (`notify),
	_("&Keyboard Layout"),
	// all keyboard layouts should be available
	maplist (string id, string label, Keyboard::Selection (),
	    ``(`item (`id (id), label))
	)
    );


    // this type of contents will be shown only for initial installation dialog
    term contents = `VBox (
	`VWeight (3, `VStretch()),
	`HSquash (`VBox (
	    `HBox (
		`HSquash (Icon::Simple ("yast-language")),
		`HSpacing (2),
		`Left (languagesel)
	    ),
	    `VSpacing (1),
	    `HBox (
		`HSquash (Icon::Simple ("yast-keyboard")),
		`HSpacing (2),
		`Left (keyboardsel)
	    )
	)),
	`VWeight (1, `VStretch()),
	`HSquash (
	    `VBox (
		`Left (`Label (`opt(`boldFont), _("License Agreement"))),
		`HSquash(`MinSize (
		    60,
		    (text_mode ? 9:13),
		    `Left (`ReplacePoint (`id (`base_license_rp), `Empty()))
		)),
		`VSpacing (text_mode ? 0.1 : 0.5),
		`MinHeight (1, `HBox (
		    `Left (`CheckBox (
			// TRANSLATORS: check-box
			`id (`license_agreement), `opt (`notify), _("I Do &Agree to the License Terms."), InstData::product_license_accepted
		    )),
		    `VStretch (),
		    // TRANSLATORS: button label
		    `Right (`PushButton (`id (`show_fulscreen_license), _("&Show License...")))
		))
	    )
	),
	`VWeight (3, `VStretch())
    );

    term AllLicensesDialog () {
	return `MinHeight ((text_mode ? 20 : 25), `VBox (
	    `Left (`HBox (
		Icon::Simple ("yast-license"),
		// TRANSLATORS: dialog caption
		`Heading (_("License Agreement"))
	    )),
	    `VSpacing (text_mode ? 0.1 : 0.5),
	    `HSpacing (60),
	    `ReplacePoint (`id (`full_screen_license_rp), `Empty()),
	    `PushButton (`id (`close), Label::OKButton())
	));
    }

    string help_text		= "";
    // help text (language dependent packages) - at the end of help
    string packages_help	= _("<p>
Additional packages with support for the selected primary and secondary languages will be installed. Packages no longer needed will be removed.
</p>");

    if (Stage::initial ())
    {
	// help text for initial (first time) language screen
	help_text = _("<p>
Choose the <b>Language</b> to use during installation and for
the installed system.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
Click <b>Next</b> to proceed to the next dialog.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
Nothing will happen to your computer until you confirm
all your settings in the last installation dialog.
</p>
");
	// help text, continued
	help_text = help_text + _("<p>
You can select <b>Abort Installation</b> at any time to abort the
installation process.
</p>
");
    }
    else
    {
	// different help text when called after installation
	// in an installed system
	help_text = _("<p>
Choose the new <b>Language</b> for your system.
</p>\n");
    }

    // Screen title for the first interactive dialog

    Wizard::SetContents (heading_text, contents, help_text,
	argmap["enable_back"]:true , argmap["enable_next"]:true);
    Wizard::EnableAbortButton ();

    UI::ChangeWidget (`id (`language), `Value, language);

    if (Keyboard::user_decision == true) {
	UI::ChangeWidget (`id (`keyboard), `Value, Keyboard::current_kbd);
    } else {
	string kbd = Keyboard::GetKeyboardForLanguage (language, "english-us");
	UI::ChangeWidget (`id (`keyboard), `Value, kbd);
    }

    Wizard::SetTitleIcon ("yast-language");

    // Get the user input.
    //
    any ret = nil;

    UI::SetFocus(`id(`language));

    string keyboard = "";
    boolean license_acc = nil;

    boolean LicenseAccepted () {
	if (license_acc == true) {
	    return true;
	} else {
	    UI::SetFocus (`id (`license_agreement));
	    Report::Message (_("License needs to be accepted"));
	    return false;
	}    
    }


    void ReadCurrentUIState () {
	language = (string) UI::QueryWidget (`id (`language), `Value);
	keyboard = (string) UI::QueryWidget (`id (`keyboard), `Value);
	license_acc = (boolean) UI::QueryWidget (`id (`license_agreement), `Value);
    }

    // Returns true if the dialog needs redrawing
    boolean SetLanguageIfChanged (any ret) {
	// Only inst-sys and only if a language has been changed right now
	// and the new language is not the initial one (that one is already downloaded by Linuxrc)
	if (Stage::initial() && ret == `language) {
	    if (InstData::initial_installation_language != language) {
		WFM::call ("integrate_translation_extension", [$["requested_language":language]]);
	    } else {
		y2milestone ("Skipping downloading %1 extension again (initial language)", InstData::initial_installation_language);
	    }
	}

	if (language != Language::language) {
	    y2milestone ("Language changed from %1 to %2", Language::language, language);
	    Timezone::ResetZonemap ();

	    // Set it in the Language module.
	    Language::Set (language);
	}

	// Check and set CJK languages
	if (Stage::initial () || Stage::firstboot ()) {
	    if (ret == `language &&
		Language::CJKLanguage (language) &&
		!Language::CJKLanguage (preselected) &&
		Language::GetTextMode ()) {
		// popup message (user selected CJK language in text mode)
		Popup::Message (_("The selected language cannot be used in text mode. English is used for
installation, but the selected language will be used for the new system."));

		    Language::WfmSetGivenLanguage ("en_US");
	    } else if (ret == `language) {
		Console::SelectFont (language);
		Language::WfmSetLanguage ();
	    }
	}

	if (ret == `language) {
	    // Display newly translated dialog.
	    Wizard::SetFocusToNextButton();
	    return true;
	}

	if (ret == `next) {
	    Keyboard::Set (keyboard);

	    // Language has been set already.
	    // On first run store users decision as default.
	    y2milestone("Resetting to default language");
	    Language::SetDefault();

	    Timezone::SetTimezoneForLanguage (language);

	    if (!Stage::initial () && !Mode::update ()) {
		// save settings (rest is saved in LanguageWrite)
		Keyboard::Save (true);
		Timezone::Save ();
	    }

	    // Bugzilla #354133
	    y2milestone ("Adjusting package and text locale to %1", language);
	    Pkg::SetPackageLocale (language);
	    Pkg::SetTextLocale (language);

	    y2milestone ("Language: '%1', system encoding '%2'", language, WFM::GetEncoding());
	}

	return false;
    }

    ProductLicense::ShowLicenseInInstallation (`base_license_rp);

    // bugzilla #206706
    if (Mode::autoinst()) {
	return `auto;
    }

    // Store the initial language
    if (InstData::initial_installation_language == nil) {
	InstData::initial_installation_language = Language::language;
    }

    while (true) {
	ret = UI::UserInput();
	y2milestone ("UserInput() returned %1", ret);

	if (ret == `back) {
	    break;

	} else if (ret == `abort && Popup::ConfirmAbort (`painless)) {
	    Wizard::RestoreNextButton();
	    ret = `abort;
	    break;

	} else if (ret == `keyboard) {
	    Keyboard::user_decision = true;

	} else if (ret == `license_agreement) {
	    InstData::product_license_accepted = (boolean) UI::QueryWidget (`id (`license_agreement), `Value);

	} else if (ret == `next || (ret == `language && ! Mode::config ())) {
	    ReadCurrentUIState();

	    if (ret == `next ) {
		if (! LicenseAccepted ())
		    continue;

		if (!Language::CheckIncompleteTranslation (language))
		    continue;

		if (Stage::initial())
		    Language::CheckLanguagesSupport (language);
	    }

	    if (SetLanguageIfChanged (ret)) {
		ret = `again;
		break;
	    }

	    if (ret == `next) break;
	} else if (ret == `show_fulscreen_license) {
	    UI::OpenDialog (AllLicensesDialog());
	    ProductLicense::ShowFullScreenLicenseInInstallation (`full_screen_license_rp);
	    UI::CloseDialog();
	}
    }

    return (symbol) ret;
}
