/**
 * File:
 *	inst_complex_welcome.ycp
 *
 * Module:
 *	Installation
 *
 * Authors:
 *	Klaus   KÃ¤mpf <kkaempf@suse.de>
 *	Michael Hager <mike@suse.de>
 *	Stefan  Hundhammer <sh@suse.de>
 *	Thomas Roelz <tom@suse.de>
 *	Jiri Suchomel <jsuchome@suse.cz>
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	This client shows main dialog for choosing the language,
 *	keyboard and accepting the license.
 *
 * Attention:
 *	This is still work in progress ...
 *
 * $Id:$
 *
 */
{
    textdomain "installation";

    import "Console";
    import "GetInstArgs";
    import "Keyboard";
    import "Label";
    import "Language";
    import "Mode";
    import "Popup";
    import "ProductFeatures";
    import "Report";
    import "Stage";
    import "Timezone";
    import "Wizard";
    import "Icon";
    import "InstData";
    import "ProductLicense";
    import "InstExtensionImage";

    string language = Language::language;

    /**
     * check if selected language has support on media (F301238)
     * show a warning when not
     */
    define void check_languages_support (string selected_language) {

	string linguas = (string) SCR::Read (.content.LINGUAS);

	if (linguas == nil) {
	    y2warning ("No LINGUAS tag defined in content file");
	    return;
	}

	y2milestone ("content LINGUAS %1", linguas);
	list <string> all_linguas = splitstring (linguas, " ");
	string language_short = substring (selected_language, 0, 2);

	if (!contains (all_linguas, selected_language) && !contains (all_linguas, language_short)) {
	    y2milestone ("Language %1 is not fully supported", selected_language);
	    // popup message
	    Popup::Message (_("Only minimal support for the selected language is included on the media.
Add the Language Add-On CD as an additional repository to get better support
for this language."));
	}
    }

    list <string> available_lang_filenames = [];

    string GetLanguageExtensionFilename (string language) {
	list <string> check_for_languages = [language];

	// 'en_US' ? add also 'en'
	if (size (language) > 2) {
	    check_for_languages = add (check_for_languages, substring (language, 0, 2));
	}

	// Default fallback
	string filename = "root.en_US";

	foreach (string one_language, check_for_languages, {
	    if (contains (available_lang_filenames, one_language)) {
		filename = sformat ("root.%1", one_language);
		y2milestone ("Using %1 for %2", filename, language);
		break;
	    }
	});

	return filename;
    }

    /**
     * Finds out the list of supported languages
     */
    list <string> GetListOfSupportedLangExtensions () {
	list <string> ret = [];

	// SUPPLANGS in content file
	string supplangs = (string) SCR::Read (.content.SUPPLANGS);

	if (supplangs != nil) {
	    ret = splitstring (supplangs, " ");

	    ret = filter (string one_supplang, ret, {
		return (one_supplang != nil && one_supplang != "");
	    });

	    return ret;
	}

	// Fallback: using list of trans-stats
	y2milestone ("No SUPPLANGS defined, using a fallback");
	map cmd = (map) WFM::Execute (.local.bash_output, "ls -1 /usr/lib/YaST2/trans/ | sed 's/\.status//'");

	if (cmd["exit"]:-1 != 0) {
	    y2error ("Cannot find out list of languages: %1", cmd);
	    return [];
	}

	// Empty list of trans stats
	string langs_s = cmd["stdout"]:"";
	if (langs_s == nil || langs_s == "") {
	    y2milestone ("Empty list: %1", langs_s);

	    return [];
	}

	// Newline-separated langs
	ret = splitstring (langs_s, "\n");

	ret = filter (string one_supplang, ret, {
	    return (one_supplang != nil && one_supplang != "");
	});

	return ret;
    }

    // ------------------------------------- main part of the client -----------

    map argmap = GetInstArgs::argmap();

    // Check if the current call should be treated as the first run (3rd param).
    // In this case if the user exits with next the the current setting
    // will be made the default that is restored with "Reset to defaults".
    //
    boolean set_default = argmap["first_run"]:"no" == "yes";
    y2milestone("set_default: %1", set_default );

    string preselected = Language::preselected;

    list<string>languages	= splitstring (Language::languages, ",");

    // filter the primary language from the list of secondary ones:
    languages	= filter (string l, languages, ``(l != language));


    // Build the contents of the dialog.

    // build up language selection box
    // with the default selection according to Language::language

    // set up selection list with default item

    boolean text_mode	= Language::GetTextMode ();

   /* ----------------------------------------------------------------------
    * Build dialog
    * ----------------------------------------------------------------------*/
    // heading text
    string heading_text = _("Languages");

    // sort language by ASCII with help of a map
    // $[ "ascii-name" : [ "user-readable-string", "code" ], ...]
    // the "user-readable-string" is either ascii or utf8, depending
    // on textmode probed above (workaround because there isn't any
    // usable console font for all languages).

    map<string,list> languageselsort = mapmap (
	string lang_code, list lang_info, Language::Selection(), {
	    string key	= lang_info [1]:lang_code;
	    return $[
		key		: [
		    lang_info[text_mode ? 1 : 0]:"",
		    lang_code,
		    lang_info[2]:key
		]
	    ];
	}
    );

    // mapping of language name (translated) to language code
    map lang2code		= $[];
    // list of language names (translated)
    list<string> lang_list	= [];
    foreach (any name, list codelist, languageselsort, {
	lang2code [codelist[2]:""]	= codelist[1]:"";
	lang_list	= add (lang_list, codelist[2]:"");
    });

    term languagesel = `ComboBox (
	`id (`language),
	`opt (`notify),
	_("&Language"),
	maplist (any name, list codelist, languageselsort, {
		return `item (
		    `id (codelist[1]:""),
		    codelist[0]:""//,
		    //(language == codelist[1]:"")
		);
	})
    );

    map<string, string> keyb_selection = Keyboard::Selection();
    string keyb = "";

    list <term> keyb_items = maplist (any name, list codelist, languageselsort, {
	keyb = Keyboard::GetKeyboardForLanguage (codelist[1]:"", "english-us");

	return `item (
	    `id (keyb),
	    keyb_selection[keyb]:""
	);
    });
    keyb_items = toset (keyb_items);
    

    term keyboardsel = `ComboBox (
	`id (`keyboard),
	`opt (`notify),
	_("&Keyboard Layout"),
	keyb_items
    );

    if (Stage::firstboot ())
	languagesel = `ComboBox (`id(`language), `opt(`notify), _("&Language"),
	    maplist (string trans_lang, lsort (lang_list), {
		string code	= lang2code [trans_lang]:"";
		return `item (`id (code), trans_lang, language == code);
	    })
	);

    // this type of contents will be shown only for initial installation dialog
    term contents = `VBox (
	`VWeight (3, `VStretch()),
	`HSquash (`VBox (
	    `HBox (
		`HSquash (Icon::Simple ("yast-language")),
		`HSpacing (2),
		`Left (languagesel)
	    ),
	    `VSpacing (1),
	    `HBox (
		`HSquash (Icon::Simple ("yast-keyboard")),
		`HSpacing (2),
		`Left (keyboardsel)
	    )
	)),
	`VWeight (1, `VStretch()),
	`HSquash (
	    `VBox (
		`Left (`Label (`opt(`boldFont), _("License Agreement"))),
		`HSquash(`MinSize (
		    60,
		    (text_mode ? 9:13),
		    `Left (`ReplacePoint (`id (`base_license_rp), `Empty()))
		)),
		`VSpacing (text_mode ? 0.1 : 0.5),
		`MinHeight (1, `HBox (
		    `Left (`CheckBox (
			// TRANSLATORS: check-box
			`id (`license_agreement), `opt (`notify), _("I Do &Agree to the License Terms."), InstData::product_license_accepted
		    )),
		    `VStretch (),
		    // TRANSLATORS: button label
		    `Right (`PushButton (`id (`show_fulscreen_license), _("&Show In Full-Screen...")))
		))
	    )
	),
	`VWeight (3, `VStretch())
    );

    term FullScreenLicenseDialog () {
	return `MinHeight ((text_mode ? 20 : 25), `VBox (
	    `Left (`HBox (
		Icon::Simple ("yast-license"),
		// TRANSLATORS: dialog caption
		`Heading (_("License Agreement"))
	    )),
	    `VSpacing (text_mode ? 0.1 : 0.5),
	    `HSpacing (60),
	    `ReplacePoint (`id (`full_screen_license_rp), `Empty()),
	    `PushButton (`id (`close), Label::OKButton())
	));
    }

    string help_text		= "";
    // help text (language dependent packages) - at the end of help
    string packages_help	= _("<p>
Additional packages with support for the selected primary and secondary languages will be installed. Packages no longer needed will be removed.
</p>");

    if (Stage::initial ())
    {
	// help text for initial (first time) language screen
	help_text = _("<p>
Choose the <b>Language</b> to use during installation and for
the installed system.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
Click <b>Next</b> to proceed to the next dialog.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
Nothing will happen to your computer until you confirm
all your settings in the last installation dialog.
</p>
");
	if (set_default)
	{
	    // help text, continued
	    help_text = help_text + _("<p>
You can select <b>Abort Installation</b> at any time to abort the
installation process.
</p>
");
	}
    }
    else
    {
	// different help text when called after installation
	// in an installed system
	help_text = _("<p>
Choose the new <b>Language</b> for your system.
</p>\n");
    }

    // Screen title for the first interactive dialog

    Wizard::SetContents (heading_text, contents, help_text,
	argmap["enable_back"]:true , argmap["enable_next"]:true);
    Wizard::EnableAbortButton ();

    UI::ChangeWidget (`id (`language), `Value, language);

    if (Keyboard::user_decision == true) {
	UI::ChangeWidget (`id (`keyboard), `Value, Keyboard::current_kbd);
    } else {
	string kbd = Keyboard::GetKeyboardForLanguage (language, "english-us");
	UI::ChangeWidget (`id (`keyboard), `Value, kbd);
    }

    Wizard::SetTitleIcon ("yast-language");

    // Get the user input.
    //
    any ret = nil;

    UI::SetFocus(`id(`language));

    // adapt keyboard for language?
    boolean kbd_adapt = (set_default && !Mode::config ());
    // adapt timezone for language?
    boolean tmz_adapt = (set_default && !Mode::config ());

    string keyboard = "";
    boolean license_acc = nil;

    boolean LicenseAccepted () {
	if (license_acc == true) {
	    return true;
	} else {
	    UI::SetFocus (`id (`license_agreement));
	    Report::Message (_("License needs to be accepted"));
	    return false;
	}    
    }

    boolean CheckIncompleteTranslation () {
	if (Language::IncompleteTranslation (language)) {
	    // continue/cancel message
	    return Popup::ContinueCancel (_("Translation of the primary language is not complete.
Some texts may be displayed in English.
"));
	} else {
	    return true;
	}
    }

    void ReadCurrentUIState () {
	language = (string) UI::QueryWidget (`id (`language), `Value);
	keyboard = (string) UI::QueryWidget (`id (`keyboard), `Value);
	license_acc = (boolean) UI::QueryWidget (`id (`license_agreement), `Value);
    }

    // Returns true if the dialog needs redrawing
    boolean SetLanguageIfChanged (any ret) {
	// Only inst-sys and only if a language has been changed right now
	// and the new language is not the initial one (that one is already downloaded by Linuxrc)
	if (Stage::initial() && ret == `language) {
	    if (InstData::initial_installation_language != language) {
		// TRANSLATORS: busy message
		UI::OpenDialog (`Label (_("Downloading installation system language extension...")));
		// FATE #302955: Split translations out of installation system
		InstExtensionImage::DownloadAndIntegrateExtension (GetLanguageExtensionFilename (language));
		UI::CloseDialog();
	    } else {
		y2milestone ("Skipping downloading %1 extension again (initial language)", InstData::initial_installation_language);
	    }
	}

	if (language != Language::language) {
	    y2milestone ("Language changed from %1 to %2", Language::language, language);

	    if (set_default) {
		Timezone::ResetZonemap ();
	    }

	    // Set it in the Language module.
	    Language::Set (language);
	}

	// Check and set CJK languages
	if (Stage::initial () || Stage::firstboot ()) {
	    if ((set_default && ret == `language ||
		(!set_default && ret == `next)) &&
		Language::CJKLanguage (language) &&
		!Language::CJKLanguage (preselected) &&
		Language::GetTextMode ()) {
		// popup message (user selected CJK language in text mode)
		Popup::Message (_("The selected language cannot be used in text mode. English is used for
installation, but the selected language will be used for the new system."));

		    Language::WfmSetGivenLanguage ("en_US");
	    } else if (ret == `next || (set_default && ret == `language)) {
		Console::SelectFont (language);
		Language::WfmSetLanguage ();
	    }
	}

	if (ret == `language && set_default) {
	    // Display newly translated dialog.
	    Wizard::SetFocusToNextButton();
	    return true;
	}

	if (ret == `next) {
	    Keyboard::SetLanguage (keyboard);

	    // Language has been set already.
	    // On first run store users decision as default.
	    if (set_default) {
		y2milestone("Resetting to default language");
		Language::SetDefault();
	    }

	    if (tmz_adapt) {
		Timezone::SetTimezoneForLanguage (language);
	    } else {
		Timezone::user_decision = true;
	    }

	    if (!Stage::initial () && !Mode::update ()) {
		// save settings (rest is saved in LanguageWrite)
		if (kbd_adapt)
		    Keyboard::Save (true);
		if (tmz_adapt)
		    Timezone::Save ();
	    }

	    // Bugzilla #354133
	    y2milestone ("Adjustign package and text locale to %1", language);
	    Pkg::SetPackageLocale (language);
	    Pkg::SetTextLocale (language);

	    y2milestone ("Language: '%1', system encoding '%2'", language, WFM::GetEncoding());
	}

	return false;
    }

    ProductLicense::ShowLicenseInInstallation (`base_license_rp);

    // bugzilla #206706
    if (Mode::autoinst()) {
	return `auto;
    }

    // FATE #302955: Split translations out of installation system
    // [ "en_US", "en_GB", "de", "cs" ]
    // they are in content.SUPPLANGS or as files in /usr/lib/YaST2/trans
    if (available_lang_filenames == nil || available_lang_filenames == []) {
	available_lang_filenames = GetListOfSupportedLangExtensions();
	y2milestone ("Supported languages are: %1", available_lang_filenames);
    }

    // Store the initial language
    if (InstData::initial_installation_language == nil) {
	InstData::initial_installation_language = Language::language;
    }

    while (true) {
	ret = UI::UserInput();
	y2milestone ("UserInput() returned %1", ret);

	if (ret == `back) {
	    break;

	} else if (ret == `abort && Popup::ConfirmAbort (`painless)) {
	    Wizard::RestoreNextButton();
	    ret = `abort;
	    break;

	} else if (ret == `keyboard) {
	    Keyboard::user_decision = true;

	} else if (ret == `license_agreement) {
	    InstData::product_license_accepted = (boolean) UI::QueryWidget (`id (`license_agreement), `Value);

	} else if (ret == `next || (ret == `language && ! Mode::config ())) {
	    ReadCurrentUIState();

	    if (ret == `next ) {
		if (! LicenseAccepted ())
		    continue;

		if (! CheckIncompleteTranslation())
		    continue;

		if (Stage::initial())
		    check_languages_support (language);
	    }

	    if (SetLanguageIfChanged (ret)) {
		ret = `again;
		break;
	    }

	    if (ret == `next) break;
	} else if (ret == `show_fulscreen_license) {
	    UI::OpenDialog (FullScreenLicenseDialog());
	    ProductLicense::ShowFullScreenLicenseInInstallation (`full_screen_license_rp);
	    UI::CloseDialog();
	}
    }

    return (symbol) ret;
}
