/**
 * File:	clients/inst_system_analysis.ycp
 * Package:	Installation
 * Summary:	Installation mode selection, system analysis
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Lukas Ocilka <locilka@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "installation";

import "Arch";
import "GetInstArgs";
import "Hotplug";
import "InstData";
import "Kernel";
import "Packages";
import "Popup";
import "Product";
import "Progress";
import "Report";
import "Storage";
import "StorageControllers";
import "StorageDevices";
import "Wizard";

include "installation/misc.ycp";
include "packager/storage_include.ycp";

    // This dialog in not interactive
    // always return `back when came from the previous dialog
    if (GetInstArgs::going_back()) {
	return `back;
    }

    // Function definitions -->

    // --------------------------------------------------------------
    //				      USB
    // --------------------------------------------------------------
    boolean ActionUSB () {
	Hotplug::StartUSB ();

	return true;
    }
    
    // --------------------------------------------------------------
    //				FireWire (ieee1394)
    // --------------------------------------------------------------
    boolean ActionFireWire () {
	Hotplug::StartFireWire ();

	return true;
    }
    
    // --------------------------------------------------------------
    //				    Floppy
    // --------------------------------------------------------------
    boolean ActionFloppyDisks () {
	StorageDevices::FloppyReady ();

	return true;
    }

    boolean found_controllers = true;
    
    // --------------------------------------------------------------
    //			     Hard disk controllers
    // 1. Probe
    // 2. Initialize (module loading)
    // --------------------------------------------------------------
    // In live_eval mode, all modules have been loaded by linuxrc. But
    // they are loaded by StorageControllers::Initialize(). Well, there
    // also was another reason for skipping StorageControllers::Probe ()
    // but nobody seems to remember more.
    // --------------------------------------------------------------
    boolean ActionHHDControllers () {
	found_controllers = (StorageControllers::Probe () > 0);

	return true;
    }
    
    // --------------------------------------------------------------
    // Don't abort or even warn if no storage controllers can be
    // found.  Disks might be detected even without proper knowledge
    // about the controller.  There's a warning below if no disks were
    // found.
    // --------------------------------------------------------------
    boolean ActionLoadModules () {
	StorageControllers::Initialize ();
	
	return true;
    }
    
    // --------------------------------------------------------------
    //				  Hard disks
    // --------------------------------------------------------------
    boolean ActionHDDProbe () {
	map targetMap = StorageDevices::Probe (true);

	if (size (targetMap) == 0) {
	    if (found_controllers) {
		// pop-up error report
		Report::Error(_("No hard disks were found for the installation.
Please check your hardware!
"));
	    } else {
		// pop-up error report
		Report::Error(_("No hard disks and no hard disk controllers were
found for the installation.
Check your hardware.
"));
	    }

	    return false;
	}
	
	return true;
    }

    boolean EvaluateUpdatePossibilities () {
	y2milestone ("Product flags: %1", Product::flags);
	if (contains (Product::flags, "update") || Kernel::GetSuSEUpdate ()) {
	    InstData::offer_update = true;
	}

	return true;
    }

    boolean SearchForLinuxPartitions () {
	if (Storage::HaveLinuxPartitions ()) {
	    InstData::have_linux = true;
	}
	
	return true;
    }

    boolean packager_initialized = false;

    boolean InitInstallationRepositoriesReal () {
	Packages::InitializeCatalogs ();
	if (Packages::InitFailed ()) {
	    // popup message
	    Popup::Message (_("Failed to initialize the software repositories.
Aborting the installation."));
	    return false;
	}

	packager_initialized = true;
	Packages::InitializeAddOnProducts ();

	return true;
    }

    boolean InitInstallationRepositories () {
	//boolean progress_orig = Progress::set (false);
	//y2milestone ("Pregress was: %1", progress_orig);

	boolean ret = InitInstallationRepositoriesReal();

	//y2milestone ("Adjusting progress: %1", progress_orig);
	//Progress::set (progress_orig);

	return ret;
    }

    // <-- Function definitions



map display_info = UI::GetDisplayInfo();
boolean in_textmode = display_info["TextMode"]:false;

string GenerateIconID (any icon_whatever) {
    return sformat ("icon_%1", tostring (icon_whatever));
}

/**
 * Function creates term containing radio button and icon
 * based on current display (graphical/textual)
 *
 * @param string radio button label
 * @param symbol radio button id
 * @param string path to an image
 * @boolean whether selected (more than one buttons selected don't make sense!)
 */
 term CreateRadioButtonTerm (string button_label, symbol button_id, string icon_file, boolean selected) {
    return `HBox (
	(in_textmode ?
	    `Empty()
	    :
	    `HWeight (
		1,
		(icon_file == "" ?
		    `Empty()
		    :
		    `Image (`id (GenerateIconID (button_id)), icon_file, "")
		)
	    )
	),
	`HWeight(
	    5,
	    `Left (`RadioButton (
		`id (button_id),
		`opt(`notify),
		button_label,
		selected
	    ))
	)
    );
}



Wizard::SetContents (_("Analyzing the Computer"), `Empty (), "", false, false);
Wizard::SetTitleIcon ("yast-controller");

// Do hardware probing
//
// This must happen before submodule descriptions are initialized; module
// constructors might depend on it.
// In autoinst mode, this has been called already.

list <string> actions_todo      = [];
list <string> actions_doing     = [];
list          actions_functions = [];
list <string> visible_icons     = [];
list <string> invisible_icons   = [];

y2milestone ("Probing done: %1", Installation::probing_done);
if (! Installation::probing_done)
{
	if (!(Arch::s390 () || Arch::board_iseries ())) {
	    // TRANSLATORS: progress step
	    actions_todo = add (actions_todo, _("Probe USB devices"));
	    // TRANSLATORS: progress step
	    actions_doing = add (actions_doing, _("Probing USB devices..."));
	    actions_functions = add (actions_functions, ActionUSB);
	    visible_icons = add (visible_icons, "32x32/apps/yast-misc.png");
	    invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");

	    // TRANSLATORS: progress step
	    actions_todo = add (actions_todo, _("Probe FireWire devices"));
	    // TRANSLATORS: progress step
	    actions_doing = add (actions_doing, _("Probing FireWire devices..."));
	    actions_functions = add (actions_functions, ActionFireWire);
	    visible_icons = add (visible_icons, "32x32/apps/yast-system.png");
	    invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");

	    // TRANSLATORS: progress step
	    actions_todo = add (actions_todo, _("Probe floppy disks devices"));
	    // TRANSLATORS: progress step
	    actions_doing = add (actions_doing, _("Probing floppy disks devices..."));
	    actions_functions = add (actions_functions, ActionFloppyDisks);
	    visible_icons = add (visible_icons, "32x32/apps/yast-bootfloppy.png");
	    invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");
        }

        // TRANSLATORS: progress step
        actions_todo = add (actions_todo, _("Probe hard disk controllers"));
        // TRANSLATORS: progress step
        actions_doing = add (actions_doing, _("Probing hard disk controllers..."));
        actions_functions = add (actions_functions, ActionHHDControllers);
	visible_icons = add (visible_icons, "32x32/apps/yast-controller.png");
	invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");
	

        // TRANSLATORS: progress step
        actions_todo = add (actions_todo, _("Load kernel modules for hard disk controllers"));
        // TRANSLATORS: progress step
        actions_doing = add (actions_doing, _("Loading kernel modules for hard disk controllers..."));
        actions_functions = add (actions_functions, ActionLoadModules);
	visible_icons = add (visible_icons, "32x32/apps/yast-kdump.png");
	invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");

        // TRANSLATORS: progress step
        actions_todo = add (actions_todo, _("Probe hard disks"));
        // TRANSLATORS: progress step
        actions_doing = add (actions_doing, _("Probing hard disks..."));
	actions_functions = add (actions_functions, ActionHDDProbe);
	visible_icons = add (visible_icons, "32x32/apps/yast-disk.png");
	invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");

	WFM::CallFunction("inst_features", []);
}

// TRANSLATORS: progress step
actions_todo = add (actions_todo, _("Search for Linux partitions"));
// TRANSLATORS: progress step
actions_doing = add (actions_doing, _("Searching for Linux partitions..."));
actions_functions = add (actions_functions, SearchForLinuxPartitions);
visible_icons = add (visible_icons, "32x32/apps/yast-inst-mode.png");
invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");

// TRANSLATORS: progress step
actions_todo = add (actions_todo, _("Evaluate update possibility"));
// TRANSLATORS: progress step
actions_doing = add (actions_doing, _("Evaluating update possibility..."));
actions_functions = add (actions_functions, EvaluateUpdatePossibilities);
visible_icons = add (visible_icons, "32x32/apps/msg_info.png");
invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");

// TRANSLATORS: progress step
actions_todo = add (actions_todo, _("Initialize package manager"));
// TRANSLATORS: progress step
actions_doing = add (actions_doing, _("Initializing package manager..."));
actions_functions = add (actions_functions, InitInstallationRepositories);
visible_icons = add (visible_icons, "32x32/apps/yast-sw_source.png");
invisible_icons = add (invisible_icons, "32x32/apps/yast-vendor.png");



Progress::NewProgressIcons (
    // TRANSLATORS: dialog caption
    _("System Probing"),
    " ",
    size (actions_todo),
    actions_todo,
    actions_doing,
    // TRANSLATORS: dialog help
    _("Please wait while computer hardware and installed systems are being probed..."),
    [visible_icons, invisible_icons]
);

foreach (any run_function, actions_functions, {
    Progress::NextStage();

    // Bugzilla #298049
    // Allow to abort the probing
    any ui_ret = UI::PollInput();

    if (ui_ret == `abort) {
	y2milestone ("Abort pressed");

	if (Popup::ConfirmAbort (`painless)) {
	    y2warning ("User decided to abort the installation");
	    return `abort;
	}
    }

    y2milestone ("Running function: %1", run_function);

    boolean () run_this = (boolean()) (run_function);
    boolean ret = run_this();

    y2milestone ("Function %1 returned %2", run_function, ret);
});
Installation::probing_done = true;

Progress::Finish();
sleep (500);

if (! packager_initialized) {
    return `abort;
}

y2milestone ("Have Linux: %1, Offer Update: %2", InstData::have_linux, InstData::offer_update);

return `next;

/* EOF */
}
