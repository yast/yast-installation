/**
 * File:
 *  desktop_finish.ycp
 *
 * Module:
 *  Step of base installation finish
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "installation";

import "DefaultDesktop";
import "Directory";
import "Mode";
import "ProductFeatures";
import "FileUtils";
import "String";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map)WFM::Args(1);
}

y2milestone ("starting desktop_finish");
y2debug("func=%1", func);
y2debug("param=%1", param);

if (func == "Info")
{
    return (any)$[
	"steps" : 1,
	// progress step title
	"title" : _("Initializing default window manager..."),
	"when" : [ `installation, `autoinst ],
    ];
}
else if (func == "Write")
{
    boolean doc_server = false;
    // check who provides suse_help_viewer
    // if kdebase3-SuSE isn't installed by apache or apache2, set /etc/sysconfig/apache:DOC_SERVER

    if (
	(!(Pkg::IsProvided ("kdebase3-SuSE") || Pkg::IsSelected ("kdebase3-SuSE")))
	&&
	(!(Pkg::IsProvided ("kdebase4-openSUSE") || Pkg::IsSelected ("kdebase4-openSUSE")))
	&&
	    (Pkg::IsProvided ("apache2") || Pkg::IsSelected ("apache2")
	    || Pkg::IsProvided ("apache") || Pkg::IsSelected ("apache")))
    {
	doc_server = true;
    }

    // this detects WM and DM according to selected patterns and
    // installed packages
    if ( !Mode::update () )
    {
	map dd_map = DefaultDesktop::GetAllDesktopsMap ();

	string selected_desktop = DefaultDesktop::Desktop();
	y2milestone ("Selected desktop: %1", selected_desktop);

	if (selected_desktop == nil || selected_desktop == "")
	    selected_desktop = "gnome";

	string default_dm	= "";
	string default_wm	= "";
	string default_cursor	= "";

	list <string> desktop_order = [DefaultDesktop::Desktop(), "gnome", "kde", "kde3", "xfce", "min_x", "textmode"];

	boolean desktop_found = false;

	foreach (string d, desktop_order, {
		if (desktop_found)
		    break;

		foreach (string package, dd_map[d, "packages"]:[], {
		    if (Pkg::IsProvided (package) && (Pkg::PkgInstalled (package) || Pkg::IsSelected (package))) {
			y2milestone ("package %1 selected or installed", package);
			desktop_found = true;

			default_dm = dd_map[d, "logon"]:"";
			y2milestone ("Setting logon manager %1 - package selected", default_dm);

			default_wm = dd_map[d, "desktop"]:"";
			y2milestone ("Setting window manager %1 - package selected", default_wm);

			default_cursor = dd_map[d, "cursor"]:default_cursor;
			y2milestone ("Setting cursor theme %1 - package selected", default_cursor);
		    } else {
			y2milestone ("Package %1 for desktop %2 not selected or installed, trying next desktop...", package, d);
		    }
		});
	});

	y2milestone ("Default desktop: %1", default_wm);
	y2milestone ("Default logon manager: %1", default_dm);
	y2milestone ("Default cursor theme: %1", default_cursor);

	SCR::Write (.sysconfig.windowmanager.DEFAULT_WM, default_wm);
	SCR::Write (.sysconfig.windowmanager.X_MOUSE_CURSOR, default_cursor);
	SCR::Write (.sysconfig.windowmanager, nil);

	string dpmng_file = "/etc/sysconfig/displaymanager";
	// Creates an empty sysconfig file if it doesn't exist
	if (! FileUtils::Exists (dpmng_file) && FileUtils::Exists ("/usr/bin/touch")) {
	    y2milestone ("Creating file %1: %2",
		dpmng_file,
		SCR::Execute (.target.bash, sformat ("/usr/bin/touch '%1'",
		    String::Quote (dpmng_file)))
	    );
	}

	string dm_shutdown = ProductFeatures::GetStringFeature ("globals",
	    "displaymanager_shutdown");
	y2milestone ("Logon manager shutdown: %1", dm_shutdown);
	if (dm_shutdown != nil && dm_shutdown != "")
	{
	    SCR::Write (.sysconfig.displaymanager.DISPLAYMANAGER_SHUTDOWN,
		dm_shutdown);
	}

	y2milestone ("sysconfig/displaymanager/DISPLAYMANAGER=%1", default_dm);
	SCR::Write (.sysconfig.displaymanager.DISPLAYMANAGER, default_dm);
	SCR::Write (.sysconfig.displaymanager, nil);
    }


    if (doc_server)
    {
	SCR::Write (.sysconfig.apache.DOC_SERVER, doc_server);
	SCR::Write (.sysconfig.apache, nil);
    }
}
else
{
    y2error ("unknown function: %1", func);
    ret = nil;
}

y2debug("ret=%1", ret);
y2milestone("desktop_finish finished");
return ret;


} /* EOF */

