/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/inst_addon_update_sources.ycp
 * Package:	yast2-installation
 * Summary:	Add installation sources for online update, #163192
 * Authors:	Martin Vidner <mvidner@suse.cz>
 *
 * Assumptions:
 * - the sources will be saved afterwards
 * (this means that running this client alone will not work)
 */

{
textdomain "installation";

import "GetInstArgs";
import "PackageCallbacks";
import "Popup";
import "SourceManager";
import "Report";
import "Installation";
import "String";

include "packager/inst_source_dialogs.ycp";

if ( GetInstArgs::going_back())     // going backwards?
    return `auto;                   // don't execute this once more

map <string,string> aliases     = $[];

/**
 * @return the urls of known installation sources
 */
list<string> KnownUrls () {
    list<integer> src_ids = Pkg::SourceGetCurrent (true /*enabled only?*/);
    list<string> urls = maplist (integer src_id, src_ids, {
	map gendata = Pkg::SourceGeneralData (src_id);
	return gendata["url"]:"";
    });
    return urls;
}

/**
 * @return the installation sources to be added
 */
map <string, string> UpdateUrls () {
    map <string, string> urls = $[];
    list <map <string,any> > products = Pkg::ResolvableProperties ("", `product, "");

    foreach (map<string, any> p, products, {
	foreach (string u,  p["update_urls"]:[], {
	    // bnc #542792
	    // Repository name must be generated from product details
	    urls[u] = sformat (
		_("Updates for %1 %2"),
		p["display_name"]:p["name"]:p["summary"]:_("Unknown Product"),
		p["version"]:""
	    );
	    // alias should be simple (bnc#768624)
	    aliases[u]  = String::Replace ("update-" + p["display_name"]:p["name"]:"repo", " ", "-");
	});
    });

    return urls;
}


// feedback heading
string heading = _("Add-on Product Installation");
// feedback message
string message = _("Reading packages available in the repositories...");

// bugzilla #270899#c29
Pkg::TargetInitialize (Installation::destdir);
Pkg::TargetLoad();
Pkg::SourceStartManager (true);

list<string> knownUrls = KnownUrls ();
y2milestone ("sources known: %1", knownUrls);
map<string, boolean> is_known = listmap (string u, knownUrls, ``($[u: true]));

map <string, string> updateUrls = UpdateUrls ();
y2milestone ("sources for updates: %1", updateUrls);

map <string, string> addUrls = filter (string url, string name, updateUrls, ``( ! is_known[url]:false ));
y2milestone ("sources to add: %1", addUrls);

if (addUrls != $[])
{
    Popup::ShowFeedback (heading, message);

    foreach (string url, string name, addUrls, {
	boolean again = true;

	while (again) {
	    // BNC #557723: Repositories migh be created without access to network
	    // Libzypp must not probe the repo

	    string alias = aliases[url]:"";
	    if (alias == "")
	    {
	        // don't use spaces in alias (hard to use with zypper)
	        alias   = String::Replace((size(name) > 0 ? name : url), " ", "-");
	    }

	    map <string,any> repo_prop = $[
		"enabled"	: true,
		"autorefresh"	: true,
		"name"		: (size(name) > 0 ? name : url),
		"alias"		: alias,
		"base_urls"	: [url],
		"prod_dir"	: "/",
	    ];

	    integer srcid = Pkg::RepositoryAdd (repo_prop);
	    y2milestone ("got %1 from creating %2/%3", srcid, url, name);

	    // wrong srcid, must have failed
	    if (srcid == -1) {
		// popup error message
		// %1 represents the the error message details
		if (Popup::YesNo ( sformat(
		    _("An error occurred while connecting to the server.
Details: %1

Try again?"),
		    Pkg::LastError()
		))) {
		    // try again
		    url = editUrl (url);
		} else {
		    // abort
		    again = false;
		}

	    // everything is ok
	    } else {
		again = false;
	    }
	}
    });

    Popup::ClearFeedback ();
}

return `auto;

/* EOF */
}
