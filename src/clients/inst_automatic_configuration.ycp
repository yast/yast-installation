/**
 * File:	clients/inst_automatic_configuration.ycp
 * Package:	installation
 * Summary:	Automatic configuration instead of the second stage
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id:$
 *
 * @see http://visnov.blogspot.com/2008/02/getting-rid-of-2nd-stage-of.html
 */

{
    import "Mode";
    import "Stage";
    import "FileUtils";
    import "Directory";
    import "GetInstArgs";
    import "Wizard";
    import "Progress";

    textdomain "installation";

    if (GetInstArgs::going_back()) {
	y2milestone ("Going back, nothing to do here...");
	return `auto;
    }

    boolean test_mode = false;

    if (size (WFM::Args()) > 0 && is (WFM::Args(0), string)) {
	y2milestone ("Args: %1", WFM::Args());
	if (WFM::Args(0) == "test")
	    test_mode = true;
    }

    if (test_mode) Wizard::CreateDialog();

    y2milestone ("automatic_configuration started");

// TODO: read this from control file
// (at least the list of modules in proposals)
    list <map <string, any> > proposal_scripts_to_call = [
	// probably needed
	$[
	    "label":_("Initialization..."),
	    "type":"scripts",
	    "items":["initialization", "netprobe", "rpmcopy_secondstage"]
	],

	// network proposal
	$[
	    "label":_("Configuring network..."),
	    "type":"proposals",
	    "items":["lan", "general", "dsl", "isdn", "modem", "remote", "firewall"]
	],

	// hardware proposal
	$[
	    "label":_("Configuring hardware..."),
	    "type":"proposals",
	    "items":["x11", "printer", "sound", "tv"]
	],

	// probably needed
	$[
	    "label":_("Finishing configuration..."),
	    "type":"scripts",
	    "items":["addon_update_sources", "inst_extrasources", "suseconfig", "save_hardware_status"]
	],
    ];

    /**
     * Prepares the list of installation scripts to be executed.
     * This comes from control file where scripts are mentioned without the leading
     * "inst_" but they are actually named that way ("inst_something").
     *
     * @example ["aa", "inst_bb"] -> ["inst_aa", "inst_bb"]
     */
    list <string> NormalizeScriptNames (list <string> names) {
	list <string> ret_names = [];

	foreach (string one_name, names, {
	    if (regexpmatch (one_name, "^inst_")) {
		ret_names = add (ret_names, one_name);
	    } else {
		ret_names = add (ret_names, "inst_" + one_name);
	    }
	});

	return ret_names;
    }

    /**
     * Similar to NormalizeScriptNames but it add "_proposal" instead if "inst_".
     *
     * @example ["aa", "bb_proposal"] -> ["aa_proposal", "bb_proposal"]
     */
    list <string> NormalizeProposalNames (list <string> names) {
	list <string> ret_names = [];

	foreach (string one_name, names, {
	    if (regexpmatch (one_name, "_proposal$")) {
		ret_names = add (ret_names, one_name);
	    } else {
		ret_names = add (ret_names, one_name + "_proposal");
	    }
	});

	return ret_names;
    }

    void HandleExceptions (string proposal_name) {
	if (proposal_name == "x11_proposal" || proposal_name == "x11") {
	    if (! UI::TextMode()) {
		y2milestone ("Printing >don't panic<!");
		SCR::Write (.dev.tty.stderr,
		    // TRANSLATORS: this message is displayed on console when X11 configuration
		    // switches from running X to console. Sometimes it looks like
		    // the installation has failed.
		    _("

***********************************************************

Do not panic!

X11 Configuration must have switched to console for a while
to do detect your videocard properly...

***********************************************************
")
		);
	    }
	}
    }

    integer current_sub_step = 0;
    integer current_step = 0;

    void NextStep () {
	current_sub_step = current_sub_step + 1;
	current_step = current_step + 1;

	if (UI::WidgetExists (`id ("one_set_progress")))
	    UI::ChangeWidget (`id ("one_set_progress"), `Value, current_sub_step);
	else
	    y2error ("Widget one_set_progress doesn't exist");

	if (UI::WidgetExists (`id ("autoconf_progress")))
	    UI::ChangeWidget (`id ("autoconf_progress"), `Value, current_step);
	else
	    y2error ("Widget autoconf_progress doesn't exist");
    }

    void DummyFunction () {
	sleep (random (1600));
    }

    void CallScripts (list <string> scripts_to_call) {
	y2milestone ("Scripts to call: %1", scripts_to_call);

	scripts_to_call = NormalizeScriptNames (scripts_to_call);

	foreach (string one_script, scripts_to_call, {
	    y2milestone ("Calling script %1", one_script);
	    NextStep();
	    boolean progress_before = Progress::set (false);

	    any result = (
		test_mode ?
		    DummyFunction()
		    :
		    WFM::CallFunction (one_script, [ $["AutomaticConfiguration":true] ])
	    );

	    Progress::set (progress_before);
	    y2milestone ("Script %1 returned %2", one_script, result);
	});
    }

    void CallProposals (list <string> proposals_to_call) {
	y2milestone ("Scripts to call: %1", proposals_to_call);

	proposals_to_call = NormalizeProposalNames (proposals_to_call);

	foreach (string one_proposal, proposals_to_call, {
	    y2milestone ("Calling script %1 MakeProposal", one_proposal);
	    NextStep();
	    boolean progress_before = Progress::set (false);

	    HandleExceptions (one_proposal);
	    any result = (
		test_mode ?
		    DummyFunction()
		    :
		    WFM::CallFunction (one_proposal, ["MakeProposal", $[ "AutomaticConfiguration":true ]])
	    );

	    Progress::set (progress_before);
	    y2milestone ("Script %1 returned %2", one_proposal, result);
	});

	// TODO: handle errors, warnings ...
	// foreach (string one_proposal, proposals_to_call, {
	//    y2milestone ("Calling script %1 MakeProposal", one_proposal);
	//    any result = WFM::CallFunction (one_proposal, ["Description", $[ "AutomaticConfiguration":true ]]);
	//    y2milestone ("Script %1 returned %2", one_proposal, result);
	//});

	foreach (string one_proposal, proposals_to_call, {
	    y2milestone ("Calling script %1 Write", one_proposal);
	    NextStep();
	    boolean progress_before = Progress::set (false);

	    any result = (
		test_mode ?
		    DummyFunction()
		    :
		    WFM::CallFunction (one_proposal, ["Write", $[ "AutomaticConfiguration":true ]])
	    );

	    y2milestone ("Script %1 returned %2", one_proposal, result);
	});
    }

    integer nr_of_steps = 0;

    foreach (map one_autoconf_call, proposal_scripts_to_call, {
	nr_of_steps = nr_of_steps +
	    // Proposals have two steps, scripts only one
	    ((one_autoconf_call["type"]:"" == "proposals" ? 2:1) * size (one_autoconf_call["items"]:[]));
    });

    Wizard::SetContents (
	_("Automatic Configuration"),
	`VBox (
	    // faster progress
	    `ReplacePoint(
		`id ("rp_one_set_progress"),
		`ProgressBar (
		    `id ("one_set_progress"),
		    _("Preparing configuration..."),
		    100,
		    0
		)
	    ),
	    // overall-autoconf progress
	    `ProgressBar (
		`id ("autoconf_progress"),
		_("Creating automatic configuration..."),
		nr_of_steps,
		0
	    )
	),
	_("<p>Installation is currently writing the automatic configuration. Please wait...</p>"),
	false, false
    );

    foreach (map one_autoconf_call, proposal_scripts_to_call, {
	string type = one_autoconf_call["type"]:"";

	integer nr_of_steps = ((one_autoconf_call["type"]:"" == "proposals" ? 2:1) * size (one_autoconf_call["items"]:[]));
	string label = one_autoconf_call["label"]:_("Automatic configuration...");

	y2milestone ("Steps: %1, Label: %2", nr_of_steps, label);

	// reset the faster prgress
	current_sub_step = 0;
	if (UI::WidgetExists (`id ("rp_one_set_progress"))) {
	    UI::ReplaceWidget (`id ("rp_one_set_progress"),
		`ProgressBar (
		    `id ("one_set_progress"),
		    label,
		    nr_of_steps,
		    0
		)
	    );
	} else {
	    y2error ("Widget rp_one_set_progress doesn't exist! Cannot provide useful progress...");
	    y2warning ("---------------------- UI DUMP ----------------------");
	    UI::DumpWidgetTree();
	    y2warning ("---------------------- UI DUMP ----------------------");
	}

	switch (type) {
	    case "scripts":
		CallScripts (one_autoconf_call["items"]:[]);
		break;
	    case "proposals":
		CallProposals (one_autoconf_call["items"]:[]);
		break;
	    y2error ("Unknown script type '%1'", type);
	}
    });

    y2milestone ("automatic_configuration finished");

//    Wizard::SetContents (
//	_("Automatic Configuration"),
//	`Label (_("Finishing configuration...")),
//	"",
//	false, false
//    );

    if (test_mode) Wizard::CloseDialog();

    return `auto;
}
