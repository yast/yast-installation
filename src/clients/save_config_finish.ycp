/**
 * File:
 *  save_config_finish.ycp
 *
 * Module:
 *  Step of base instalaltion finish
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id: printer_auto.ycp 20576 2004-12-15 15:00:18Z jsrain $
 *
 */

{

textdomain "installation";

import "Mode";
import "Mouse";
import "Timezone";
import "Language";
import "Keyboard";
//import "Display";
import "ProductFeatures";
import "AutoInstall";
import "Console";
import "Product";
import "Progress";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map)WFM::Args(1);
}

y2milestone ("starting save_config_finish");
y2debug("func=%1", func);
y2debug("param=%1", param);

if (func == "Info")
{
    return (any)$[
	"steps" : Mode::autoinst () ? 8 : 7,
	"when" : [ `installation, `update, `autoinst ],
    ];
}
else if (func == "Write")
{
    // progress step title
    Progress::Title (_("Saving mouse configuration..."));
    Mouse::Save();
    Progress::NextStep ();
    // progress step title
    Progress::Title (_("Saving time zone..."));
    Timezone::Save();
    Progress::NextStep ();
    // progress step title
    Progress::Title (_("Saving language..."));
    Language::Save();
    Progress::NextStep ();
    // progress step title
    Progress::Title (_("Saving keyboard configuration..."));
    Keyboard::Save(true);
    Progress::NextStep ();
    // progress step title
    Progress::Title (_("Saving product information..."));
    ProductFeatures::Save();
    if (Mode::autoinst ())
    {
	Progress::NextStep ();
	// progress step title
	Progress::Title (_("Saving automatical installation settings..."));
	AutoInstall::Save();
    }
    Progress::NextStep ();
    // progress step title
    Progress::Title (_("Saving console configuration..."));
    Console::Save();

    Progress::NextStep ();
    // progress step title
    Progress::Title (_("Configurign superuser's environment..."));
    SCR::Write (.sysconfig.suseconfig.CWD_IN_USER_PATH,
                contains (Product::flags, "usercwd") ? "yes" : "no");
    SCR::Write (.sysconfig.suseconfig, nil);
}
else
{
    y2error ("unknown function: %1", func);
    ret = nil;
}

y2debug("ret=%1", ret);
y2milestone("save_config_finish finished");
return ret;


} /* EOF */
