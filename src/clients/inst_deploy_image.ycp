{
import "Installation";
import "ImageInstallation";
import "Progress";
import "Wizard";
import "SourceManager";

textdomain "installation";

// There is nothing to do
if (! Installation::image_installation) {
    y2milestone ("No images have been selected");
    return `auto;
}

y2milestone ("Deploying image");

list<string> images = ImageInstallation::ImageOrder ();

integer last_image = nil;

/**
 * Set the progress
 * @param image integer the number of image
 * @param percent integer the percentage of the particular image
 */
void SetProgress (integer image, integer percent) {
    if (percent >= 100)
	image = image + 1;

    if (image != last_image) {
	last_image = image;
	if (image < size (images)) {
	    UI::ChangeWidget (
		`id ("deploying_progress"),
		`Label,
		sformat (_("Deploying Images (%1/%2)..."), (image + 1), size (images))
	    );
	}
    }

    UI::ChangeWidget (
	`id ("deploying_progress"),
	`Value,
	image
    );
}

integer _last_progress = -1;
string _last_image_id = nil;

void SetOneImageProgress (integer current_progress) {
    map <string, any> current_image = ImageInstallation::GetCurrentImageDetails();
    integer max_progress = current_image["max_progress"]:0;

    // another file
    if (current_image["file"]:"" != _last_image_id) {
	_last_image_id = current_image["file"]:"";
	_last_progress = -1;
    }

    if (max_progress == nil || max_progress == 0) {
	y2milestone ("Can't find max_progress: %1", current_image);
	return;
    }

    integer x_progress = (100 * current_progress / max_progress);
    if (x_progress > 100) x_progress = 100;

    if (x_progress > _last_progress) {
	 UI::ChangeWidget (`id ("deploying_image"), `Value, x_progress);
	_last_progress = x_progress;
    }
}

ImageInstallation::SetDeployTarImageProgress (SetOneImageProgress);

ImageInstallation::StoreAllChanges();

Pkg::TargetFinish ();

Wizard::SetContents (
    _("Deploying Installation Images"),
    `VBox (
	`ProgressBar (
	    `id ("deploying_image"),
	    _("Deploying image..."),
	    100,
	    0
	),
	`ProgressBar (
	    `id ("deploying_progress"),
	    _("Deploying Images..."),
	    size(images),
	    0
	)
    ),
    "",
    false, false
);
Wizard::SetTitleIcon ("yast-inst-mode");

SourceManager::InstInitSourceMoveDownloadArea();
ImageInstallation::DeployImages (images, Installation::destdir, SetProgress);

y2milestone ("Target image for package selector prepared");

Pkg::TargetInitialize (Installation::destdir);
Pkg::TargetLoad ();

ImageInstallation::RestoreAllChanges();

return `next;

}
