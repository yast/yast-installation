/**
 * File:        suse_register_auto
 * Module:      Installation
 * Summary:     Configure Product Registration for Autoinstallation
 * Authors:     J. Daniel Schmidt <jdsn@suse.de>
 *
 * Configure Product Registration for Autoinstallation
 *
 * $Id: suse_register_auto.ycp 1 2006-03-27 13:20:02Z jdsn $
 */


{

textdomain "installation";

import "Register";
import "Wizard";
import "Label";
import "Progress";
import "Report";
import "Summary";
import "Popup";
import "String";


/**
 * Get all settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
boolean Import (map settings)
{
    y2debug("Import called, settings: %1", settings);
    return Register::Import(settings);
}


/**
 * Export the settings to a single map
 * (For use by autoinstallation.)
 */

map Export ()
{
    y2debug("Export called");
    return Register::Export();
}


/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
string Summary()
{
    //Register::do_registration=false;
    //Register::submit_optional=true;
    //Register::submit_hwdata=true;
    string summary = "";

    // Translators: Heading - capitalized
    summary = Summary::AddHeader (summary,_("Product Registration"));
    // Translators: Text in a sentece-like environment  - normal capitalization
    summary = Summary::AddLine   (summary, Register::do_registration ? _("Run during autoinstallation"):_("Do not run during autoinstallation"));

    integer items_count = size (Register::registration_data);
    // Translators: Sentence-like text for singular and plural (incl. zero) of items
    string  items_msg   = items_count == 1  ? _("1 item of registration data"):sformat(_("%1 items of registration data"), items_count);

    if ( Register::do_registration )
    {
        summary = Summary::AddHeader (summary, _("Included Information") );
        summary = Summary::OpenList(summary);
               // Translators: Text in a sentece-like environment  - normal capitalization
        summary = Summary::AddListItem (summary, Register::submit_hwdata  ?  _("Hardware profile"):"");
               // Translators: Text in a sentece-like environment  - normal capitalization
        summary = Summary::AddListItem (summary,Register::submit_optional ?  _("Optional information"):"");
        summary = Summary::AddListItem (summary, items_msg );
        summary = Summary::CloseList(summary);
    }

    return summary;
}

/**
 * Write all settings
 * @return true on success
 */
boolean Write()
{
    return Register::Write();
}


void Read()
{
    Register::Read();
}

map AutoPackages()
{
    return $[ "install":[], "remove":[] ];
}



/* ---------------------------------------------------------  */


/**
 * Host edit dialog
 * @param id id of the edited host
 * @param entry edited entry
 * @param forbidden already used IP addresses
 * @return host or nil, if canceled
 */
define term KeyValueDialog(integer id, term entry)  {

    y2debug("KeyValueDialog: id: %1", id);
    y2debug("KeyValueDialog: entry: %1", entry);

    UI::OpenDialog(`opt(`decorated),`VBox(
	`HSpacing(1),
	`VBox(
	    /* TextEntry label */
	    `TextEntry(`id(`key), _("&Key"), entry[1]:""),
	    /* TextEntry label */
	    `TextEntry(`id(`value), _("&Value"), entry[2]:"")
	    ),
	`HSpacing(1),
	`HBox(
	    `PushButton(`id(`ok), `opt(`default), Label::OKButton()),
	    `PushButton(`id(`cancel), Label::CancelButton())
	    )
	));

    if(entry == `empty())
	UI::SetFocus(`id(`key));
    else
	UI::SetFocus(`id(`value));

    any ret = nil;
    term newentry = nil;

    repeat
    {
	ret = UI::UserInput();
	if(ret != `ok) break;

	string key   = (string) UI::QueryWidget(`id(`key),   `Value);
	string value = (string) UI::QueryWidget(`id(`value), `Value);
        key = String::CutRegexMatch(key, "[^A-Za-z0-9_-]+", true );
        if (key == "")
        {
            Popup::Notify(_("Key is invalid."));
            UI::ChangeWidget(`id(`key), `Value, key);
            ret=nil;
        }
	newentry = `item(`id(id), key, value);

    } until (ret == `ok || ret == `cancel);

    UI::CloseDialog();
    if(ret != `ok) return nil;
    return newentry;
}

/* ---------------------------------------------------------  */
/* ---------------------------------------------------------  */


symbol suse_register_configuration()
{
    string caption = _("Product Registration");
    string help_text_caption = sformat("<p><b>%1</b></p>", caption);
    string help_text_para1   = _(
"<p>Product registration includes your product in Novell's database, enabling you to get online updates and technical support. To register while installing automatically, select <b>Run Product Registration</b>. To simplify the procedure, include information from your system with <b>Hardware Profile</b> and <b>Optional Information</b>.</p>"
);
    string help_text_para2   = _(
"<p>Get more information about the registration process with <tt>suse_register -h</tt>.</p>"
);
    string help_text_para3   = _(
"<p>Other information used for registration is shown in <b>Registration Data</b>. Add a new key and value pair by pressing <b>Add</b> then entering the appropriate values. These parameters are those that can be passed with <tt>suse_register -a</tt>. Get more information about them with <tt>suse_register -p</tt>.   Remove a pair with <b>Delete</b> or modify an existing pair with <b>Edit</b>.</p>"
);

    string help_text = help_text_caption + help_text_para1 + help_text_para2 + help_text_para3;

    term contents =  `VBox(
    `VBox (
           // Translators: Text for UI Label - capitalized
          `Left( `CheckBox(`id(`run), `opt(`notify), _("Run Product Registration"),    false )),
          `HBox( `HSpacing (3.0) , `VBox(
               // Translators: Text for UI Label - capitalized
              `Left( `Label( _("Include in Registration") ) ),
               // Translators: Text for UI Label - capitalized
              `Left( `CheckBox(`id(`sub_hw),  `opt(`notify), _("Hardware Profile"),     false )),
               // Translators: Text for UI Label - capitalized
              `Left( `CheckBox(`id(`sub_opt), `opt(`notify), _("Optional Information"), false ))
           ))
    ),
    `VBox ( `VSpacing(0.5),
                   // Translators: Text for UI Label - capitalized
                  `Left( `Label( _("Registration Data to Use"))  ),
                  `MinSize(10,5, `Table( `id(`table), `opt(`notify, `vstretch) , `header( _("Key"), _("Value")), [] )),
		  `HBox(
                        `PushButton(`id(`add), _("Ad&d")),
                        `PushButton(`id(`edit), `opt(`disabled), _("&Edit")),
                        `PushButton(`id(`delete), `opt(`disabled), _("De&lete"))
                   ),
                  `VSpacing(0.5)
           )
    );


    Wizard::CreateDialog();
    Wizard::SetContents  (caption, contents, help_text, false, true);
    Wizard::SetNextButton(`next, Label::FinishButton() );

    list<term> table_items=[];
    integer mycount=0;
    // restore table items
    foreach(string key, string value, Register::registration_data,
    {
        table_items = add(table_items, (term)`item(`id(mycount), key, value ) );
        mycount = mycount+1;
    });

    // get current changes
    UI::ChangeWidget(`id(`table),   `Items, table_items);
    UI::ChangeWidget(`id(`run),     `Value, Register::do_registration);
    UI::ChangeWidget(`id(`sub_hw ), `Value, Register::submit_hwdata);
    UI::ChangeWidget(`id(`sub_opt), `Value, Register::submit_optional);
    integer items=size(table_items);
    UI::ChangeWidget(`id(`edit),    `Enabled, items > 0);
    UI::ChangeWidget(`id(`delete),  `Enabled, items > 0);

    symbol ret = nil;

    repeat
    {
        ret = (symbol)UI::UserInput();

        if (ret == `run || ret == `sub_hw || ret == `sub_opt)
        {
            Register::do_registration = (boolean) UI::QueryWidget(`id(`run), `Value );
            Register::submit_hwdata   = (boolean) UI::QueryWidget(`id(`sub_hw),  `Value);
            Register::submit_optional = (boolean) UI::QueryWidget(`id(`sub_opt), `Value);

            y2debug("do_registration: %1",   Register::do_registration);
            y2debug("submit_hwdata: %1",     Register::submit_hwdata);
            y2debug("submit_optional: %1",   Register::submit_optional);
        }
        else if (ret == `edit || ret == `table)
        {
            integer cur = (integer) UI::QueryWidget(`id(`table), `CurrentItem);
	    list<term> cur_item = filter(term e, table_items, {
		return cur == e[0, 0]:nil;
	    });

            term newitem = KeyValueDialog(cur, cur_item[0]:nil);
            if (newitem == nil) continue;
            else
            {
                table_items = maplist(term e, table_items,
                {
                    if (cur == e[0,0]:-1) return newitem;
                    return e;
                });
            }

            UI::ChangeWidget(`id(`table), `Items, table_items);
            UI::ChangeWidget(`id(`table), `CurrentItem, cur);

	    y2debug("cur: %1", cur);
	    y2debug("cur_item: %1", cur_item);
        }
        else if (ret == `add)
        {
            integer newid=items+1;
            term newitem = KeyValueDialog(newid, `empty() );
            if (newitem == nil) continue;
            else
            {
                table_items = add(table_items, newitem);
                UI::ChangeWidget(`id(`table), `Items, table_items);
                UI::ChangeWidget(`id(`table), `CurrentItem, newid);
            }
            y2debug("newitem: %1", newitem);
        }
        else if ( ret == `delete )
        {
            integer cur = (integer) UI::QueryWidget(`id(`table), `CurrentItem);

            table_items = filter(term e, table_items, {
                if (cur == e[0,0]:nil) return false;
                return true;
            });

            y2debug("deleted from list item: %1", cur);
            UI::ChangeWidget(`id(`table), `Items, table_items);
            UI::ChangeWidget(`id(`table), `CurrentItem, cur-1 );
        }
        else if ( ret == `abort || ret == `cancel )
        {
	    if(Popup::ReallyAbort(true)) break;
	    else continue;
	}

        // refresh counter and buttons
        items = size(table_items);
        UI::ChangeWidget(`id(`edit),   `Enabled, items > 0);
        UI::ChangeWidget(`id(`delete), `Enabled, items > 0);

    } until (ret == `next || ret == `abort || ret == `back);


    if (ret == `next)
    {
        Register::do_registration = (boolean) UI::QueryWidget(`id(`run),     `Value);
        Register::submit_hwdata   = (boolean) UI::QueryWidget(`id(`sub_hw),  `Value);
        Register::submit_optional = (boolean) UI::QueryWidget(`id(`sub_opt), `Value);

        Register::registration_data = $[];
        foreach(term e, table_items, {
            Register::registration_data[e[1]:""] = e[2]:"";
	});

        y2debug("finish: wrote settings to global variables");
        y2debug("do_registration: %1",   Register::do_registration);
        y2debug("submit_hwdata: %1",     Register::submit_hwdata);
        y2debug("submit_optional: %1",   Register::submit_optional);
        y2debug("registration_data: %1", Register::registration_data);
    }

    UI::CloseDialog();

    return ret;
}



//---------------------------------------------------------------------------
// MAIN
//---------------------------------------------------------------------------
y2milestone("----------------------------------------");
y2milestone("suse_register_auto started");


any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map) WFM::Args(1);
}

y2milestone("func=%1", func);
y2milestone("param=%1", param);

/* Create a summary*/
if(func == "Summary") {
    ret = Summary();
}
/* Reset configuration */
else if (func == "Reset") {
    Import($[]);
    ret = $[];
}
/* Change configuration (run AutoSequence) */
else if (func == "Change") {
    ret = suse_register_configuration();
}
/* Import configuration */
else if (func == "Import") {
    ret = Import(param);
}
/* Return actual state */
else if (func == "Export") {
    ret = Export();
}
/* Return needed packages */
else if (func == "Packages") {
    ret = AutoPackages();
}
/* Write given settings */
else if (func == "Write") {
    import "Progress";
    Progress::off();
    ret = Write();
    Progress::on();
}
else if (func == "GetModified") {
    ret =  Register::autoYaSTModified;
}
else if (func == "SetModified") {
    Register::autoYaSTModified = true;
}
/* Unknown function */
else {
    y2error("Unknown function: %1", func);
    ret = false;
}

y2milestone("ret=%1", ret);
y2milestone("suse_register_auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
