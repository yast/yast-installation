/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * Module:		inst_prepareprogress.ycp
 *
 * Authors:		Stanislav Visnovsky (visnov@suse.cz)
 *
 * Purpose:
 * Set up the global progress for the installation.
 *
 * possible return values: `back, `abort `next
 */

{
  textdomain "installation";
  import "Installation";
  import "Mode";
  import "Packages";
  import "Language";
  import "SlideShow";
  import "ImageInstallation";
  import "StorageClients";
  import "PackageSlideShow";

  y2milestone("BEGIN of inst_prepareprogress.ycp");

  Packages::SlideShowSetUp (Language::language);

  SlideShow::OpenDialog();
  PackageSlideShow::InitPkgData(true); // FIXME: this is odd!

  // Details (such as images sizes) have to known before initializing the SlideShow
  // but only if Installation from Images is in use
  if (Installation::image_installation) {
    ImageInstallation::FillUpImagesDetails();
  }

  integer live_size = 0;
  if (Mode::live_installation())
  {

    string cmd = sformat ("df -P -k %1", "/");
    y2milestone ("Executing %1", cmd);
    map out = (map)SCR::Execute (.target.bash_output, cmd);
    y2milestone ("Output: %1", out);
    string total_str = out["stdout"]:"";
    total_str = splitstring(total_str, "\n")[1]:"";
    live_size = tointeger (filter (string s, splitstring (total_str, " "), {return s != "";})[2]:"0");

/* Using df-based progress estimation, is rather faster
   may be less precise
   see bnc#555288
    string cmd = sformat ("du -x -B 1024 -s %1", "/");
    y2milestone ("Executing %1", cmd);
    map out = (map)SCR::Execute (.target.bash_output, cmd);
    y2milestone ("Output: %1", out);
    string total_str = out["stdout"]:"";
    live_size = tointeger (total_str);
*/
    if (live_size == 0)
      live_size = 1024*1024; // 1 GB is a good approximation
  }

  list< map<string,any> > stages = [
    $[
    "name" : "disk",
    "description": _("Preparing disks..."),
    "value" : Mode::update() ? 0 : 120, // FIXME: 2 minutes 
    "units" : `sec,
    ],
    $[
    "name" : "images",
    "description": _("Deploying Images..."),
    // Use 'zero' if image installation is not used
    // BNC #439104
    "value" : live_size > 0 ? live_size : (Installation::image_installation ? ImageInstallation::TotalSize() / 1024 : 0), // kilobytes
    "units" : `kb,
    ],
    $[
    "name" : "packages",
    "description": _("Installing Packages..."),
    // here, we do a hack, because until images are deployed, we cannot determine how many 
    // packages will be really installed additionally
    "value" : (PackageSlideShow::total_size_to_install - ImageInstallation::TotalSize()) / 1024 , // kilobytes
    "units" : `kb,
    ],
    $[
    "name" : "finish",
    "description" : _("Finishing Basic Installation"),
    // fixed value
    "value" : 100,
    "units" : `sec,
    ],
  ];

  SlideShow::Setup( stages );

  symbol ret_val = `auto;

  y2milestone("END of inst_prepareprogress.ycp");

  return ret_val;
}
