/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:
 *  kernel_finish.ycp
 *
 * Module:
 *  Step of base installation finish
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{

textdomain "installation";

import "ModulesConf";
import "Kernel";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map)WFM::Args(1);
}

y2milestone ("starting kernel_finish");
y2debug("func=%1", func);
y2debug("param=%1", param);

    string manufacturer_regexp_dell = "^[dD][eE][lL][lL]";
    string module_to_load_dell = "pciehp";

    string manufacturer () {
        // Workaround for bug in YaST (FATE #311991, comment #34)
        SCR::Read(.probe.bios_video);
        list <map> bios_infos = (list <map>) SCR::Read(.probe.bios);
        list <map> bios_info = (list <map>) bios_infos[0, "smbios"]:[];
        y2debug ("Bios Info: %1", bios_info);
        map manufacturer_info = (map) find (map bios_item, bios_info, ``((bios_item["type"]:"" == "sysinfo") && (bios_item["manufacturer"]:"" != "")));
        y2milestone ("Bios manufacturer found: %1", manufacturer_info);
        return manufacturer_info["manufacturer"]:"";
    }

    boolean pciehp_needed () {
        string manufacturer_s = manufacturer();
        if (manufacturer_s == nil || manufacturer_s == "") {
            y2warning ("Cannot find the BIOS manufacturer");
            return false;
        }

        if (regexpmatch (manufacturer_s, manufacturer_regexp_dell))
            return true;

        return false;
    }

    boolean adjust_kernel_modules () {
        string all_modules = (string) SCR::Read (.sysconfig.kernel.MODULES_LOADED_ON_BOOT);
        if (all_modules == nil) all_modules = "";
        list <string> modules = splitstring (all_modules, " \t\n");
        y2milestone ("Modules: %1", modules);

        // already there
        if (contains (modules, module_to_load_dell))
            return true;

        y2milestone ("Adding '%1' module to sysconfig/kernel:MODULES_LOADED_ON_BOOT", module_to_load_dell);
        modules = add (modules, module_to_load_dell);
        SCR::Write (.sysconfig.kernel.MODULES_LOADED_ON_BOOT, mergestring (modules, " "));
        return SCR::Write (.sysconfig.kernel, nil);
    }

if (func == "Info")
{
    return (any)$[
	"steps" : 1,
	// progress step title
	"title" : _("Updating kernel module dependencies..."),
	"when" : [ `installation, `update, `autoinst ],
    ];
}
else if (func == "Write")
{
    ModulesConf::Save (true);

    // on SGI Altix add fetchop and mmtimer to MODULES_LOADED_ON_BOOT
    if (SCR::Read (.target.size, "/proc/sgi_sn") > 0)
    {
	y2milestone ("found SGI Altix, adding fetchop and mmtimer");
	Kernel::AddModuleToLoad ("fetchop");
	Kernel::AddModuleToLoad ("mmtimer");
    }

    // FATE #311991
    if (pciehp_needed())
        Kernel::AddModuleToLoad (module_to_load_dell);

    // Write list of modules to load after system gets up
    Kernel::SaveModulesToLoad ();

    // BNC #427705, formerly added as BNC #163073
    // after the chroot into the installed system has been performed.
    // This will recreate all missing links.
    SCR::Execute (.target.bash, "/sbin/udevadm trigger; /sbin/udevadm settle --timeout=60");
}
else
{
    y2error ("unknown function: %1", func);
    ret = nil;
}

y2debug("ret=%1", ret);
y2milestone("kernel_finish finished");
return ret;


} /* EOF */
