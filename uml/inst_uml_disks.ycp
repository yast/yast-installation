/**
 * Module: 	inst_uml_disks.ycp
 *
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Ask the user for virtual disks for uml.
 */
{
    textdomain "installation";

    import "UML";
    import "Label";
    import "Popup";
    import "Wizard";


    // screen title for uml disks
    string title = _("Virtual Disks");


    define integer ask_size (integer s) ``{

	UI::OpenDialog (`opt(`decorated),
			// heading in a popup dialog
			`VBox(`Heading(_("Size of Virtual Disk") ),
			      `VSpacing(0.5),
			      `ComboBox(`id(`size), `opt(`editable),
					// combobox label
					_("Disk size in MB:"),
					["512", "1024", "2048", "4096"]),
			      `VSpacing(0.5),
			      `HBox(
				    `PushButton(`id(`ok), `opt(`default), Label::OKButton()),
				    `PushButton(`id(`cancel), Label::CancelButton())
				    )
			      )
			);

	UI::ChangeWidget (`id(`size), `ValidChars, "0123456789");
	UI::ChangeWidget (`id(`size), `Value, tostring (s));

	if ((symbol) UI::UserInput() == `ok)
	    s = tointeger ((string) UI::QueryWidget (`id(`size), `Value));
	else
	    s = -1;

	UI::CloseDialog ();

	return s;
    }


    // build and show dialog

    Wizard::OpenAcceptDialog ();

    term contents = `VBox(
			  `VBox(
				`Left(`Table(`id(`disks),
					     // column heading
					     `header (_("Size")), []))
				),
			  `HBox(
				`PushButton (`id (`add), Label::AddButton()),
				`PushButton (`id (`edit), Label::EditButton()),
				`PushButton (`id (`delete), Label::DeleteButton())
				)
			  );

    // help text for backup dialog during update 1/7
    string help_text = _("<p>FIXME</p>
");

    Wizard::SetContents (title, contents, help_text, (boolean) WFM::Args(0),
			 (boolean) WFM::Args(1));

    integer id_cnt = 0;

    list <term> disks = [];
    foreach (integer s, UML::disks, ``{
	disks = add (disks, `item (`id (sformat ("d%1", id_cnt)), s));
	id_cnt = id_cnt + 1;
    });
    UI::ChangeWidget (`id(`disks), `Items, disks);

    symbol ret = nil;

    while (true)
    {
	ret = (symbol) Wizard::UserInput ();

	if (ret == `abort && Popup::ConfirmAbort (`painless))
	    break;

	if (ret == `cancel || ret == `back)
	    break;

	if (ret == `add)
	{
	    integer s = ask_size (1024);
	    if (s >= 0)
	    {
		disks = add (disks, `item (`id (sformat ("d%1", id_cnt)), s));
		UI::ChangeWidget (`id(`disks), `Items, disks);
		UI::ChangeWidget (`id(`disks), `CurrentItem, sformat ("d%1", id_cnt));
		id_cnt = id_cnt + 1;
	    }
	}

	if (ret == `edit)
	{
	    string id = (string) UI::QueryWidget (`id(`disks), `CurrentItem);
	    // FIXME
	}

	if (ret == `delete)
	{
	    string id = (string) UI::QueryWidget (`id(`disks), `CurrentItem);
	    if (id != nil)
	    {
		disks = filter (term t, disks, ``(t[0]:`Empty() != `id(id)));
		UI::ChangeWidget (`id(`disks), `Items, disks);
	    }
	}

	if (ret == `next)
	{
	    if (size (disks) <= 0)
	    {
		// error popup
		string message = _("At least one disk is required.");
		Popup::Message (message);
		continue;
	    }

	    UML::disks = [];
	    foreach (term t, disks, ``{
		UML::disks = add (UML::disks, t[1]:0);
	    });

	    break;
	}
    }

    Wizard::CloseDialog ();

    return ret;
}
