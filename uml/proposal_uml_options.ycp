/**
 * Module:	proposal_uml_options.ycp
 *
 * Author:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:     Proposal for uml options
 */
{
    textdomain "installation";

    import "UML";
    import "HTML";

    string func  = (string) WFM::Args(0);
    map    param = (map) WFM::Args(1);
    map    ret   = $[];

    if ( func == "MakeProposal" )
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	// call some function that makes a proposal here:
	//
	// DummyMod::MakeProposal( force_reset );

	// Fill return map

	if (force_reset)
	{
	    UML::memory_size = 256;
	    UML::number_of_cpus = 1;
	}

	list tmp = [];

	// Proposal for uml installation
	tmp = add (tmp, sformat (_("Memory: %1 MB"), UML::memory_size));

	// Proposal for backup during update
	tmp = add (tmp, sformat (_("CPU: %1"), UML::number_of_cpus));

	ret = $[ "preformatted_proposal" :
		 HTML::List (tmp)
	];
    }
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	// call some function that displays a user dialog
	// or a sequence of dialogs here:
	//
	// sequence = DummyMod::AskUser( has_next );

	symbol result = (symbol) WFM::CallFunction ("inst_uml_options", [true, has_next]);

	// Fill return map

	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
	// Fill return map.
	//
	// Static values do just nicely here, no need to call a function.

	ret =
	    $[
	      // this is a heading
	      "rich_text_title"	:	_("Options"),
	      // this is a menu entry
	      "menu_title"	:	_("&Options"),
	      "id"		:	"uml_options_stuff"
	    ];
    }

    return ret;
}
