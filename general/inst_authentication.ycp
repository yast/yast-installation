/**
 * File:	installation/general/inst_authentication.ycp
 * Module:	Installation
 * Summary:	ask for user authentication
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * Ask for the kind of user authentication.
 */

{
    textdomain "installation";

    import "Wizard";


    // caption for dialog "User Authentication Method"
    string caption = _("User Authentication Method");


    term net_buttons =
	`RadioButtonGroup (`VBox (
				  `VSpacing(0.5),
				  `Left(`RadioButton(`id(`nis), `opt(`disabled),
						     // radiobutton to select nis user auth.
						     _("N&IS"), true)),
				  `Left(`RadioButton(`id(`nisplus), `opt(`disabled),
						     // radiobutton to select nis+ user auth.
						     _("NI&S+"), false)),
				  `Left(`RadioButton(`id(`ldap), `opt(`disabled),
						     // radiobutton to select ldap user auth.
						     _("&LDAP"), false)),
				  `VSpacing(0.5)
				  )
			   );


    term buttons =
	`RadioButtonGroup (`VBox (
				  `Left(`RadioButton(`id(`local), `opt(`notify),
						     // radiobutton to select local user auth.
						     _("S&tand alone machine"), true)),
				  `Left(`RadioButton(`id(`network), `opt(`notify),
						     // radiobutton to select network user auth.
						     _("N&etwork client"), false)),
				  `VSpacing(0.5),
				  `HBox (
					 `HSpacing (4),
					 // frame title for network authentication methods
					 `Frame (_("Network Authentication Method"),
						 net_buttons
						 )
					 )
				  )
			   );

    term contents = `VBox (
			   `VStretch(),
			   `HBox (
				  `HStretch(),
				  buttons,
				  `HStretch()
				  ),
			   `VStretch()
			   );

    // help text for dialog "User Authentication Method"
    string help = _("FIXME");

    Wizard::SetContentsButtons (caption, contents, help,
				BackButtonLabel(), NextButtonLabel());

    any ret = nil;

    repeat {

	ret = Wizard::UserInput();

	if ( ret == `abort &&
	     WFM::CallFunction (`inst_confirm_abort(`painless) ) )
	{
	    Wizard::RestoreNextButton();
	    return `abort;
	}
	else if (ret == `local)
	{
	    UI::ChangeWidget (`id(`nis), `Enabled, false);
	    UI::ChangeWidget (`id(`nisplus), `Enabled, false);
	    UI::ChangeWidget (`id(`ldap), `Enabled, false);
	}
	else if (ret == `network)
	{
	    UI::ChangeWidget (`id(`nis), `Enabled, true);
	    UI::ChangeWidget (`id(`nisplus), `Enabled, true);
	    UI::ChangeWidget (`id(`ldap), `Enabled, true);
	}
	else if ( ret == `help )
	{
	    Wizard::ShowHelp (help);
	}

    } until ( ret == `next || ret == `back );

    return ret;
}
