/**
 *
 * $Id$
 *
 * Module:		inst_ask_config.ycp
 *
 * Author:		Stefan Hundhammer <sh@suse.de>
 *			Klaus Kaempf <kkaempf@suse.de>
 *
 * Purpose:		Inform the user that the base installation is complete now;
 *			if the user wants, he can get into the hardware
 *			configuration from here.
 *
 */
{

    textdomain "installation";

    import "Mode";
    import "Installation";
    import "Product";
    import "Wizard";
    import "User";




    if ( Product::imap_server || Product::openteam_server || Product::fwadmin_host )
    {
	while (true)
	{
	    // imap server cd or fw_admin_host: configure network

	    WFM::CallFunction( `lan() );

	    // imap server cd: configure imap
	    if ( Product::imap_server )
	    {
		if ( WFM::CallFunction( `imap() ) == `next)
		    break;
	    }
	    else if ( Product::openteam_server )
	    {
		if ( WFM::CallFunction( `openteam() ) == `next)
		    break;
	    }
	    else if ( Product::fwadmin_host )
	    {
		if ( WFM::CallFunction( `fwcdadmin() ) == `next)
		    break;
	    }
	}

	// we're at the end of installation here, dhclient will
	// be restarted during bootup after we exit isnt_ask_config
	SCR::Execute(.target.bash, "/etc/init.d/dhclient stop 2>/dev/null"); // just in case
	// same for lpd
	SCR::Execute(.target.bash, "/etc/init.d/lpd stop 2>/dev/null"); // just in case

	return `next;
    }


    // Build window contents


    string login_name = User::login;

    if ( Mode::demo && size( login_name ) < 1 )
    {
	login_name = "tux";
    }

    term login_msg =
	`VBox(
	      `VSpacing( 0.3 ),
	      `Left(
		    `Label( sformat(
				    // Remind user of the login name he chose
				    _("You can log in as \"%1\"."),
				    login_name ) )
		    )
	      );

    if ( size( login_name ) < 1 )	// Fallback: no user created
    {
	login_msg = `Empty();		// -> skip this reminder
    }

    term contents =
	`HBox(
	      `HSpacing( 2.5 ),
	      `VBox(
		    `VSpacing( 0.3 ),

		    // Success message
		    // Translators caution: no automatic line wrap!
		    // Insert newline(s) in translation if it gets wider than about 60 characters.
		    `Left( `Label( _("SuSE Linux was sucessfully installed.") ) ),

		    login_msg,
		    `VSpacing(),

		    // Inform user he can launch additional hardware configs from here,
		    // but he doesn't need to.
		    // Translators caution: no automatic line wrap!
		    // Insert newline(s) in translation if it gets wider than about 60 characters.
		    `Left( `Label( _("Configuring additional
hardware now is optional.

Do this at any time using the
YaST2 Control Center.
") ) ),

		    `VSpacing( 2 ),

		    // PushButton that will go to the hardware configuration dialog
		    `PushButton( `id(`config_hw), _("Configure &Hardware...") ),
		    `VStretch()
		    ),
	      `HStretch()
	      );



    // Help text (HTML-like) START
    string help_text = _("<p>
Congratulations! You now have a working SuSE Linux system.
</p>");

    // Help text (HTML-like), continued
    help_text = help_text + _("<p>
To configure some commonly used hardware right now, such as printer,
sound card, network card, or modem, press <b>Configure Hardware</b>.
</p>
");

    // Help text (HTML-like), continued
    help_text = help_text + _("<p>
You can, however, postpone this to any time in the future.
In this case, press <b>Finish Installation</b> now.
</p>
");

    // Help text (HTML-like), continued
    help_text = help_text + _("<p>
To configure these devices at another time, log in as a normal user
and start the <b>YaST2 Control Center</b> from your desktop (KDE by
default).
</p>
");

    // Help text (HTML-like), continued
    help_text = help_text + _("<p>
You will be prompted for the <i>root password</i>, because this type of
configuration requires system administrator privileges.
</p>
");


    Wizard::SetContents(
			  // Headline for final installation screen:
			  // Basic installation done, may continue to set up additional
			  // hardware from here.
			  _("Congratulations!"),
			  contents,
			  help_text,
			  WFM::Args(0),	// have_back_button
			  WFM::Args(1)	// have_next_button
			  );

    Wizard::ReplaceAbortButton(`Empty());	// don't need that any more
    Wizard::ReplaceNextButton(
				// new caption for "Next" button
				`PushButton(`id(`next), `opt(`default), _("&Finish installation") )
				);


    if ( Mode::config )
    {
	// No hardware configuration from here in config_mode - disable this button
	UI::ChangeWidget(`id(`config_hw), `Enabled, false );
    }

    // Event loop

    any button_id = nil;

    repeat
	{
	    button_id = UI::UserInput();

	    if ( button_id == `config_hw )
	    {
		if ( Mode::config )
		{
		    // We should never get here anyway since this button is disabled in config mode
		    // - just want to prevent the amount of clutter due to config_mode in the sub module
		    // we had last time.	<sh@suse.de>

		    // Warning popup: No hardware config in autoinstallation mode
		    UI::MessagePopup( _("Not supported for autoinstallation.") );
		}
		else
		{
		    y2milestone( "Calling hardware configuration" );
		    WFM::CallFunction( `inst_hw_config() );
		    button_id = `next;	// fall out of input loop
		}
	    }
	    else if ( button_id == `back )
	    {
		Wizard::RestoreNextButton();
		Wizard::RestoreAbortButton();
	    }

	} until ( button_id == `next || button_id == `back );


    Wizard::SetContents( " ",	// headline
			   // Label just prior to shutting down YaST2
			   `Label( _("Cleaning up...") ),
			   "",		// help_text
			   false,	// have_back_button
			   false	// have_next_button
			 );

    //
    // Cleanups prior to program end
    //


    if (button_id == `next)
    {
	// moved from previous position
	// we're at the end of installation here, dhclient will
	// be restarted during bootup after we exit inst_ask_config

	if ( ! Mode::test )
	{
	    SCR::Execute(.target.bash, "/etc/init.d/dhclient stop 2>/dev/null"); // just in case
	}

    }

    return button_id;
}
