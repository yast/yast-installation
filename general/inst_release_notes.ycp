/**
 * File:	installation/general/inst_relase_notes.ycp
 * Module:	Installation
 * Summary:	Display release notes
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * Display release notes.
 *
 * $Id$
 */

{
    textdomain "installation";

    import "Wizard";
    import "Popup";
    import "Language";
    import "Mode";
    import "Misc";

    /* filename of release notes */
    string file = "";

    /* release notes */
    string text = "";


    /* function to load release notes */
    define boolean load_release_notes ()
    {

        string path_to_relnotes = "/usr/share/doc/release-notes";
        if (Mode::firstboot)
        {
            string tmp_path =
                (string)Misc::SysconfigRead(.sysconfig.firstboot.FIRSTBOOT_RELEASE_NOTES_PATH, "");
            if (tmp_path != ""
                    && size((list)SCR::Read(.target.dir, tmp_path)) > 0 )
            {
                path_to_relnotes = tmp_path;
            }
        }
	string tmp = path_to_relnotes + "/RELEASE-NOTES.%1.rtf";

	file = sformat (tmp, Language::language);
	text = (string)SCR::Read (.target.string, [file, ""]);
	if (text != "")
	    return true;

	file = sformat (tmp, substring (Language::language, 0, 2));
	text = (string)SCR::Read (.target.string, [file, ""]);
	if (text != "")
	    return true;

	file = sformat (tmp, "en");
	text = (string)SCR::Read (.target.string, [file, ""]);
	if (text != "")
	    return true;

	return false;
    };


    /* caption for dialog "Release Notes" */
    string caption = _("Release Notes");

    load_release_notes ();

    term contents = `VBox (
			   `VSpacing (0.5),
			   `Left (`Label (sformat (_("Content of File %1"), file))),
			   `RichText (`id (`text), text),
			   `VSpacing (0.5)
			   );

    /* help text for dialog "Release Notes" */
    string help = _("<p>Here are the <b>release notes</b> for the installed
Linux system. They provide a brief summary of new features and changes.</p>");

    Wizard::SetContents (caption, contents, help, (boolean)WFM::Args(0),
            (boolean)WFM::Args(1));

    // FIXME: richtext eats return key
    // UI::SetFocus (`id (`text));

    any ret = nil;

    repeat {

	ret = Wizard::UserInput();

	if (ret == `abort)
	{
	    if (Popup::ConfirmAbort (`incomplete))
		break;
	}
	else if (ret == `help)
	{
	    Wizard::ShowHelp (help);
	}

    } until ( ret == `next || ret == `back );

    return ret;
}
