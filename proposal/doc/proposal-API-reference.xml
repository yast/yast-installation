   <reference id="proposal_api_reference">
               <title>Proposal API Reference</title>


<refentry id="proposal_MakeProposal">
  <refmeta>
    <refentrytitle>MakeProposal</refentrytitle>
    <manvolnum>3Y</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>MakeProposal</refname>
    <refpurpose>Make proposal for installation.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis>
      <funcprototype>
	<funcdef><type>map</type> <function>MakeProposal</function></funcdef>
	<paramdef><type>boolean</type><parameter>force_reset</parameter></paramdef>
	<paramdef><type>boolean</type><parameter>language_changed</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
	<term><type>boolean</type> <parameter>force_reset</parameter></term>
	<listitem>
	  <para>If 'true', discard anything that may be cached and start over
	    from scratch. If 'false', use cached values from the last
	    invocation if there are any.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>boolean</type> <parameter>language_changed</parameter></term>
	<listitem>
	  <para>The installation language has changed since the last call of
	    "MakeProposal". This is important only if there is a language
	    change mechanism in one of the other submodules. If this parameter
	    is "true", any texts the user can see in the proposal need to be
	    retranslated. The internal translator mechanism will take care of
	    this itself if the corresponding strings are once more put through
	    it (the _("...") function). Only very few submodules that translate
	    any strings internally based on internal maps (e.g., keyboard etc.)
	    need to take more action.</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Return Values</title>
    <para>
      <function>MakeProposal()</function> returns a map containing:
    </para>
    <variablelist>
      <varlistentry>
	<term>
	  <type>string</type> <returnvalue>preformatted_proposal</returnvalue> (optional)</term>
	<listitem>
	  <para>
	    Human readable proposal preformatted in HTML.
	    <tip><para>Use the HTML:: module for such formatting.
	      </para></tip>
	    </para>
	  
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>list</type> <parameter>raw_proposal</parameter></term>
	<listitem>
	  <para>
	    (only used if 'preformatted_proposal' is not present in
	    the result map)</para>

	  <para>
	    Human readable proposal, not formatted yet.
	    The caller will format each list item (string) as a
	    HTML list item ( "&lt;li&gt; ... &lt;/li&gt;" ).</para>

	  <para>
	    The caller will make a HTML unsorted list of this, e.g.:</para>
	  <programlisting>
	    &lt;ul&gt;
	    &lt;li&gt;string from list element #1&lt;/li&gt;
	    &lt;li&gt;string from list element #2&lt;/li&gt;
	    &lt;li&gt;string from list element #3&lt;/li&gt;
	    ...
	    &lt;/ul&gt;
	  </programlisting>

	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>string</type> <parameter>warning</parameter> (optional)</term>
	<listitem>
	  <para>Warning in human readable format without HTML tags
	    other than &lt;br&gt;.</para>
	  <para>The warning will be embedded in appropriate HTML
	    format specifications according to 'warning_level'
	    below.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>symbol</type> <parameter>warning_level</parameter> (optional)</term>
	<listitem>
	  <para>
	    Determines the severity and the visual display of
	    the warning. Valid values:
	  </para>
	  <itemizedlist>
	    <listitem>`notice</listitem>
	    <listitem>`warning (default)</listitem>
	    <listitem>`error</listitem>
	    <listitem>`blocker</listitem>
	    <listitem>`fatal</listitem>
	  </itemizedlist>
	  <para>
	    <emphasis>`blocker</emphasis> will prevent the user from continuing the
	    installation. If any proposal contains a `blocker
	    warning, the "accept" button in the proposal dialog
	    will be disabled - the user needs to fix that blocker
	    before continuing.</para>
	  <para><emphasis>`fatal</emphasis> is like `blocker but also stops building the proposal</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>boolean</type> <parameter>language_changed</parameter> (optional)</term>
	<listitem>
	  <para>
	    This module just caused a change of the installation
	    language. This is only relevant for the "language"
	    module.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>boolean</type> <parameter>mode_changed</parameter> (optional)</term>
	<listitem>
	  <para>
	    This module just caused a change of the installation
	    mode. This is only relevant for the "inst mode"
	    module.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>boolean</type> <parameter>rootpart_changed</parameter> (optional)</term>
	<listitem>
	  <para>
	    This module just caused a change of the root partition.
	    This is only relevant for the "root part" module.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


</refentry>

<refentry id="proposal_AskUser">
  <refmeta>
    <refentrytitle>AskUser</refentrytitle>
    <manvolnum>3Y</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>AskUser</refname>
    <refpurpose>Run an interactive workflow</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis>
      <funcprototype>
	<funcdef><type>map</type> <function>AskUser</function></funcdef>
	<paramdef><type>boolean</type> <parameter>has_next</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
	<term><type>boolean</type> <parameter>has_next</parameter></term>
	<listitem>
	  <para>
	    Use a "next" button even if the module by itself has only one
	    step, thus would normally have an "OK" button - or would rename
	    the "next" button to something like "finish" or "accept".
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Description</title>
    <para>
      Run an interactive workflow - let user decide upon values he might want
      to change. May contain one single dialog, a sequence of dialogs or one
      master dialog with one or more "expert" dialogs. The module is
      responsible for controlling the workflow sequence (i.e., "next", "back"
      buttons etc.).
    </para>
    <para>
      Submodules don't provide an "abort" button to abort the entire
      installation. If the user wishes to  do that, he can always go back to
      the main dialog (the installation proposal) and choose "abort" there.

    </para>
  </refsect1>
  <refsect1>
    <title>Return Values</title>
    <para><function>AskUser()</function> returns a map containing:</para>
    <variablelist>
      <varlistentry>
	<term><type>symbol</type> workflow_sequence</term>
	<listitem>
	  <variablelist>
	    <varlistentry>
	      <term><returnvalue>`next</returnvalue>
		(default)</term>
	      <listitem>
		<para>
		  Everything OK - continue with the next step in
		  workflow sequence.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><returnvalue>`back</returnvalue></term>
	      <listitem>
		<para>
		  User requested to go back in the
		  workflow sequence.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><returnvalue>`again</returnvalue></term>
	      <listitem>
		<para>
		  Call this submodule again (i.e., re-initialize the submodule)
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><returnvalue>`auto</returnvalue></term>
	      <listitem>
		<para>
		  Continue with the workflow sequence in the
		  current direction - forward if the last
		  submodule returned `next, backward otherwise.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><returnvalue>`finish</returnvalue></term>
	      <listitem>
		<para>
		  Finish the installation. This is specific to
		  "inst_mode.ycp" when the user selected "boot
		  system" there.
		</para>
	      </listitem>
	    </varlistentry>
	    </variablelist>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>boolean</type> language_changed (optional)</term>
	<listitem>
	  <para>
	    This module just caused a change of the installation language. This
	    is only relevant for the "language" module.	    
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>


<refentry id="proposal_Description">
  <refmeta>
    <refentrytitle>Description</refentrytitle>
    <manvolnum>3Y</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Description</refname>
    <refpurpose>Return human readable titles both for the RichText (HTML) widget and
	for menuentries.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis>
      <funcprototype>
	<funcdef><type>map</type> <function>Description</function></funcdef>
	<void/>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  
  <refsect1>
    <title>Return Values</title>
    <para>Returns a map containing:</para>
    <variablelist>
      <varlistentry>
	<term><type>string</type> <returnvalue>rich_text_title</returnvalue></term>
	<listitem>
	  <para>
	    (Translated) human readable title for this section in
	    the RichText widget without any HTML formatting. This
	    will be embedded in
	  </para>
	  <screen>
	  &lt;h3&gt;&lt;a href="???"&gt; ... &lt;/a&gt;&lt;/h3&gt;
	  </screen>

	  <para>so make sure not to add any additional HTML formatting.</para>
	  <para>Keyboard shortcuts are not (yet?) supported, so don't include any '&amp;' characters.</para>
	  <para>
	    Example: "Input devices"
	  </para>

	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>string</type> <returnvalue>menu_title</returnvalue></term>
	<listitem>
	  <para>(Translated) human readable menuentry for this
	    section. Must contain a keyboard shortcut ('&amp;'). Should
	    NOT contain trailing periods ('...') - the caller will
	    add them.</para>

	  <para>Example: "&amp;Input devices"</para>
	  
	  
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><type>string</type> <returnvalue>id</returnvalue></term>
	<listitem>
	  <para>	Programmer readable unique identifier for this section.
	    This is not auto-generated to keep the log file
	    readable.</para>

	  <para>Example: "input_dev"</para>	 
	  
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
	This map may be empty. In this case, this proposal section will
	silently be ignored. Proposals modules may use this if there is no
	useful proposal at all. Use with caution - this may be confusing for
	the user.
    </para>
    <para>
	Note: In this case, all other proposal functions must return a useful
	success value so they can be called without problems.
</para>

  </refsect1>


</refentry>




<refentry id="proposal_Write">
  <refmeta>
    <refentrytitle>Write</refentrytitle>
    <manvolnum>3Y</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Write</refname>
    <refpurpose>Write the proposed (and probably modified) settings to the system.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis>
      <funcprototype>
	<funcdef><type>map</type> <function>Write</function></funcdef>
	<void/>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>	Write the proposed (and probably modified) settings to the system.
	It is up to the proposal dispatcher how it remembers the settings.
	The errors must be reported using the Report:: module to have
	the possibility to control the behaviour from the main program.
      </para>
    <para>
	This Write() function is optional. The dispatcher module is required
	to allow this function to be called without returning an error value
	if it isn't there.
    </para>
  </refsect1>
  <refsect1>
    <title>Return Values</title>
    <para>Returns a map containing:</para>
    <variablelist>
      <varlistentry>
	<term><type>boolean</type> <returnvalue>success</returnvalue></term>
	<listitem>
	  <para>
	   	Returns true, if the settings were written
			successfully.
	  </para>

	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

</refentry>

</reference>
