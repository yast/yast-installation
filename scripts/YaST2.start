#! /bin/sh

# YYYYYYYYYYYYYYYYYY
#
#  mkdir -p /var/log
#  mount 10.10.0.64:/space/log /var/log
#
# yyyyyyyyyyyyyyyyyyyyy


# any stuff in /y2update must be preferred (see bug #40833)
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/y2update/lib64:/y2update/lib:/y2update/plugin


# set splash progress bar to 70%
[ -f /proc/splash ] && echo "show $((70*65534/100))" >/proc/splash

# depending on the architecture, Add braille & x11 info to
# /etc/install.inf, and clear the screen before
HOSTTYPE="$(uname -m)"
case "$HOSTTYPE" in
    s390|s390x)  ;;
    ppc*)
	echo -e \\033c
	/usr/sbin/hwinfo --special=x11
	;;
    *)
	/usr/sbin/hwinfo --special=braille
	/usr/sbin/hwinfo --special=x11
esac

# set splash progress bar to 80%
[ -f /proc/splash ] &&  echo "show $((80*65534/100))" >/proc/splash

# p690 hvc console needs vt320, it is handled as serial console installation
grep -qi console=hvc < /proc/cmdline && {
echo "Console: hvc0,9600" >> /etc/install.inf
export HVC_CONSOLE_HINT="  (recommended with p690 hvc console)"
export Console=hvc0,9600
}


# source install.inf, setting a variable $Moo=... for each line Moo: ...
eval $(grep ': ' /etc/install.inf | sed -e 's/"/"\\""/g' -e 's/:  */="/' -e 's/$/"/')

# set language
infofile=/content
LANGUAGE=en_US
[ -f $infofile ] && LANGUAGE=`sed -n 's/^LANGUAGE \([^ ]*\)/\1/p' $infofile`

# if an entry 'Console:  ....' exists in install.inf,
# YaST runs on a console which is connected to a serial port
# The console on an iSeries box is /dev/tty1, but it is not a real
# serial console, so linuxrc can not create a Console: entry
if [ -n "$Console" -o -d /proc/iSeries ] ; then
    if testutf8 ; [ $? = 2 ] ; then
        # append UTF-8
        [ "$LANGUAGE" ] && LANG="${LANGUAGE%%.*}.UTF-8"
        echo "utf8 console: $LANG" >>/var/log/YaST2/y2start.log
    else
        # don't use UTF-8 in case of a serial console
        [ "$LANGUAGE" ] && LANG=$LANGUAGE
        echo "non-utf8 console: $LANG" >>/var/log/YaST2/y2start.log
    fi
else
    # append UTF-8
    [ "$LANGUAGE" ] && LANG="${LANGUAGE%%.*}.UTF-8"
    echo "utf8 console: $LANG" >>/var/log/YaST2/y2start.log
fi

# umount does not work with low memory since rootfs is still in use
umount /var/adm/mount &>/dev/null

grep -iq iseries /proc/cpuinfo || { echo >/dev/tty10 ; }
for i in \
  Language Font Locale Unicodemap Screenmap Fontmagic\
  Sourcemounted Display Cdrom Bootmode SMP Mousedevice MouseXF86 Floppydisk\
  YaST2update Textmode Keyboard Framebuffer\
  Netdevice IP Netmask Gateway Nameserver Server Serverdir X11i\
  LANG TIMEZONE MEDIA XServer XVersion XBusID XkbRules XkbModel XkbLayout\
  USB HasPCMCIA VNC VNCpassword UseSSH
do
  if [ "${!i}" ] ; then
    export $i
    grep -iq iseries /proc/cpuinfo || { echo "$i=${!i}" >/dev/tty10 ; }
  fi
done

# start unicode if encoding is UTF-8
if echo $LANG | grep -q '\.UTF-8$'; then
    test -x /bin/unicode_start && /bin/unicode_start
fi

test -d /proc/iSeries -a ! -e /tmp/vnc_installation && {
  : ${TERM:=vt100}; LINES=24; COLUMNS=80
  export LINES COLUMNS TERM
  eval `/bin/initviocons -e`
}

if [ ! -z "$Console" -a -z "$AutoYaST" -a "$VNC" = 0 -a "$UseSSH" = 0 -a "$TERM" != "xterm" ] ; then
  . /usr/lib/YaST2/bin/ask_for_TERM_variable
  export TERM
elif [ ! -z "$Console" -a ! -z "$AutoYaST" -a "$VNC" != 0 -a "$UseSSH" != 0 ] ; then
  export TERM=vt100
fi

echo "TERM: $TERM" >> /etc/install.inf

# start repair system
grep -qi repair < /proc/cmdline && {
echo "Repair: true" >> /etc/install.inf
}

cp -f /proc/mounts /etc/mtab

function setup_XF86Config {

[ -f /usr/X11R6/lib/X11/XF86Config_4 ] && cp -f /usr/X11R6/lib/X11/XF86Config_4 /etc/X11/XF86Config

# XVersion 4
xcfg=/etc/X11/XF86Config

if [ "$MouseXF86" ] ; then
  cp $xcfg /tmp
  sed -e "s#Microsoft#$MouseXF86#" /tmp/XF86Config >$xcfg
fi

if [ "$XServer" -a "$XServer" != vga -a "$XServer" != fbdev ] ; then
  cp $xcfg /tmp
  sed -e "s#ChangeMe#$XServer#" /tmp/XF86Config >$xcfg
  rm /tmp/XF86Config
fi

if [ "$XBusID" ] ; then
  cp $xcfg /tmp
  sed -e 's/#BusID/BusID/' -e "s#98:76:54#$XBusID#" /tmp/XF86Config >$xcfg
  rm /tmp/XF86Config
fi

if [ "$XkbModel" ] ; then
  cp $xcfg /tmp
  if [ "$XkbModel" = "macintosh" ] ; then
    sed -e "s#^.*XkbKeycodes.*# Option  \"XkbKeycodes\" \"macintosh\"#" \
    -e "s#^.*XkbModel.*# Option  \"XbkModel\" \"macintosh\"#" \
    -e "s#^.*/dev/mouse.*# Option \"Device\" \"/dev/input/mice\"#" \
    -e "s#^.*Microsoft.*# Option \"Protocol\" \"IMPS/2\"#" /tmp/XF86Config >$xcfg
	# this centers the screen on many framebuffer drivers with XF86_FBDev
	     > /dev/tty7
	     fbset -a -vyres 480 -vxres 640
  else
  case "$(uname -m)" in
  	ppc*)
	sed -e "s#pc104#$XkbModel#" \
	    -e "s#^.*/dev/mouse.*# Option \"Device\" \"/dev/psaux\"#" \
	    -e "s#^.*Microsoft.*# Option \"Protocol\" \"PS/2\"#" /tmp/XF86Config >$xcfg
	# this centers the screen on many framebuffer drivers with XF86_FBDev
	     > /dev/tty7
	     fbset -a -vyres 480 -vxres 640
		;;
	*)
	sed -e "s#pc104#$XkbModel#" /tmp/XF86Config >$xcfg
    		;;
  esac
  fi
  rm /tmp/XF86Config
fi

if [ "$XkbRules" ] ; then
  cp $xcfg /tmp
  sed -e "s#xfree86#$XkbRules#" /tmp/XF86Config >$xcfg
  rm /tmp/XF86Config
fi

grep 'XF86Ext: ' /etc/install.inf | sed -e 's/^.*: //' | while IFS= read -r flup ; do (
  cp $xcfg /tmp
  sed -e '/# extensions/ i\' -e "$flup" /tmp/XF86Config >$xcfg
  rm /tmp/XF86Config
) ; done

grep 'XF86Raw: ' /etc/install.inf | sed -e 's/^.*: //' | while IFS= read -r flup ; do (
  cp $xcfg /tmp
  zap=device
  [ "$XServer" = vga ] && zap=vga
  [ "$XServer" = fbdev ] && zap=fbdev
  sed -e "/# ${zap}_options/ i\\" -e "$flup" /tmp/XF86Config >$xcfg
  rm /tmp/XF86Config
) ; done

}

case "$(uname -m)" in
    s390|s390x) ;;
    *)  	setup_XF86Config
esac

# remove mouse here, re-init in inst_startup
rm -f /dev/mouse

# if we know the mouse device, set the link here (needed for SPARC)
if [ "$Mousedevice" ] ; then
  ln -sf $Mousedevice /dev/mouse
fi

#
# Check for driver update mode
# If /update/y2update/y2update.gz exists (copied there by linuxrc)
# uncompress the y2update.gz file, and mount it to /y2update.
#
# Else make a symlink from /y2update to /update/y2update.
# YaST2 will look for config files and components there.
#
mkdir -p /media/floppy

UPDATE_MOUNTED=false
if [ "$YaST2update" = 1 ] ; then
  if [ -r /update/y2update/y2update.gz ] ; then
    echo -n "Packed extension disk..."
    gunzip -c /update/y2update/y2update.gz > /dev/ram5
    mkdir -p /y2update
    if mount /dev/ram5 /y2update ; then
      echo "OK."
      UPDATE_MOUNTED=true
    else
      echo failed.
    fi
  else
    if [ -d /update/y2update ] ; then
      echo -n "Unpacked extension disk..."
      ln -sf /update/y2update /y2update
      UPDATE_MOUNTED=true
    fi
  fi
  [ -r /y2update/logconf.ycp ] && cp /y2update/logconf.ycp /root
fi

# Calculate reasonable log file size based on free disk space:
# We want to fill the RAM disk from which we are running no more
# than half with y2log files. With a maximum of 5 log files, each
# should get no more than 1/10 of the free disk space, but no more
# than 5000 (5 MB) per log file in any case.
#
# Sample 'df' output:
#
# LANG=C df /var/log/YaST2
# Filesystem           1K-blocks      Used Available Use% Mounted on
# /dev/hda2             10490116   4020616   6469500  39% /

if [ -z "$Y2MAXLOGSIZE" ] ; then
    Y2MAXLOGSIZE=`LANG=C df /var/log/YaST2 | tail -n 1 | awk '{ print int($4/10) }'`
    test -n $Y2MAXLOGSIZE && test $Y2MAXLOGSIZE -gt 5000 && Y2MAXLOGSIZE=5000
    export Y2MAXLOGSIZE
fi

test -z "$Y2MAXLOGSIZE" && export Y2MAXLOGSIZE=50
test -z "$Y2MAXLOGNUM"  && export Y2MAXLOGNUM=5



# revert to normal MODPATH
# TODO, I think we're not in kansas any more
unset MODPATH

# remove this link, otherwise YaST2 thinks it is an update
rm -f /var/X11R6/bin/X

# remove the trigger for the ssh installation
rm -f /tmp/YaST2_ssh_installation_finished


/usr/lib/YaST2/bin/YaST2 installation initial


yast2exitcode=$?

# just in case ...
if [ `grep " /mnt" /proc/mounts | wc -l` -ge 1 ] ; then
    grep " /mnt" /proc/mounts | cut -d " " -f 2 | sort -r | xargs -n 1 umount
fi
if [ `grep ^/dev/ /proc/swaps | wc -l` -ge 1 ] ; then
    grep ^/dev/ /proc/swaps | cut -d " " -f 1 | xargs -n 1 swapoff 2>/dev/null
fi

#
# Unmount update filesystem
#
if [ "$UPDATE_MOUNTED" = true ] ; then umount /y2update ; fi

[ "$Sourcemounted" != 1 ] && umount /var/adm/mount
rm -f /etc/mtab

# do not write to non existant ttys
grep -qi iseries /proc/cpuinfo || {
ps aux >/dev/tty9
cat /proc/mounts >/dev/tty10
echo >/dev/tty10
fuser -vm / >/dev/tty11
}

# YYYYYYYYYYYYYYYYY
#  umount /var/log
# yyyyyyyyyyyyyyyyy

[ -d /proc/iSeries -o "$HOSTTYPE" = "s390" -o "$HOSTTYPE" = "s390x" ] || chvt 1

# write the trigger for ssh installation
# this will proceed in /sbin/inst_setup
echo $yast2exitcode > /tmp/YaST2_ssh_installation_finished

if echo $LANG | grep -q '\.UTF-8$'; then
    test -x /bin/unicode_stop && /bin/unicode_stop
fi

exit $yast2exitcode
