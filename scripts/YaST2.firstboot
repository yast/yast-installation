#!/bin/bash
#
# Copyright (c) 1999 SuSE GmbH Nuernberg, Germany. All rights reserved
# Copyright (c) 2002 SuSE Linux AG, Nuernberg, Germany. All rights reserved
#
# Author: Mathias Kettner <kettner@suse.de> 1999
#         Christian Zoz <zoz@suse.de> 2002
#
# $Id$
#
# ----------------------------------------------------------------------
# bootsetup script for YaST2
#
# This script is executed after you installed your system with
# YaST2 and immediately after it has been booted for the first
# time.
#
# ----------------------------------------------------------------------

touch /etc/modules.conf
/sbin/depmod -a -F /boot/System.map-`uname -r` `uname -r` >/dev/null 2>&1

#
# Start syslog daemon
#

test -x /etc/init.d/syslog && /etc/init.d/syslog start

#
# enable debugging options
#
grep -iq < /proc/cmdline debug && {
export Y2DEBUG=1
export Y2MAXLOGSIZE=50000
export Y2MAXLOGNUM=5
}

# Touch info dir. SuSEconfig probably should regenerated some
# indices

for i in /usr/share/info/ \
	 /usr/lib/info/ \
	 /usr/local/info/ \
	 /usr/local/lib/info/ \
	 /usr/X11R6/info/ \
	 /usr/X11R6/lib/info/ \
	 /usr/X11R6/lib/xemacs/info/ \
	 /var/adm/packages ; do
    test -d $i && touch $i 2> /dev/null
done

# Rootpasswd is already set by YaST2.

# Touch man page directories. This makes SuSEconfig create new man
# page indices

for i in /usr/share/info /usr/man /usr/share/man /usr/X11R6/man /usr/openwin/man \
	 /usr/lib/perl5/man /usr/lib/teTeX/man /usr/local/man ; do
    if [ -d $i ] ; then
	find $i -follow -type d 2> /dev/null | xargs touch 2> /dev/null
    fi
done

# there was a bug in former releases of ps.tgz - a unreadable /etc/psdevtab
# can be there - this can be deleted. Recreate it simply with calling
# ps as root.  This procedure speeds up ps very much...
# Not longer neccessary?

rm -f /etc/psdevtab
ps > /dev/null 2> /dev/null

# Now prepare for starting YaST2 again. It needs to complete
# the installation. If it was not able to unmount the CD-Rom
# during the first part of the installation (this happens if
# you have less than 48M of RAM), only the packages from the
# first CD have been installed. The rpm installation must be
# continued in this case.

# Check some hotplug settings and write it to /etc/sysconfig/hotplug
HTPLG_TMP=`mktemp /tmp/hotplug.XXXXXX`
HTPLG_SYS=/etc/sysconfig/hotplug
if [ -f $HTPLG_SYS -a -f $HTPLG_TMP ] ; then
  # Do we have USB? If yes set HOTPLUG_START_USB to yes, else to no.
  # !! variable USB is also used later in this script, don't change this
  USB=no
  lspci -n 2>/dev/null| grep -q "Class[[:space:]]*0c03" && USB=yes
  cp $HTPLG_SYS $HTPLG_TMP
  sed -e "s/^[[:space:]]*\(H.*G_START_USB\).*$/\1=$USB/" \
      $HTPLG_TMP > $HTPLG_SYS
  # Do we need hotplug for PCI? Yes, if we use kernel pcmcia.
  # But we don't set anything to no here, just leave it alone
  eval `grep PCMCIA_SYSTEM /etc/sysconfig/pcmcia 2>/dev/null`
  if [ "$PCMCIA_SYSTEM" = kernel ] ; then
    cp $HTPLG_SYS $HTPLG_TMP
    sed -e "s/^[[:space:]]*\(H.*G_START_NET\).*$/\1=yes/" \
        -e "s/^[[:space:]]*\(H.*G_START_PCI\).*$/\1=yes/" \
        $HTPLG_TMP > $HTPLG_SYS
  fi
fi
rm -f $HTPLG_TMP

# Modify usbdevfs in /etc/fstab to make hotplug working flawlessly, but only
# if hotplug is installed and if there is USB at all
# We need there the following line:
# usbdevfs   /proc/bus/usb   usbdevfs     noauto 0 0
FSTAB_TMP=`mktemp /tmp/fstab.XXXXXX`
FSTAB=/etc/fstab
if [ -x /etc/init.d/hotplug -a -f "$FSTAB_TMP" -a "$USB" = yes ] ; then
  WRITE=yes
  cp $FSTAB $FSTAB_TMP
  while read LINE; do
    read DEV MP FST OPT REST < <(echo $LINE)
    case "$DEV" in
      none|usbdevfs)
        if [ "$MP" = "/proc/bus/usb" -a "$OPT" != "noauto" ] ; then
          echo "# $LINE"
          WRITE=yes
        else
          echo "$LINE"
          WRITE=no
        fi
        ;;
      *) echo "$LINE" ;;
    esac
  done < $FSTAB_TMP > $FSTAB
  if [ "$WRITE" = yes ] ; then
    echo -e "usbdevfs\t/proc/bus/usb\tusbdevfs\tnoauto 0 0"
    # log this action somewhere?
  fi >> $FSTAB
fi
rm -f $FSTAB_TMP

# Provide configurations for pcmcia or usb NICs in the case that the interface
# is down
IFCFG_PCMCIA=/etc/sysconfig/network/ifcfg-pcmcia
# IFCFG_PCMCIA_SAVE=`mktemp $IFCFG_PCMCIA.saved.by.YaST2.firstboot.XXXXXX`
IFCFG_USB=/etc/sysconfig/network/ifcfg-usb
# IFCFG_USB_SAVE=`mktemp $IFCFG_USB.saved.by.YaST2.firstboot.XXXXXX`
if [    \( -x /etc/init.d/pcmcia -o -x /etc/init.d/hotplug \) \
     -a -f "$IFCFG_PCMCIA_SAVE" -a -f "$IFCFG_USB_SAVE" ] ; then
  # CHECK THIS AGAIN
  # In my last test the iface was not up anymore so we provide a temporary
  # network configuration
  rm -f $IFCFG_PCMCIA_SAVE $IFCFG_USB_SAVE # ! keep this
  test -f "$IFCFG_PCMCIA" && mv $IFCFG_PCMCIA $IFCFG_PCMCIA_SAVE
  test -f "$IFCFG_USB" && mv $IFCFG_USB $IFCFG_USB_SAVE
  echo "STARTMODE=hotplug" > $IFCFG_PCMCIA
  echo "BOOTPROTO=static" >> $IFCFG_PCMCIA
  while read a b c d; do
    case $a in
      IP:) echo "IPADDR=$b" ;;
      Netmask:) echo "NETMASK=$b" ;;
      Broadcast:) echo "BROADCAST=$b" ;;
    esac
  done < /etc/install.inf >> $IFCFG_PCMCIA
  cp $IFCFG_PCMCIA $IFCFG_USB
fi

# Now start hotplug
if [ -x /etc/init.d/hotplug ] ; then
  /etc/init.d/hotplug start
fi

# Start cardmanager for laptops
if [ -r /etc/sysconfig/pcmcia -a -x /etc/init.d/pcmcia ] ; then
  # At first we have to set two variables in /etc/sysconfig/pcmcia with the
  # options, that were used during part of installation,
  #
  TMP=`/bin/mktemp /tmp/sysconfig.pcmcia.XXXXXX`
  ISI=/etc/install.inf
  RCC=/etc/sysconfig/pcmcia
  cp $RCC $TMP
  CORE=`sed -n "/^options/s/^.*pcmcia_core //p" $ISI`
  PCIC=`sed -n "/^options/s/^.*\(i82365\|tcic\) //p" $ISI`
  sed  -e "/^PCMCIA_CORE_OPTS/s/=.*$/=\"$CORE\"/" \
       -e "/^PCMCIA_PCIC_OPTS/s/=.*$/=\"$PCIC\"/" $TMP > $RCC
  rm $TMP

  # It does not matter that pcmcia is already active, because:
  # 1) loading a already loaded module does not harm
  # 2) the cardmgr is already dead. cardmgr was the same binary as linuxrc.
  # 3) there is no configuration info in network.opts, so eth0 will stay
  #    completely untouched and theirfore up

  # And: If we did a reboot we need the start command here!!!
  #
  if grep -qs '^PCMCIA:' /etc/install.inf ; then
    test -x /etc/init.d/pcmcia && /etc/init.d/pcmcia start external
  fi
fi

sleep 1

#
# make sure, that we have no "future files" in kernel sources
#
find /usr/src/linux* -mtime -0 2>/dev/null | xargs --no-run-if-empty touch

#
# make sure, that texhash will be started in SuSEconfig.
#
mkdir -p /var/adm/SuSEconfig
touch /var/adm/SuSEconfig/run-texhash

#
# ensure to have a proper libGL
#

test -x /sbin/conf.d/SuSEconfig.3ddiag
if [ $? -eq 0 ]; then
    /sbin/conf.d/SuSEconfig.3ddiag
    echo "Executed 3ddiag script"
else
    test -x /usr/X11R6/bin/switch2mesasoft && /usr/X11R6/bin/switch2mesasoft
    echo "Executed switch2mesasoft script"
fi

# for iSeries virtual console, detect screen size and terminal
#
if test -d /proc/iSeries; then
    eval `/bin/initviocons -e`
    # $LINES and $COLUMNS won't be correctly set in the environment when YaST2 is started later
    # thus, we unset them to force ncurses to detect the terminal size itself
    unset LINES COLUMNS
else
#
#	if we a running on a s390 or s390x
#
	HOSTTYPE=$(uname -m)
	if [ "$HOSTTYPE" = "s390" -o "$HOSTTYPE" = "s390x" ]
	then
		Display_IP=`grep Display_IP: /etc/install.inf | sed -e 's/Display_IP: \\(.*\\)/\\1/'`
		[ ! -z "$Display_IP" ] && export DISPLAY="$Display_IP:0.0"
	else
#		if not running on iSeries:
#		start a root shell on second virtual console
		if [ ! grep -qs '^NoShell:.*1' /etc/install.inf ] ; then
			SPID=`/usr/lib/YaST2/bin/startshell /dev/tty2`
		fi
	fi
fi

# tell YaST2 to start VNC server
if grep -qs '^VNC:.*1' /etc/install.inf ; then
    export VNC=1
fi

#
# Start Y2 and tell it to continue the installation. It will install
# the remaining packages and afterwards call SuSEconfig.
#
/usr/lib/YaST2/bin/YaST2 installation continue

test -z "$SPID" || kill $SPID
# kill VNC server
killall Xvnc &>/dev/null

#
# Stop pcmcia again. If needed it will be started by the
# init scripts again...
#
if [ -x /etc/init.d/pcmcia ] ; then
    if /etc/init.d/pcmcia status ; then
        /sbin/cardctl eject
        /etc/init.d/pcmcia stop
    fi
fi

# Remove temporary netconfigurations for pcmcia and usb
if [ -f "$IFCFG_PCMCIA_SAVE" ] ; then
    mv $IFCFG_PCMCIA_SAVE $IFCFG_PCMCIA
else
    rm -f $IFCFG_PCMCIA
fi
if [ -f "$IFCFG_USB_SAVE" ] ; then
    mv $IFCFG_USB_SAVE $IFCFG_PCMCIA
else
    rm -f $IFCFG_USB
fi

#
# stop hotplug, it unmounts usbdevfs and avoids error messages
#
test -x /etc/init.d/hotplug && /etc/init.d/hotplug stop # > /dev/null 2>&1

exec > /etc/issue-SuSE-first-run
