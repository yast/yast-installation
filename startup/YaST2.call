#!/bin/bash
#================
# FILE          : YaST2.call
#----------------
# PROJECT       : YaST (Yet another Setup Tool v2)
# COPYRIGHT     : (c) 2004 SUSE Linux AG, Germany. All rights reserved
#               :
# AUTHORS       : Steffen Winterfeldt <snwint@suse.de>
#               : Arvin Schnell <arvin@suse.de>
#               : Marcus Schaefer <ms@suse.de>
#               : Lukas Ocilka <locilka@suse.cz>
#               : Arvin Schnell <aschnell@suse.de>
#               :
# BELONGS TO    : System installation and Administration
#               :
# DESCRIPTION   : This is the main script to start the YaST2 installer
#               : according to the possible installation environments
#               : These are:
#               : ---
#               : - Standard Installation X11 or text based
#               : - Via serial line ttyS0/115200 baud, 8N1, RTS/CTS
#               :   which is the same as the NCURSES mode
#               : - VNC Installation via browser
#----------------
#
#set -x

#=============================================
# Functions
#=============================================


function wait_for_x11() {
#------------------------------------------------------
# after a X-Server has been started you can wait until
# the server is ready for requests using this function
# ---
	server_running=0
	# Accepts a max number of attempts to connect to the X-Server. In case that the number is
	# reached the X-Server will be killed. By default it tries forever. (bsc#1185095)
	open_display_attempts="${1:-0}"
	TESTX=/usr/lib/YaST2/bin/testX
	while kill -0 $xserver_pid 2>/dev/null ; do
		sleep 1
		if test -e /tmp/.X11-unix/X0 && test -x $TESTX ; then
			$TESTX "$YaST2color" 2>/dev/null
			err=$?
			# exit code 1 -> XOpenDisplay failed...
			if test $err = 1;then
				log "\tTestX: XOpenDisplay failed"
				server_running=0
				((open_display_attempts-=1))
				if [ "$open_display_attempts" = 0 ];then
					log "\tXOpenDisplay failed too many times (killing XServer)"
					kill_xserver
					break
				fi
				continue
			fi
			# server is running, detach oom-killer from it
			echo -n '-1000' > /proc/$xserver_pid/oom_score_adj
			server_running=1
			# adjust video mode using xrandr, if requested
			SETMODE=/usr/lib/YaST2/bin/set_videomode
			if [ -n "$XVideo" -a -x $SETMODE ];then
			  $SETMODE "$XVideo"
			fi
			break
		fi
	done
}


function calculate_x11_dpi () {
#------------------------------------------------------
# Calculate the monitor's dpi from xrandr's output
# ---
        local MON_SIZE=`xrandr | grep mm | head -n 1`
	local MON_WIDTH_PX=`echo $MON_SIZE | sed -e "s/.* \([0-9]\+\)x[0-9]\++.*/\1/"`
	local MON_WIDTH_MM=`echo $MON_SIZE | sed -e "s/.* \([0-9]\+\)mm x \([0-9]\+\)mm.*/\1/"`

        log "HiDPI Check..."
        log "=============="
	log "\tMonitor size: $MON_SIZE"
	log "\tMonitor width px: $MON_WIDTH_PX"
	log "\tMonitor width mm: $MON_WIDTH_MM"

        if [ -n "$YAST_MON_WIDTH_MM" ]; then
                # Enable overriding the monitor width from the command line or
                # from an installation ISO boot parameter:
                #
                # Either boot the installation ISO with something like
                #
                #   YAST_MON_WIDTH_MM=200
                #
                # (which will end up in the environment)
                # or start this script in DPI debugging mode with
                #
                #   FAKE_MON_WIDTH_MM=200 ./YaST2.call

                log "\tOVERRIDING the monitor width in mm with ${YAST_MON_WIDTH_MM}"
                MON_WIDTH_MM="$YAST_MON_WIDTH_MM"
        fi

        if [ ${MON_WIDTH_MM:-0} -le 0 ]; then
                log "\tMonitor width in mm is unknown, using 96 dpi as default"
                log "\t(Use YAST_MON_WIDTH_MM=xx at the boot prompt to set manually)"
                local DPI=96
        else
                # Convert the monitor width in mm to inches (25.4 mm per inch)
                # and calculate the DPI (dots per inch), but round to multiples
                # of 24 to avoid drawing artifacts due to weird scale factors.
                # We want scale factors to be multiple of 0.25, i.e. 1, 1.25,
                # 1.5 etc., not a weird fraction like 1.2734 or similar.
                #
                # All this assumes the YaST Qt UI to be designed for about 96 dpi.

                local DPI=`ruby -e "puts (($MON_WIDTH_PX/($MON_WIDTH_MM/25.4)/24).round)*24"`
        fi

        if [ ${DPI:-0} -lt 96 ]; then
                log "\tMonitor DPI is too low (${DPI}), using 96 dpi"
                DPI=96
        elif [ ${DPI:-96} -gt 384 ]; then
                # Set an upper limit to protect against monitors reporting bogus EDID values
                log "\tMonitor DPI is suspiciously high (${DPI}), using 384 dpi"
                DPI=384
        fi

	log "\tMonitor DPI: $DPI"
	echo "$DPI"
}


function set_xft_dpi () {
#------------------------------------------------------
# Set Xft.dpi resource using a helper tool
# ---
	/usr/lib/YaST2/bin/xftdpi "$1" && log "Xft.dpi set to: $1"
        # If the Xft.dpi X resource is set, it overrides the value
        # that Qt otherwise calculates.
}


function set_font_size () {
#------------------------------------------------------
# Set Qt environment variables for the scale factor, i.e. the factor by which
# to increase the size of the UI in HiDPI cases.
#
# We assume the UI is designed for at most 144 dpi and calculate the scale
# factor based on that. We use multiples of 0.25 here (1.0, 1.25, 1.5, , 1.75,
# 2.0, ...).
# ---
        local DPI=${1:-96}
        # Reference DPI as a base for scaling
        local REF_DPI=144
        local FONT_SIZE=10
        log "\tReference DPI: $REF_DPI"

        if [ $DPI -le 96 ]; then
                # Don't set QT_SCALE_FACTOR unless really needed,
                # otherwise all openQA needles need to be changed.

                log "\tNo Qt scaling needed."
        else
                # Calculate a scale factor based on the reference DPI, but no
                # smaller than 1.0; and round to multiples of 0.25 (1.25, 1.5,
                # 1.75, ...) to avoid drawing artifacts due to very odd
                # fractions.

                export QT_SCALE_FACTOR=`ruby -e "puts [(($DPI/(1.0*$REF_DPI)/0.25).round * 0.25), 1.0].max"`
                FONT_SIZE=$(ruby -e "puts 12 * $QT_SCALE_FACTOR")

                # Override the Qt default of rounding to the next integer.
                # https://doc-snapshots.qt.io/qt5-5.15/highdpi.html
                export QT_SCALE_FACTOR_ROUNDING_POLICY="PassThrough"

                log "\tQT_SCALE_FACTOR: $QT_SCALE_FACTOR"
                log "\tQT_SCALE_FACTOR_ROUNDING_POLICY: $QT_SCALE_FACTOR_ROUNDING_POLICY"
        fi

	if [ -n "$XTERM_FONT_SIZE" ]; then
		# Enable overriding the xterm font size from the command line or
		# from an installation ISO boot parameter:
		#
		# Either boot the installation ISO with something like
		#
		#   XTERM_FONT_SIZE=21
		#
		# (which will end up in the environment)
		# or start this script in DPI debugging mode with
		#
		#   FAKE_MON_WIDTH_MM=200 XTERM_FONT_SIZE=21 ./YaST2.call
		log "\tUsing XTERM_FONT_SIZE from environment: ${XTERM_FONT_SIZE}"
	else
		export XTERM_FONT_SIZE=$FONT_SIZE
		log "\tXTERM_FONT_SIZE: $XTERM_FONT_SIZE for $DPI dpi"
	fi
}


function add_x11_resources() {
#------------------------------------------------------
# Add some X resources for xterm to /root/.Xdefaults
#
# Notice that this file is only used if nothing has been
# loaded into the X server with 'xrdb' yet.
# ---

	local RESOURCE_FILE=/root/.Xdefaults
	XTERM_FONT_SIZE=${XTERM_FONT_SIZE:-12}
	log "\tAdding X resources for xterm to $RESOURCE_FILE"

	cat >>$RESOURCE_FILE <<EOF

! Fonts for xterm during a YaST Qt UI installation
! (You can start an xterm with Ctrl-Shift-Alt X)
XTerm*faceName:	 DejaVu Sans Mono
XTerm*faceSize:	 $XTERM_FONT_SIZE

EOF
}


function prepare_for_x11 () {
#------------------------------------------------------
# prepare X11 installation
# ---
	local fbdevname
	set_splash 100

	#=============================================
	# start X-Server and wait until ready
	#---------------------------------------------
	if [ ! -z "$NEED_XSERVER" ];then
		export DISPLAY=:0
		Xorg -noreset -br -nolisten tcp -deferglyphs 16 2>/dev/tty8 1>&2 vt07 &
		xserver_pid=$!
		# wait 15 seconds for the X-Server before killing it.
		wait_for_x11 15
		if [ "$server_running" = 1 ];then
			log "\tX-Server is ready: $xserver_pid"

			local DPI=`calculate_x11_dpi`
			# set_xft_dpi $DPI
                        set_font_size $DPI
                        add_x11_resources
		fi
	fi

	#=============================================
	# set YaST2 Qt options for local displays
	#---------------------------------------------
	if [ ! -z "$NEED_XSERVER" ];then
		Y2_UI_ARGS="--noborder --auto-fonts --fullscreen"
	fi
}



function prepare_for_qt () {
    set_inst_qt_env
    prepare_for_x11
}


function prepare_for_ncurses () {
#------------------------------------------------------
# prepare NCURSES installation
# ---
	#=============================================
	# Create Braille config if not update mode
	#---------------------------------------------
	if [ $INST_MODE = "normal" ];then
	if [ ! -z "$Braille" ];then
		log "Braille config needed, setting up braille display"
		# downcase $Braille so that brld will find the driver
		sed -e "s#brlname=.*#brlname=${Braille,,}#" \
			-e "s#brlport=.*#brlport=$Brailledevice#" /etc/sbl.conf \
		>/tmp/suse-blinux.conf
		mv -f /tmp/suse-blinux.conf /etc/sbl.conf
		/bin/start_service brld
		/bin/start_service sbl
	fi
	fi
	#=============================================
	# Check for FbIterm
	#---------------------------------------------
	check_run_fbiterm
	log "\tCheck for FB-I-terminal: RUN_FBITERM = $RUN_FBITERM"
	set_inst_ncurses_env
	#=============================================================
	# Disable display of status messages on the console, as
	# controlled via systemd.show_status=0 on the kernel command.
	# line. (see "man systemd")
	# In the case of SSH installation messages will be displayed
	# on console only. So we do not need it here.
	#-------------------------------------------------------------
	if [ $SELECTED_MEDIUM != "SSH" ]; then
	    /usr/bin/kill -SIGRTMIN+21 1
	fi
}


function prepare_for_ssh () {
#------------------------------------------------------
# prepare SSH installation
# ---
#
	set_inst_qt_env
}


function prepare_for_vnc () {
#------------------------------------------------------
# prepare VNC installation
# ---
#
	#=============================================
	# Setup splash screen
	#---------------------------------------------
	set_splash 100

	#=============================================
	# Setup y2start options
	#---------------------------------------------
	Y2_UI_ARGS="--fullscreen --noborder --auto-fonts"

	#=============================================
	# Setup VNC server and start it
	#---------------------------------------------
	setupVNCAuthentication
	if [ $VNCPASS_EXCEPTION = 0 ];then
		disable_splash
		displayVNCMessage
		stop_xvnc
		startVNCServer
		wait_for_x11
		if [ "$server_running" = 1 ];then
			log "\tXvnc-Server is ready: $xserver_pid"
		fi
	fi

	#=============================================
	# Use YaST theme
	#---------------------------------------------
	set_inst_qt_env
}


function kill_xserver () {
  if [ -n "$xserver_pid" ];then
    sleep 1 && kill $xserver_pid
    while kill -0 $xserver_pid 2>/dev/null ; do
      sleep 1
    done
    unset xserver_pid
  fi
}


function check_x11 () {
#------------------------------------------------------
# check if the prepared medium X11 (Qt) is valid
# ---
	if [ ! -z "$NEED_XSERVER" ];then
		if [ "$server_running" = 0 ];then
			# /.../
			# X-Server couldn't be started, selecting
			# NCURSES mode as fallback ?
			# ---
			log "\tX-Server couldn't be started, falling back to ncurses"
			Y2_MODE_FLAGS="--arg text_fallback"
			SELECTED_MEDIUM="NCURSES"
			prepare_for_ncurses
			Y2_MODE=ncurses
		fi
	else
		/usr/lib/YaST2/bin/testX --fast 2>/dev/null
		if test $? = 1;then
			log "\tCannot access Display: $DISPLAY, falling back to ncurses"
			SELECTED_MEDIUM="NCURSES"
			prepare_for_ncurses
			Y2_MODE=ncurses
		fi
	fi
}


function check_network () {
#------------------------------------------------------
# check if the prepared medium SSH is valid. It is valid
# if there is a network interface accessable and we are
# able to use ncurses or X11
# ---
	if ! found_iface ; then
		# /.../
		# No network interface found for SSH or VNC installation
		# this is a fatal error here
		# ---
		log "\tNo network interface found, fatal error"
		fatalError
	fi
	if [ ! -z "$DISPLAY" ];then
		log "\tDisplay: $DISPLAY found for network install"
		Y2_MODE=qt
	fi
	if ! check_qt ; then
	    log "\tQt plugin check failed falling back to ncurses"
	    Y2_MODE=ncurses
	fi
}


function check_vnc () {
#------------------------------------------------------
# check if the prepared medium VNC is valid
# ---
	check_network
	if [ $VNCPASS_EXCEPTION = 1 ];then
		log "\tVNC access has been disabled due to a password exception"
		log "\tPlease make sure the password is at least 8 characters long"
		fatalError
	fi
	if [ "$server_running" = 0 ];then
		# /.../
		# XVnc server couldn't be started, what to do now, I think
		# this is a fatal error here
		# ---
		log "\tXVnc server couldn't be started, fatal error"
		fatalError
	fi
}


function ssh_reboot_message()
{
	# SecondStageRequired can be set:
	# 1. after 1st stage (note 2nd stage is not always required)
	# 2. after 2nd stage (when another YaST run is required due to e.g.
	#    kernel update)

	if [ -f /etc/install.inf ] ; then
		SecondStageRequired=$(awk ' /^SecondStageRequired:/ { print $2 }' < /etc/install.inf)
	fi

	if [ -n "$SecondStageRequired" -a "$SecondStageRequired" = "1" ] ; then
		echo "*** Preparing SSH installation for reboot ***"
		echo "*** NOTE: after reboot, you have to reconnect and call yast.ssh ***"
		log "\tPreparing SSH installation for reboot"
	fi
}


function validate_backup () {
  # Check that the ID and VERSION_ID in the backup os-release file
  # matches with the values in the /etc/os-release to considered it
  # as a valid backup to be restored (bsc#1097297)
  #
  # See also https://www.freedesktop.org/software/systemd/man/os-release.html
  root="/mnt"
  backup_id=$(grep "^ID=" $root/var/adm/backup/os-release | cut -d'=' -f2 | tr -d '"')
  backup_version_id=$(grep "^VERSION_ID=" $root/var/adm/backup/os-release | cut -d'=' -f2 | tr -d '"')
  backup_version="$backup_id-$backup_version_id"
  current_id=$(grep "^ID=" $root/etc/os-release | cut -d'=' -f2 | tr -d '"')
  current_version_id=$(grep "^VERSION_ID=" $root/etc/os-release | cut -d'=' -f2 | tr -d '"')
  current_version="$current_id-$current_version_id"

  log "Checking if it is a valid backup"

  if [ $backup_version = $current_version ]; then
    return 0
  else
    log "\tNot valid backup version. Expected: $current_version. Found: $backup_version"
    return 1
  fi
}


function restore_backup () {
  # restores backup if it is available
  if [ -d /mnt/var/adm/backup/system-upgrade ]; then
    if validate_backup; then
      log "\tStarting restore scripts"

      for i in /mnt/var/adm/backup/system-upgrade/restore-*.sh; do
        log "\tStarting $i"

        sh $i /mnt
      done
    else
      log "\tBackup was not restore because its version info does not match"
    fi
  fi
}


function start_yast () {
#------------------------------------------------------
# Start YaST2 refering to the contents of the Y2_*
# startup variables
# ---
	local overcommit
	read  overcommit < /proc/sys/vm/overcommit_memory

	echo "*** Starting YaST ***"
        log "================"
        log "Starting YaST..."
        log "================"
	log "\tAllow big memory allocation: overcommit_memory=1"

	echo 1 > /proc/sys/vm/overcommit_memory
	if [ "$SPLASH" = yes -a -x /sbin/splash -a -n "$SPLASHCFG" ];then
		/sbin/splash -t "YaST running"
	fi
	export QT_IM_MODULE=xim

	if [ "$RUN_FBITERM" = "1" ]; then
	    OPT_FBITERM="/usr/bin/fbiterm --"
	else
	    OPT_FBITERM=
	fi

	log "\tMODULE_NAME:  $Y2_MODULE_NAME"
	log "\tMODE_FLAGS:   $Y2_MODE_FLAGS"
	log "\tMODULE_ARGS:  $Y2_MODULE_ARGS"
	log "\tMODE:         $Y2_MODE"
	log "\tUI_ARGS:      $Y2_UI_ARGS"
	log "\tQT_IM_MODULE: $QT_IM_MODULE"

        Y2START=/usr/lib/YaST2/bin/y2start
        Y2START_ARGS="$Y2_MODULE_NAME $Y2_MODE_FLAGS $Y2_MODULE_ARGS $Y2_MODE $Y2_UI_ARGS"

        # https://rubygems.org/gems/memory_profiler
        if [ "$MEMORY_PROFILER" = "1" ]; then
            Y2START_ARGS="\
                --color \
                --out=/var/log/YaST2/memprof.txt \
                $Y2START \
                -- \
                $Y2START_ARGS"
            Y2START="ruby-memory-profiler"
        fi

        # https://www.valgrind.org/docs/manual/ms-manual.html
        if [ "$MASSIF" = "1" ]; then
            Y2START_ARGS="\
                --tool=massif \
                --massif-out-file=/var/log/YaST2/massif-%p.out \
                $Y2START \
                $Y2START_ARGS"
            Y2START="valgrind"
        fi

	if [ "$Y2GDB" != "1" ]; then
	    $OPT_FBITERM \
                "$Y2START"		\
		$Y2START_ARGS
	    Y2_EXIT_CODE=$?
	else
	    GDBCMDS=/var/lib/YaST2/gdb-cmds
	    echo tty /dev/tty10 > $GDBCMDS
	    echo set pagination off >> $GDBCMDS
	    echo set args $Y2START_ARGS >> $GDBCMDS
	    /usr/bin/gdb -x $GDBCMDS "$Y2START" | \
		tee /var/log/YaST2/gdb-log
	    Y2_EXIT_CODE=$?
	fi
        log "==============="
        log "YaST terminated"
        log "==============="
	log "\tY2_EXIT_CODE: $Y2_EXIT_CODE"

	Y2_ABORT_MESSAGE="YaST seems to be aborted abnormally !"
	Y2_OK_MESSAGE="YaST procedure ended successfully"
	if [ -s /etc/yast.inf ];then
		#=============================================
		# check yast.inf contents
		#---------------------------------------------
		cat /etc/yast.inf | grep -q -i "Aborted: 1"
		if [ $? = 0 ];then
			log "\t$Y2_ABORT_MESSAGE"
		fi
	else
		#=============================================
		# YaST ended successfully
		#---------------------------------------------
		log "\t$Y2_OK_MESSAGE"
	fi
	if [ $Y2_EXIT_CODE -eq 0 ];then
		start_yast_and_reboot
		start_yast_again
	fi
	log "\tReset memory allocation: overcommit_memory=$overcommit"
	echo $overcommit > /proc/sys/vm/overcommit_memory

	# Starting YAST2 control center if it has been set in yast2-firstboot
	if [ -f /var/lib/YaST2/start_y2cc ] ; then
	        rm /var/lib/YaST2/start_y2cc
		/sbin/yast2
	fi
}


function start_yast_and_reboot () {
#------------------------------------------------------
# This function will reboot the system and start yast
# again by touching the file /var/lib/YaST2/runme_at_boot.
# The function is triggered by the file /var/lib/YaST2/reboot
# ---
	if [ -f /var/lib/YaST2/reboot ];then
		# kill shell on second virtual console
		if test ! -z "$SPID" ; then
			log "\tkill shell with PID: $SPID"
			kill -KILL $SPID &>/dev/null
		fi
		rm -f /var/lib/YaST2/reboot
		/sbin/shutdown -r now
	fi
}


function start_yast_again () {
#------------------------------------------------------
# This function will restart yast again with the same
# options as used before. The function is triggered by
# the file /var/lib/YaST2/restart_yast
# ---
	if [ -f /var/lib/YaST2/restart_yast ];then
		rm -f /var/lib/YaST2/restart_yast
		start_yast
	fi
}



#----------------------------------------------------------------------
# MAIN
#----------------------------------------------------------------------


#=============================================
# Start the Magic :-)
#=============================================
# 1) Source common script functions
#---------------------------------------------
. /usr/lib/YaST2/startup/common/functions.sh
. /usr/lib/YaST2/startup/common/network.sh
. /usr/lib/YaST2/startup/requires


# Debugging helper: Only calculate and show the DPI, then exit.
# Start with
#
#   FAKE_MON_WIDTH_MM=200 ./YaST2.call
#
# and watch stdout and /var/log/YaST2/y2start.log

if [ -n "$FAKE_MON_WIDTH_MM" ]; then
        echo "*** DPI Debug mode ***"
        YAST_MON_WIDTH_MM="$FAKE_MON_WIDTH_MM"
        DPI=`calculate_x11_dpi`
        echo "DPI: $DPI"
        set_font_size $DPI
        env | grep -E "^(QT_SCALE|XTERM)"
        # add_x11_resources
        echo "Done."
        exit 1
fi


#=============================================
# 1.1) set splash progress bar to 90%
#---------------------------------------------
set_splash 90
#=============================================
# 1.2) set root HOME directory
#---------------------------------------------
export HOME=/root
#=============================================
# 1.3) set HTTP/FTP proxy and configure syslog
#---------------------------------------------
set_syslog ; set_proxy

#=============================================
# 2) Initialize...
#---------------------------------------------
# 2.1) setup PATH
PATH=$ybindir:$PATH

#=============================================
# 2.3) obtain RAM size in Kb
#---------------------------------------------
MEM_TOTAL=`awk '/^MemTotal:/{ print $2 }' /proc/meminfo`
if [ ${#MEM_TOTAL} -gt 9 ];then
	MEM_TOTAL=1000000000
fi

#=============================================
# 2.5) setup installation mode (update y/n)
#---------------------------------------------
INST_MODE="normal"
if [ -f /var/lib/YaST2/update_mode ];then
	INST_MODE="update"
fi
#=============================================
# 2.6) import install.inf
#---------------------------------------------
import_install_inf

#=============================================
# 2.7) set LOG prefix
#---------------------------------------------
LOG_PREFIX="Stage [call]"

#=============================================
# 3) Medium prequalification
#---------------------------------------------
# Check which installation mediums can be used. There are
# four mediums available: Qt(0) SSH(1), VNC(2), NCURSES(3).
# The following checks will create an array which contains
# the possible mediums. An index of 1 indicates "can be used"
# an index of 0 indicated "cannot be used"
# ---
MEDIUM=(1 1 1 1)

#=============================================
# 3.1) prequalification checks for Qt and
#---------------------------------------------
log "Starting prequalification checks..."
log "==================================="
# 3.1.1) Qt plugin check...
if ! check_qt ; then
	log "\tQt plugin check failed -> Medium Qt disabled"
	MEDIUM[0]=0
fi
# 3.1.3) Memory check >= $MEM_NEEDED for Qt/X11...
if [ $MEM_TOTAL -lt "$MEM_NEEDED" ];then
	log "\tMemory requirement > $MEM_NEEDED not fulfilled -> Medium Qt disabled"
	MEDIUM[0]=0
fi

# 3.1.4) Check if we need to start our own X11 server...
if [ -z "$DISPLAY" ];then
	log "\tX-Server is needed"
	NEED_XSERVER=1
fi

# 3.1.5) Check for xorg.conf...
if [ ! -f /etc/X11/xorg.conf ] ; then
    if [ -f /etc/X11/xorg.conf.template ] ; then
	log "\tCopying /etc/X11/xorg.conf.template to /etc/X11/xorg.conf"
	cp /etc/X11/xorg.conf.template /etc/X11/xorg.conf
    fi
fi

# 3.1.6) Check for WindowManager configuration
if [ ! -f /etc/icewm/preferences.yast2 ];then
	log "\tNo Windowmanager configuration found -> Medium Qt disabled"
	MEDIUM[0]=0
fi
# 3.1.7) Check for remote display usage
if [ ! -z $Display_IP ];then
	log "\tRemote Display usage -> Medium Qt enabled"
        # check if a display is defined, check for ":<display>[.<screen>]" suffix
        # Note: IPv6 address needs to be enclosed in square brackets because
        # it uses ':' delimiter which can cause ambiguity
        SCREEN_REGEX="(^([^:]+|\[.*\]):[0-9]+(|\.[0-9]+)$)"
        if [[ $Display_IP =~ $SCREEN_REGEX ]]; then
          export DISPLAY="$Display_IP"
        else
          export DISPLAY="$Display_IP:0.0"
        fi
        log "\tExporting DISPLAY: $DISPLAY"
	NEED_XSERVER=""
	MEDIUM[0]=1
fi

# 3.1.8) Check for testX binary
if [ ! -x /usr/lib/YaST2/bin/testX ] ; then
	log "\tNo testX binary installed -> Medium Qt disabled"
	MEDIUM[0]=0
fi

#=============================================
# 3.2) prequalification checks for SSH
#---------------------------------------------
# 3.2.1) Check for SSH daemon
if ! pidof sshd > /dev/null 2>&1 ; then
	log "\tNo SSH daemon running -> Medium SSH disabled"
	MEDIUM[1]=0
fi

#=============================================
# 3.3) prequalification checks for VNC
#---------------------------------------------
# 3.3.1) Check for WindowManager configuration
if [ ! -f /etc/icewm/preferences.yast2 ];then
	log "\tNo Windowmanager configuration found -> Medium VNC disabled"
	MEDIUM[2]=0
fi
# 3.3.2) Check for VNC X-Server binary
if [ ! -x /usr/bin/Xvnc ] ; then
	log "\tNo Xvnc server installed -> Medium VNC disabled"
	MEDIUM[2]=0
fi
# 3.3.3) Check for testX binary
if [ ! -x /usr/lib/YaST2/bin/testX ] ; then
	log "\tNo testX binary installed -> Medium VNC disabled"
	MEDIUM[2]=0
fi

#=============================================
# 4) Evaluate medium selection
#---------------------------------------------
# At this point we are evaluating the variables which have
# been imported from the install.inf file into the current
# environment. The standard method of installing the system
# should be Qt based. Refering to the variables Textmode,
# Braille, UseSSH and VNC another medium could be selected
# VNC overrides UseSSH
# ---
log "Evaluate medium selection..."
log "============================"
SELECTED_MEDIUM="QT"
if [ "$Textmode" = 1 ];then
	log "\tMedium Textmode (ncurses) has been selected"
	SELECTED_MEDIUM="NCURSES"
fi
if [ ! -z "$Braille" ];then
	log "\tMedium Braille (ncurses) has been selected"
	SELECTED_MEDIUM="NCURSES"
fi
if [ "$UseSSH" = 1 ];then
	log "\tMedium SSH has been selected"
	SELECTED_MEDIUM="SSH"
fi
if [ "$VNC" = 1 ];then
	log "\tMedium VNC has been selected"
	SELECTED_MEDIUM="VNC"
fi

#=============================================
# 5) Check selected medium
#---------------------------------------------
# Refering to the prequalification check results we need to
# check if the selected medium is valid according to the
# MEDIUM flag entry. If the medium is not valid we will
# fallback to NCURSES mode
# ---
log "Check selected medium..."
log "========================"
log "\tWished medium is: $SELECTED_MEDIUM"
case $SELECTED_MEDIUM in
	QT)  {
		if [ ${MEDIUM[0]} -eq 0 ];then
			log "\tMedium Qt not available, falling back to ncurses"
			SELECTED_MEDIUM="NCURSES"
		fi
	} ;;
	SSH) {
		if [ ${MEDIUM[1]} -eq 0 ];then
			log "\tMedium SSH not available, falling back to ncurses"
			SELECTED_MEDIUM="NCURSES"
		fi
	} ;;
	VNC) {
		if [ ${MEDIUM[2]} -eq 0 ];then
			log "\tMedium VNC not available, falling back to ncurses"
			SELECTED_MEDIUM="NCURSES"
		fi
	} ;;
esac
log "\tSelected medium is: $SELECTED_MEDIUM"

#=============================================
# 6) Prepare selected medium
#---------------------------------------------
case $SELECTED_MEDIUM in
	QT)      prepare_for_qt      ; Y2_MODE=qt      ;;
	SSH)     prepare_for_ssh     ; Y2_MODE=ncurses ;;
	VNC)     prepare_for_vnc     ; Y2_MODE=qt      ;;
	NCURSES) prepare_for_ncurses ; Y2_MODE=ncurses ;;
esac

#=============================================
# 7) Check prepared medium
#---------------------------------------------
case $SELECTED_MEDIUM in
	QT)  check_x11     ;;
	SSH) check_network ;;
	VNC) check_vnc     ;;
esac

# The prepare_for_ncurses in step 6 is kinda useless if step 7 can
# change Y2MODE to ncurses in several ways

#running with threads (#164999, FaTE #301899)
#if [ "$Y2_MODE" = "ncurses" ]; then
#    Y2_UI_ARGS=--nothreads
#fi

#=============================================
# 8) Call YaST2
#---------------------------------------------
Y2_MODULE_NAME=${1:-installation}; shift
Y2_MODULE_ARGS=""
for i in "$@"; do
  Y2_MODULE_ARGS="$Y2_MODULE_ARGS --arg $i"
done
start_yast

#=============================================
# 9) Clean sweep
#---------------------------------------------
# 9.1) clear Qt environment...
clr_inst_qt_env

# 9.2) kill X-Server...
if [ "$server_running" = 1 ];then
  kill_xserver
fi

if [ -s /etc/yast.inf ];then
        # aborted, restore the upgrade backup
        grep -q -i "^Aborted:[ \t]*1" /etc/yast.inf && restore_backup
        # no abort, not reboot status => YaST crashed, restore the upgrade backup
        grep -q -i -v -e "^Aborted:" -e "^Root:" /etc/yast.inf && restore_backup
fi

if [ $SELECTED_MEDIUM = "SSH" ] && [ ! "$VNC" = 1 ];then
	ssh_reboot_message
	# the inst-sys is waiting for the /tmp/YaST2_ssh_installation_finished file and
	# when found the ssh daemon is killed, so create this file as the very last step!!
	# (https://github.com/openSUSE/installation-images/blob/c57181329ab7040369da705c5b0ddd78e2960bf0/data/root/etc/inst_setup#L221-L229)
	echo $Y2_EXIT_CODE > /tmp/YaST2_ssh_installation_finished
fi

if [ $SELECTED_MEDIUM != "SSH" ] && [ "$Y2_MODE" = "ncurses" ]; then
    # Enable display of status messages on the
    # console, as controlled via systemd.show_status=1
    # on the kernel command line (see "man systemd")
    # In the case of SSH installation messages will be displayed
    # on console only. So we do not need it here because we
    # have not disabled it while YAST installation.
    /usr/bin/kill -SIGRTMIN+20 1
fi

#=============================================
# 10) exit with YaST2 exit code
#---------------------------------------------
exit $Y2_EXIT_CODE

